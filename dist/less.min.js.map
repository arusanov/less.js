{"version":3,"sources":["../lib/less/tree/color.js","../lib/less/tree/rule.js","../lib/less/functions/function-registry.js","../lib/less/visitors/visitor.js","../lib/less/functions/color.js","../lib/less/functions/color-blending.js","../lib/less/logger.js","../lib/less/environment/environment.js","../lib/less/source-map-output.js","../lib/less/source-map-builder.js","../lib/less/utils.js","../lib/less/less-error.js","../lib/less/contexts.js","../lib/less/tree/node.js","../lib/less/tree/alpha.js","../lib/less/data/colors.js","../lib/less/tree/paren.js","../lib/less/tree/combinator.js","../lib/less/tree/element.js","../lib/less/tree/selector.js","../lib/less/tree/value.js","../lib/less/tree/keyword.js","../lib/less/functions/default.js","../lib/less/tree/debug-info.js","../lib/less/tree/ruleset.js","../lib/less/tree/directive.js","../lib/less/tree/detached-ruleset.js","../lib/less/data/unit-conversions.js","../lib/less/tree/unit.js","../lib/less/tree/dimension.js","../lib/less/tree/operation.js","../lib/less/tree/variable.js","../lib/less/tree/attribute.js","../lib/less/tree/js-eval-node.js","../lib/less/tree/quoted.js","../lib/less/tree/comment.js","../lib/less/tree/expression.js","../lib/less/functions/function-caller.js","../lib/less/tree/call.js","../lib/less/tree/url.js","../lib/less/tree/anonymous.js","../lib/less/tree/media.js","../lib/less/tree/import.js","../lib/less/tree/mixin-definition.js","../lib/less/tree/mixin-call.js","../lib/less/tree/javascript.js","../lib/less/tree/assignment.js","../lib/less/tree/condition.js","../lib/less/tree/unicode-descriptor.js","../lib/less/tree/negative.js","../lib/less/tree/extend.js","../lib/less/tree/ruleset-call.js","../lib/less/tree/index.js","../lib/less/visitors/import-sequencer.js","../lib/less/visitors/import-visitor.js","../lib/less/visitors/set-tree-visibility-visitor.js","../lib/less/visitors/extend-visitor.js","../lib/less/visitors/join-selector-visitor.js","../lib/less/visitors/to-css-visitor.js","../lib/less/visitors/index.js","../lib/less/transform-tree.js","../lib/less/parse-tree.js","../lib/less/parser/chunker.js","../lib/less/parser/parser-input.js","../lib/less/parser/parser.js","../lib/less/plugins/function-importer.js","../lib/less/import-manager.js","../lib/less/data/index.js","../lib/less/environment/abstract-file-manager.js","../lib/less/functions/data-uri.js","../lib/less/functions/math-helper.js","../lib/less/functions/math.js","../lib/less/functions/number.js","../lib/less/functions/string.js","../lib/less/functions/svg.js","../lib/less/functions/types.js","../lib/less/functions/index.js","../lib/less/render.js","../lib/less/plugin-manager.js","../lib/less/parse.js","../lib/less-browser/index.js","../lib/less/index.js"],"names":["clamp","v","max","Math","min","toHex","map","c","round","toString","join","evalName","context","name","value","i","n","length","output","s","eval","genCSS","makeRegistry","base","func","toLowerCase","this","_data","hasOwnProperty","functions","keys","forEach","add","get","_noop","node","indexNodeTypes","parent","ticker","key","child","_typeof","prototype","type","typeIndex","val","hsla","color","colorFunctions","h","l","a","number","Dimension","parseFloat","unit","is","scaled","size","colorBlend","mode","color1","color2","ab","alpha","as","ar","cr","r","rgb","cb","cs","Color","logger","msg","_fireEvent","listener","_listeners","push","splice","logFunction","Environment","externalEnvironment","fileManagers","optionalFunctions","requiredFunctions","concat","propName","environmentFunc","bind","warn","getFileManager","filename","currentDirectory","options","environment","isSync","pluginManager","getFileManagers","fileManager","addFileManager","clearFileManagers","sourceMapOutput","_css","_rootNode","rootNode","_contentsMap","contentsMap","_contentsIgnoredCharsMap","contentsIgnoredCharsMap","sourceMapFilename","_sourceMapFilename","replace","_outputFilename","outputFilename","sourceMapURL","sourceMapBasepath","_sourceMapBasepath","sourceMapRootpath","_sourceMapRootpath","charAt","_outputSourceFiles","outputSourceFiles","_sourceMapGeneratorConstructor","getSourceMapGenerator","_lineNumber","_column","normalizeFilename","indexOf","substring","chunk","fileInfo","index","mapLines","lines","sourceLines","columns","sourceColumns","inputSource","slice","split","_sourceMapGenerator","addMapping","line","column","isEmpty","toCSS","source","setSourceContent","sourceMapContent","JSON","stringify","toJSON","sourceMap","sourceMapBuilder","SourceMapOutput","imports","contentsIgnoredChars","contents","sourceMapOutputFilename","sourceMapGenerator","sourceMapFileInline","css","sourceMapInputFilename","getCSSAppendage","undefined","encodeBase64","getExternalSourceMap","setExternalSourceMap","isInline","getSourceMapURL","getOutputFilename","getInputFilename","utils","inputStream","match","LessError","module","e","importManager","currentFilename","call","input","loc","getLocation","col","callLine","callExtract","extract","message","stack","Object","create","F","Error","constructor","contexts","contexts_1","copyFromOriginal","original","destination","propertiesToCopy","parseCopyProperties","Parse","paths","evalCopyProperties","Eval","frames","importantScope","inParenthesis","parensStack","outOfParenthesis","pop","isMathOn","strictMath","isPathRelative","path","test","normalizePath","segments","reverse","segment","Node","strs","accept","visitor","visit","_operate","op","b","fround","precision","numPrecision","toFixed","blocksVisibility","visibilityBlocks","addVisibilityBlock","removeVisibilityBlock","ensureVisibility","nodeVisible","ensureInvisibility","isVisible","visibilityInfo","copyVisibilityInfo","info","compare","Array","isArray","numericCompare","Alpha","_Node","colors","originalForm","parseInt","luma","g","pow","doNotCompress","compress","toRGB","splitcolor","operate","other","toHSL","d","toHSV","toARGB","x","fromKeyword","keyword","Paren","paren","Combinator","emptyOrWhitespace","trim","_this","spaceOrEmpty","_noSpaceCombinators","combinator","Element","currentFileInfo","clone","arguments","firstSelector","element","Selector","elements","extendList","condition","evaldCondition","visitArray","createDerived","newSelector","mediaEmpty","createEmptySelectors","el","sels","len","olen","CacheElements","_elements","shift","isJustParentSelector","extend","getIsOutput","selector","Value","Keyword","True","False","Rule","important","merge","inline","variable","allowRoot","lastRule","strictMathBypass","evaldValue","importantResult","makeImportant","rule","functionRegistry","defaultFunc","value_","error_","_default","debugInfo","ctx","lineSeparator","result","dumpLineNumbers","asComment","asMediaQuery","lineNumber","fileName","filenameWithProtocol","debugInfo_1","Ruleset","selectors","rules","strictImports","_lookups","thisSelectors","selCnt","hasOnePassingSelector","error","reset","ruleset","subRule","originalRuleset","root","firstRoot","allowImports","found","globalFunctionRegistry","inherit","ctxFrames","unshift","ctxSelectors","evalImports","rsRules","rsRuleCnt","evalFirst","mediaBlockCount","mediaBlocks","filter","apply","resetCache","j","bubbleSelectors","importRules","matchArgs","args","matchCondition","lastSelector","_rulesets","_variables","variables","reduce","hash","vars","rulesets","filtRules","cnt","isRuleset","prependRule","find","self","foundMixins","rule$$1","charsetRuleNodes","ruleNodes","tabLevel","tabRuleStr","tabSetStr","sep","charsetNodeIndex","importNodeIndex","isCharset","getDebugInfo","pathCnt","pathSubCnt","currentLastRule","isRulesetLike","joinSelectors","joinSelector","createParenthesis","elementsToPak","originalElement","replacementParen","insideParent","createSelector","containedElement","addReplacementIntoPath","beginningPath","addPath","replacedElement","originalSelector","newSelectorPath","newJoinedSelector","parentEl","restOfPath","selector$$1","addAllReplacementsIntoPath","addPaths","mergeElementsOnToSelectors","sel","replaceParentSelector","inSelector","k","currentElements","newSelectors","selectorsMultiplied","hadParentSelector","nestedSelector","maybeSelector","nestedPaths","replaced","replacedNewSelectors","replacementSelector","deriveSelector","deriveFrom","newPaths","concatenated","Directive","isRooted","outputRuleset","mediaPathBackup","mediaBlocksBackup","mediaPath","_len","_key","ruleCnt","directive","DetachedRuleset","callEval","detachedRuleset","unitConversions","PI","Unit","numerator","denominator","backupUnit","sort","strictUnits","returnStr","unitString","toUpperCase","isLength","isSingular","callback","usedUnits","group","mapUnit","groupName","atomicUnit","cancel","counter","count","toColor","strValue","String","substr","convertTo","unify","duration","angle","conversions","targetUnit","derivedConversions","applyUnit","dimension","Operation","operands","isSpaced","operation","Variable","evaluating","current","frame","simplify","isRootVariable","obj","fun","Attribute","attribute","JsEvalNode","evaluateJavaScript","expression","that","evalContext","javascriptEnabled","_","jsify","Function","jsEvalNode","Quoted","str","content","escaped","_JsEvalNode","quote","containsVariables","iterativeReplace","regexp","replacementFnc","evaluatedValue","javascriptReplacement","exp","interpolationReplacement","quoted","Comment","isLineComment","isSilent","isCompressed","comment","Expression","returnValue","parens","parensInOp","doubleParen","throwAwayComments","functionCaller","isValid","item","subNodes","functionCaller_1","Call","funcCaller","FunctionCaller","_isArray","_iterator","_i","Symbol","iterator","_ref","URL","isEvald","rootpath","urlArgs","delimiter","url","Anonymous","rulesetLike","anonymous","Media","features","_Directive","media","evalTop","evalNested","multiMedia","permute","fragment","arr","rest","Import","less","pathValue","getPath","plugin","reference","isVariableImport","evalForImport","evalPath","doEval","node$$1","registry","addMultiple","skip","importedFilename","newImport","_import","Definition","params","variadic","_Ruleset","arity","optionalParameters","required","p","evalParams","mixinEnv","evaldArguments","varargs","arg","isNamedFound","argIndex","argsLength","evalCall","_arguments","mixinFrames","allArgsCnt","requiredArgsCnt","mixinDefinition","MixinCall","mixins","mixin","mixinPath","argValue","m","f","isRecursive","isOneFound","candidates","candidate","conditionResult","defaultResult","defFalseEitherCase","defNone","defTrue","defFalse","noArgumentsFilter","expand","MixinDefinition","namespace","format","newRules","_setVisibilityToReplacement","replacement","mixinCall","JavaScript","string","javascript","Assignment","assignment","Condition","negate","lvalue","rvalue","UnicodeDescriptor","unicodeDescriptor","Negative","negative","Extend","option","object_id","next_id","parent_ids","allowBefore","allowAfter","findSelfSelectors","selfElements","selectorElements","selfSelectors","RulesetCall","rulesetCall","tree","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","require$$24","require$$25","require$$26","require$$27","require$$28","require$$29","require$$30","require$$31","require$$32","require$$33","require$$34","index$6","_visitArgs","visitDeeper","_hasIndexed","Visitor","implementation","_implementation","_visitFnCache","nodeTypeIndex","visitFnCache","impl","aryIndx","outAryIndex","funcOut","visitArgs","fnName","newNode","isReplacing","nodes","nonReplacing","out","evald","flatten","nestedCnt","nestedItem","ImportSequencer","onSequencerEmpty","variableImports","_onSequencerEmpty","_currentDepth","addImport","importSequencer","importItem","isReady","tryRun","addVariableImport","variableImport","ImportVisitor","importer","finish","_visitor","_importer","_finish","importCount","onceFileDetectionMap","recursionDetector","_sequencer","isFinished","importNode","inlineCSS","importParent","processImportNode","evaldImportNode","multiple","importMultiple","tryAppendLessExtension","onImported","sequencedOnImported","importedAtRoot","fullPath","importVisitor","isPlugin","isOptional","optional","duplicateImport","oldContext","ruleNode","directiveNode","mixinDefinitionNode","rulesetNode","mediaNode","SetTreeVisibilityVisitor","visible","run","setTreeVisibilityVisitor","ExtendFinderVisitor","allExtendsStack","allExtends","visitRule","visitMixinDefinition","visitRuleset","allSelectorsExtendList","extendOnEveryPath","selectorPath","selExtendList","allSelectorsExtend","foundExtends","firstExtendOnThisSelectorPath","visitRulesetOut","visitMedia","visitMediaOut","visitDirective","visitDirectiveOut","ProcessExtendsVisitor","extendFinder","extendIndices","doExtendChaining","newRoot","checkExtendsForNonMatched","indices","hasFoundMatches","extendsList","extendsListTarget","iterationCount","extendIndex","targetExtendIndex","matches","extendsToAdd","extendVisitor","targetExtend","newExtend","findMatch","selfSelector","extendSelector","extendChainCount","selectorOne","selectorTwo","visitSelector","selectorNode","pathIndex","selectorsToAdd","extendedSelectors","haystackSelectorPath","haystackSelectorIndex","hackstackSelector","hackstackElementIndex","haystackElement","targetCombinator","needleElements","potentialMatches","potentialMatch","isElementValuesEqual","matched","finished","endPathIndex","endPathElementIndex","elementValue1","elementValue2","currentSelectorPathIndex","currentSelectorPathElementIndex","matchIndex","firstElement","newElements","initialCombinator","currentValue","derived","newAllExtends","JoinSelectorVisitor","joinSelectorVisitor","CSSVisitorUtils","_context","containsSilentNonBlockedChild","bodyRules","keepOnlyVisibleChilds","owner","thing","hasVisibleSelector","resolveVisibility","originalRules","compiledRulesBody","isVisibleRuleset","ToCSSVisitor","_level","mixinNode","commentNode","visitDirectiveWithBody","visitDirectiveWithoutBody","hasFakeRuleset","nodeRules","_mergeRules","charset","isRoot","checkValidNodes","_compileRulesetPaths","nodeRuleCnt","_removeDuplicateRules","ruleCache","ruleList","ruleCSS","groups","parts","toExpression","values","spacedGroups","lastSpacedGroup","anonymousNode","toCssVisitor","visitors","index$4","transformTree","evaldRoot","evalEnv","preEvalVisitors","MarkVisibleSelectorsVisitor","ExtendVisitor","pluginVisitors","getVisitors","pluginVisitor","isPreEvalVisitor","isPreVisitor","parseTree","SourceMapBuilder","toCSSOptions","postProcessors","getPostProcessors","process","file","files","rootFilename","chunker","fail","emitChunk","force","chunkerCurrentIndex","emitFrom","level","parenLevel","lastOpening","lastOpeningParen","lastMultiComment","lastMultiCommentEndBrace","chunks","currentChunkStartIndex","cc","cc2","charCodeAt","fromCharCode","parserInput","skipWhitespace","oldi","oldj","curr","currentPos","endIndex","mem","inp","nextChar","autoCommentAbsorb","CHARCODE_FORWARD_SLASH","nextNewLine","text","commentStore","nextStarSlash","CHARCODE_SPACE","CHARCODE_LF","CHARCODE_TAB","CHARCODE_CR","save","restore","possibleErrorMessage","furthest","furthestPossibleErrorMessage","state","saveStack","forget","isWhitespace","offset","pos","code","$re","tok","exec","$char","$str","tokLength","$quoted","startChar","currentPosition","peek","peekChar","currentChar","getInput","peekNotNumeric","start","chunkInput","failFunction","end","Parser","expect","parsers","expectChar","getParserInput","additionalData","globalVars","modifyVars","ignored","preText","serializeVars","preProcessors","getPreProcessors","banner","primary","endInfo","furthestChar","furthestReachedEnd","processImports","extendRule","definition","entities","foundSemiColon","isEscaped","argsSemiColon","argsComma","expressions","isSemiColonSeparated","entity","curly","colorCandidateString","ud","js","escape","isRule","elemIndex","elem","isCall","returner","expressionContainsNamed","nameLoop","literal","cond","argInfo","conditions","block","variableCurly","slashedCombinator","isLess","when","blockRuleset","lessSelector","tryAnonymous","startOfRule","isVariable","ruleProperty","tryValueFirst","anonymousValue","dir","importOptions","mediaFeatures","o","optionName","importOption","opt","property","mediaFeature","nonVendorSpecificName","hasIdentifier","hasExpression","hasUnknown","hasBlock","addition","operand","multiplication","logical","next","conditionAnd","me","negatedCondition","parenthesisCondition","body","atomicCondition","sub","colorKeyword","delim","re","simpleProperty","parser","loaded","rootFileInfo","mime","queue","fileParsedFunc","importedEqualsRoot","newFileInfo","relativeUrls","entryPath","tryAppendExtension","loadFileCallback","loadedFile","resolvedFilename","pathDiff","isPathAbsolute","alwaysMakePathsAbsolute","newEnv","FunctionImporter","parse","promise","loadFile","err","then","index$8","abstractFileManager","lastIndexOf","ext","supportsSync","basePath","laterPath","baseUrl","urlParts","extractUrlParts","baseUrlParts","urlDirectories","baseUrlDirectories","diff","hostPart","directories","urlPartsRegex","fileUrl","abstractFileManager_1","rgba","hue","m1","m2","hsva","floor","vs","perm","amount","method","hsl","weight","log","w","w1","w2","desaturate","dark","light","threshold","t","mix","colorBlendModeFunctions","multiply","screen","sqrt","overlay","abs","dataUri","fallback","functionThis","mimetypeNode","filePathNode","mimetype","filePath","fragmentStart","useBase64","mimeLookup","charsetLookup","fileSync","loadFileSync","buf","encodeURIComponent","uri","ieCompat","MathHelper","_math","fn","mathHelper","mathFunctions","fraction","num","minMax","isMin","currentUnified","referenceUnified","unitStatic","unitClone","order","_len2","_key2","y","evaluated","encodeURI","pattern","flags","RegExp","token","svg","direction","throwArgumentDescriptor","stops","gradientDirectionSvg","gradientType","rectangleDimension","renderEnv","directionValue","position","positionValue","isa","Type","isunit","getItemsFromNode","index$10","render","ParseTree","Promise","resolve","reject","PluginManager","installedPlugins","addPlugins","plugins","addPlugin","install","addVisitor","addPreProcessor","preProcessor","priority","indexToInsertAt","addPostProcessor","postProcessor","manager","ImportManager","NotSupportedFileManager","supports","AbstractFileManager","silent","formatError","errorTxt","FileManager"],"mappings":"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","file":"less.min.js","sourcesContent":["const Node = require('./node')\nconst colors = require('../data/colors')\n\n//\n// RGB Colors - #ff0014, #eee\n//\nclass Color extends Node {\n  constructor(rgb, a, originalForm) {\n    super()\n    //\n    // The end goal here, is to parse the arguments\n    // into an integer triplet, such as `128, 255, 0`\n    //\n    // This facilitates operations and conversions.\n    //\n    if (Array.isArray(rgb)) {\n      this.rgb = rgb\n    } else if (rgb.length == 6) {\n      this.rgb = rgb.match(/.{2}/g).map(c => parseInt(c, 16))\n    } else {\n      this.rgb = rgb.split('').map(c => parseInt(c + c, 16))\n    }\n    this.alpha = typeof a === 'number' ? a : 1\n    if (typeof originalForm !== 'undefined') {\n      this.value = originalForm\n    }\n  }\n\n  luma() {\n    let r = this.rgb[0] / 255\n    let g = this.rgb[1] / 255\n    let b = this.rgb[2] / 255\n\n    r = r <= 0.03928 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4)\n    g = g <= 0.03928 ? g / 12.92 : Math.pow((g + 0.055) / 1.055, 2.4)\n    b = b <= 0.03928 ? b / 12.92 : Math.pow((b + 0.055) / 1.055, 2.4)\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b\n  }\n\n  genCSS(context, output) {\n    output.add(this.toCSS(context))\n  }\n\n  toCSS(context, doNotCompress) {\n    const compress = context && context.compress && !doNotCompress\n    let color\n    let alpha\n\n    // `value` is set if this color was originally\n    // converted from a named color string so we need\n    // to respect this and try to output named color too.\n    if (this.value) {\n      return this.value\n    }\n\n    // If we have some transparency, the only way to represent it\n    // is via `rgba`. Otherwise, we use the hex representation,\n    // which has better compatibility with older browsers.\n    // Values are capped between `0` and `255`, rounded and zero-padded.\n    alpha = this.fround(context, this.alpha)\n    if (alpha < 1) {\n      return `rgba(${this.rgb\n        .map(c => clamp(Math.round(c), 255))\n        .concat(clamp(alpha, 1))\n        .join(',' + (compress ? '' : ' '))})`\n    }\n\n    color = this.toRGB()\n\n    if (compress) {\n      const splitcolor = color.split('')\n\n      // Convert color to short format\n      if (\n        splitcolor[1] === splitcolor[2] &&\n        splitcolor[3] === splitcolor[4] &&\n        splitcolor[5] === splitcolor[6]\n      ) {\n        color = `#${splitcolor[1]}${splitcolor[3]}${splitcolor[5]}`\n      }\n    }\n\n    return color\n  }\n\n  //\n  // Operations have to be done per-channel, if not,\n  // channels will spill onto each other. Once we have\n  // our result, in the form of an integer triplet,\n  // we create a new Color node to hold the result.\n  //\n  operate(context, op, other) {\n    const rgb = []\n    const alpha = this.alpha * (1 - other.alpha) + other.alpha\n    for (let c = 0; c < 3; c++) {\n      rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c])\n    }\n    return new Color(rgb, alpha)\n  }\n\n  toRGB() {\n    return toHex(this.rgb)\n  }\n\n  toHSL() {\n    const r = this.rgb[0] / 255\n    const g = this.rgb[1] / 255\n    const b = this.rgb[2] / 255\n    const a = this.alpha\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    let h\n    let s\n    const l = (max + min) / 2\n    const d = max - min\n\n    if (max === min) {\n      h = s = 0\n    } else {\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0)\n          break\n        case g:\n          h = (b - r) / d + 2\n          break\n        case b:\n          h = (r - g) / d + 4\n          break\n      }\n      h /= 6\n    }\n    return { h: h * 360, s, l, a }\n  }\n\n  //Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n  toHSV() {\n    const r = this.rgb[0] / 255\n    const g = this.rgb[1] / 255\n    const b = this.rgb[2] / 255\n    const a = this.alpha\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    let h\n    let s\n    const v = max\n\n    const d = max - min\n    if (max === 0) {\n      s = 0\n    } else {\n      s = d / max\n    }\n\n    if (max === min) {\n      h = 0\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0)\n          break\n        case g:\n          h = (b - r) / d + 2\n          break\n        case b:\n          h = (r - g) / d + 4\n          break\n      }\n      h /= 6\n    }\n    return { h: h * 360, s, v, a }\n  }\n\n  toARGB() {\n    return toHex([this.alpha * 255].concat(this.rgb))\n  }\n\n  compare(x) {\n    return x.rgb &&\n    x.rgb[0] === this.rgb[0] &&\n    x.rgb[1] === this.rgb[1] &&\n    x.rgb[2] === this.rgb[2] &&\n    x.alpha === this.alpha\n      ? 0\n      : undefined\n  }\n}\n\nColor.prototype.type = 'Color'\n\nfunction clamp(v, max) {\n  return Math.min(Math.max(v, 0), max)\n}\n\nfunction toHex(v) {\n  return `#${v\n    .map(c => {\n      c = clamp(Math.round(c), 255)\n      return (c < 16 ? '0' : '') + c.toString(16)\n    })\n    .join('')}`\n}\n\nColor.fromKeyword = keyword => {\n  let c\n  const key = keyword.toLowerCase()\n  if (colors.hasOwnProperty(key)) {\n    c = new Color(colors[key].slice(1))\n  } else if (key === 'transparent') {\n    c = new Color([0, 0, 0], 0)\n  }\n\n  if (c) {\n    c.value = keyword\n    return c\n  }\n}\nmodule.exports = Color\n","const Node = require('./node')\nconst Value = require('./value')\nconst Keyword = require('./keyword')\n\nclass Rule extends Node {\n  constructor(\n    name,\n    value,\n    important,\n    merge,\n    index,\n    currentFileInfo,\n    inline,\n    variable\n  ) {\n    super()\n    this.name = name\n    this.value = value instanceof Node ? value : new Value([value]) //value instanceof tree.Value || value instanceof tree.Ruleset ??\n    this.important = important ? ` ${important.trim()}` : ''\n    this.merge = merge\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.inline = inline || false\n    this.variable =\n      variable !== undefined ? variable : name.charAt && name.charAt(0) === '@'\n    this.allowRoot = true\n  }\n\n  genCSS(context, output) {\n    output.add(\n      this.name + (context.compress ? ':' : ': '),\n      this.currentFileInfo,\n      this.index\n    )\n    try {\n      this.value.genCSS(context, output)\n    } catch (e) {\n      e.index = this.index\n      e.filename = this.currentFileInfo.filename\n      throw e\n    }\n    output.add(\n      this.important +\n        (this.inline || (context.lastRule && context.compress) ? '' : ';'),\n      this.currentFileInfo,\n      this.index\n    )\n  }\n\n  eval(context) {\n    let strictMathBypass = false\n    let name = this.name\n    let evaldValue\n    let variable = this.variable\n    if (typeof name !== 'string') {\n      // expand 'primitive' name directly to get\n      // things faster (~10% for benchmark.less):\n      name =\n        name.length === 1 && name[0] instanceof Keyword\n          ? name[0].value\n          : evalName(context, name)\n      variable = false // never treat expanded interpolation as new variable name\n    }\n    if (name === 'font' && !context.strictMath) {\n      strictMathBypass = true\n      context.strictMath = true\n    }\n    try {\n      context.importantScope.push({})\n      evaldValue = this.value.eval(context)\n\n      if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n        throw {\n          message: 'Rulesets cannot be evaluated on a property.',\n          index: this.index,\n          filename: this.currentFileInfo.filename,\n        }\n      }\n      let important = this.important\n      const importantResult = context.importantScope.pop()\n      if (!important && importantResult.important) {\n        important = importantResult.important\n      }\n\n      return new Rule(\n        name,\n        evaldValue,\n        important,\n        this.merge,\n        this.index,\n        this.currentFileInfo,\n        this.inline,\n        variable\n      )\n    } catch (e) {\n      if (typeof e.index !== 'number') {\n        e.index = this.index\n        e.filename = this.currentFileInfo.filename\n      }\n      throw e\n    } finally {\n      if (strictMathBypass) {\n        context.strictMath = false\n      }\n    }\n  }\n\n  makeImportant() {\n    return new Rule(\n      this.name,\n      this.value,\n      '!important',\n      this.merge,\n      this.index,\n      this.currentFileInfo,\n      this.inline\n    )\n  }\n}\n\nfunction evalName(context, name) {\n  let value = ''\n  let i\n  const n = name.length\n  const output = {\n    add(s) {\n      value += s\n    },\n  }\n  for (i = 0; i < n; i++) {\n    name[i].eval(context).genCSS(context, output)\n  }\n  return value\n}\n\nRule.prototype.type = 'Rule'\n\nmodule.exports = Rule\n","function makeRegistry(base) {\n  return {\n    _data: {},\n    add(name, func) {\n      // precautionary case conversion, as later querying of\n      // the registry by function-caller uses lower case as well.\n      name = name.toLowerCase()\n\n      if (this._data.hasOwnProperty(name)) {\n        //TODO warn\n      }\n      this._data[name] = func\n    },\n    addMultiple(functions) {\n      Object.keys(functions).forEach(name => {\n        this.add(name, functions[name])\n      })\n    },\n    get(name) {\n      return this._data[name] || (base && base.get(name))\n    },\n    inherit() {\n      return makeRegistry(this)\n    },\n  }\n}\n\nmodule.exports = makeRegistry(null)\n","const tree = require('../tree')\n\nconst _visitArgs = { visitDeeper: true }\nlet _hasIndexed = false\n\nfunction _noop(node) {\n  return node\n}\n\nfunction indexNodeTypes(parent, ticker) {\n  // add .typeIndex to tree node types for lookup table\n  let key\n\n  let child\n  for (key in parent) {\n    if (parent.hasOwnProperty(key)) {\n      child = parent[key]\n      switch (typeof child) {\n        case 'function':\n          // ignore bound functions directly on tree which do not have a prototype\n          // or aren't nodes\n          if (child.prototype && child.prototype.type) {\n            child.prototype.typeIndex = ticker++\n          }\n          break\n        case 'object':\n          ticker = indexNodeTypes(child, ticker)\n          break\n      }\n    }\n  }\n  return ticker\n}\n\nclass Visitor {\n  constructor(implementation) {\n    this._implementation = implementation\n    this._visitFnCache = []\n\n    if (!_hasIndexed) {\n      indexNodeTypes(tree, 1)\n      _hasIndexed = true\n    }\n  }\n\n  visit(node) {\n    if (!node) {\n      return node\n    }\n\n    const nodeTypeIndex = node.typeIndex\n    if (!nodeTypeIndex) {\n      return node\n    }\n\n    const visitFnCache = this._visitFnCache\n    const impl = this._implementation\n    const aryIndx = nodeTypeIndex << 1\n    const outAryIndex = aryIndx | 1\n    let func = visitFnCache[aryIndx]\n    let funcOut = visitFnCache[outAryIndex]\n    const visitArgs = _visitArgs\n    let fnName\n\n    visitArgs.visitDeeper = true\n\n    if (!func) {\n      fnName = `visit${node.type}`\n      func = impl[fnName] || _noop\n      funcOut = impl[`${fnName}Out`] || _noop\n      visitFnCache[aryIndx] = func\n      visitFnCache[outAryIndex] = funcOut\n    }\n\n    if (func !== _noop) {\n      const newNode = func.call(impl, node, visitArgs)\n      if (impl.isReplacing) {\n        node = newNode\n      }\n    }\n\n    if (visitArgs.visitDeeper && node && node.accept) {\n      node.accept(this)\n    }\n\n    if (funcOut != _noop) {\n      funcOut.call(impl, node)\n    }\n\n    return node\n  }\n\n  visitArray(nodes, nonReplacing) {\n    if (!nodes) {\n      return nodes\n    }\n\n    const cnt = nodes.length\n    let i\n\n    // Non-replacing\n    if (nonReplacing || !this._implementation.isReplacing) {\n      for (i = 0; i < cnt; i++) {\n        this.visit(nodes[i])\n      }\n      return nodes\n    }\n\n    // Replacing\n    const out = []\n    for (i = 0; i < cnt; i++) {\n      const evald = this.visit(nodes[i])\n      if (evald === undefined) {\n        continue\n      }\n      if (!evald.splice) {\n        out.push(evald)\n      } else if (evald.length) {\n        this.flatten(evald, out)\n      }\n    }\n    return out\n  }\n\n  flatten(arr, out) {\n    if (!out) {\n      out = []\n    }\n\n    let cnt\n    let i\n    let item\n    let nestedCnt\n    let j\n    let nestedItem\n\n    for (i = 0, cnt = arr.length; i < cnt; i++) {\n      item = arr[i]\n      if (item === undefined) {\n        continue\n      }\n      if (!item.splice) {\n        out.push(item)\n        continue\n      }\n\n      for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n        nestedItem = item[j]\n        if (nestedItem === undefined) {\n          continue\n        }\n        if (!nestedItem.splice) {\n          out.push(nestedItem)\n        } else if (nestedItem.length) {\n          this.flatten(nestedItem, out)\n        }\n      }\n    }\n\n    return out\n  }\n}\n\nmodule.exports = Visitor\n","const Dimension = require('../tree/dimension')\nconst Color = require('../tree/color')\nconst Quoted = require('../tree/quoted')\nconst Anonymous = require('../tree/anonymous')\nconst functionRegistry = require('./function-registry')\nlet colorFunctions\n\nfunction clamp(val) {\n  return Math.min(1, Math.max(0, val))\n}\nfunction hsla(color) {\n  return colorFunctions.hsla(color.h, color.s, color.l, color.a)\n}\nfunction number(n) {\n  if (n instanceof Dimension) {\n    return parseFloat(n.unit.is('%') ? n.value / 100 : n.value)\n  } else if (typeof n === 'number') {\n    return n\n  } else {\n    throw {\n      type: 'Argument',\n      message: 'color functions take numbers as parameters',\n    }\n  }\n}\nfunction scaled(n, size) {\n  if (n instanceof Dimension && n.unit.is('%')) {\n    return parseFloat(n.value * size / 100)\n  } else {\n    return number(n)\n  }\n}\ncolorFunctions = {\n  rgb(r, g, b) {\n    return colorFunctions.rgba(r, g, b, 1.0)\n  },\n  rgba(r, g, b, a) {\n    const rgb = [r, g, b].map(c => scaled(c, 255))\n    a = number(a)\n    return new Color(rgb, a)\n  },\n  hsl(h, s, l) {\n    return colorFunctions.hsla(h, s, l, 1.0)\n  },\n  hsla(h, s, l, a) {\n    let m1\n    let m2\n\n    function hue(h) {\n      h = h < 0 ? h + 1 : h > 1 ? h - 1 : h\n      if (h * 6 < 1) {\n        return m1 + (m2 - m1) * h * 6\n      } else if (h * 2 < 1) {\n        return m2\n      } else if (h * 3 < 2) {\n        return m1 + (m2 - m1) * (2 / 3 - h) * 6\n      } else {\n        return m1\n      }\n    }\n\n    h = number(h) % 360 / 360\n    s = clamp(number(s))\n    l = clamp(number(l))\n    a = clamp(number(a))\n\n    m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s\n    m1 = l * 2 - m2\n\n    return colorFunctions.rgba(\n      hue(h + 1 / 3) * 255,\n      hue(h) * 255,\n      hue(h - 1 / 3) * 255,\n      a\n    )\n  },\n\n  hsv(h, s, v) {\n    return colorFunctions.hsva(h, s, v, 1.0)\n  },\n\n  hsva(h, s, v, a) {\n    h = number(h) % 360 / 360 * 360\n    s = number(s)\n    v = number(v)\n    a = number(a)\n\n    let i\n    let f\n    i = Math.floor(h / 60 % 6)\n    f = h / 60 - i\n\n    const vs = [v, v * (1 - s), v * (1 - f * s), v * (1 - (1 - f) * s)]\n    const perm = [\n      [0, 3, 1],\n      [2, 0, 1],\n      [1, 0, 3],\n      [1, 2, 0],\n      [3, 1, 0],\n      [0, 1, 2],\n    ]\n\n    return colorFunctions.rgba(\n      vs[perm[i][0]] * 255,\n      vs[perm[i][1]] * 255,\n      vs[perm[i][2]] * 255,\n      a\n    )\n  },\n\n  hue(color) {\n    return new Dimension(color.toHSL().h)\n  },\n  saturation(color) {\n    return new Dimension(color.toHSL().s * 100, '%')\n  },\n  lightness(color) {\n    return new Dimension(color.toHSL().l * 100, '%')\n  },\n  hsvhue(color) {\n    return new Dimension(color.toHSV().h)\n  },\n  hsvsaturation(color) {\n    return new Dimension(color.toHSV().s * 100, '%')\n  },\n  hsvvalue(color) {\n    return new Dimension(color.toHSV().v * 100, '%')\n  },\n  red(color) {\n    return new Dimension(color.rgb[0])\n  },\n  green(color) {\n    return new Dimension(color.rgb[1])\n  },\n  blue(color) {\n    return new Dimension(color.rgb[2])\n  },\n  alpha(color) {\n    return new Dimension(color.toHSL().a)\n  },\n  luma(color) {\n    return new Dimension(color.luma() * color.alpha * 100, '%')\n  },\n  luminance(color) {\n    const luminance =\n      0.2126 * color.rgb[0] / 255 +\n      0.7152 * color.rgb[1] / 255 +\n      0.0722 * color.rgb[2] / 255\n\n    return new Dimension(luminance * color.alpha * 100, '%')\n  },\n  saturate(color, amount, method) {\n    // filter: saturate(3.2);\n    // should be kept as is, so check for color\n    if (!color.rgb) {\n      return null\n    }\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.s += hsl.s * amount.value / 100\n    } else {\n      hsl.s += amount.value / 100\n    }\n    hsl.s = clamp(hsl.s)\n    return hsla(hsl)\n  },\n  desaturate(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.s -= hsl.s * amount.value / 100\n    } else {\n      hsl.s -= amount.value / 100\n    }\n    hsl.s = clamp(hsl.s)\n    return hsla(hsl)\n  },\n  lighten(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.l += hsl.l * amount.value / 100\n    } else {\n      hsl.l += amount.value / 100\n    }\n    hsl.l = clamp(hsl.l)\n    return hsla(hsl)\n  },\n  darken(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.l -= hsl.l * amount.value / 100\n    } else {\n      hsl.l -= amount.value / 100\n    }\n    hsl.l = clamp(hsl.l)\n    return hsla(hsl)\n  },\n  fadein(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.a += hsl.a * amount.value / 100\n    } else {\n      hsl.a += amount.value / 100\n    }\n    hsl.a = clamp(hsl.a)\n    return hsla(hsl)\n  },\n  fadeout(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.a -= hsl.a * amount.value / 100\n    } else {\n      hsl.a -= amount.value / 100\n    }\n    hsl.a = clamp(hsl.a)\n    return hsla(hsl)\n  },\n  fade(color, amount) {\n    const hsl = color.toHSL()\n\n    hsl.a = amount.value / 100\n    hsl.a = clamp(hsl.a)\n    return hsla(hsl)\n  },\n  spin(color, amount) {\n    const hsl = color.toHSL()\n    const hue = (hsl.h + amount.value) % 360\n\n    hsl.h = hue < 0 ? 360 + hue : hue\n\n    return hsla(hsl)\n  },\n  //\n  // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n  // http://sass-lang.com\n  //\n  mix(color1, color2, weight) {\n    if (!color1.toHSL || !color2.toHSL) {\n      console.log(color2.type)\n      console.dir(color2)\n    }\n    if (!weight) {\n      weight = new Dimension(50)\n    }\n    const p = weight.value / 100.0\n    const w = p * 2 - 1\n    const a = color1.toHSL().a - color2.toHSL().a\n\n    const w1 = ((w * a == -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0\n    const w2 = 1 - w1\n\n    const rgb = [\n      color1.rgb[0] * w1 + color2.rgb[0] * w2,\n      color1.rgb[1] * w1 + color2.rgb[1] * w2,\n      color1.rgb[2] * w1 + color2.rgb[2] * w2,\n    ]\n\n    const alpha = color1.alpha * p + color2.alpha * (1 - p)\n\n    return new Color(rgb, alpha)\n  },\n  greyscale(color) {\n    return colorFunctions.desaturate(color, new Dimension(100))\n  },\n  contrast(color, dark, light, threshold) {\n    // filter: contrast(3.2);\n    // should be kept as is, so check for color\n    if (!color.rgb) {\n      return null\n    }\n    if (typeof light === 'undefined') {\n      light = colorFunctions.rgba(255, 255, 255, 1.0)\n    }\n    if (typeof dark === 'undefined') {\n      dark = colorFunctions.rgba(0, 0, 0, 1.0)\n    }\n    //Figure out which is actually light and dark!\n    if (dark.luma() > light.luma()) {\n      const t = light\n      light = dark\n      dark = t\n    }\n    if (typeof threshold === 'undefined') {\n      threshold = 0.43\n    } else {\n      threshold = number(threshold)\n    }\n    if (color.luma() < threshold) {\n      return light\n    } else {\n      return dark\n    }\n  },\n  argb(color) {\n    return new Anonymous(color.toARGB())\n  },\n  color(c) {\n    if (c instanceof Quoted && /^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(c.value)) {\n      return new Color(c.value.slice(1))\n    }\n    if (c instanceof Color || (c = Color.fromKeyword(c.value))) {\n      c.value = undefined\n      return c\n    }\n    throw {\n      type: 'Argument',\n      message: 'argument must be a color keyword or 3/6 digit hex e.g. #FFF',\n    }\n  },\n  tint(color, amount) {\n    return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount)\n  },\n  shade(color, amount) {\n    return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount)\n  },\n}\nfunctionRegistry.addMultiple(colorFunctions)\n","const Color = require('../tree/color')\nconst functionRegistry = require('./function-registry')\n\n// Color Blending\n// ref: http://www.w3.org/TR/compositing-1\n\nfunction colorBlend(mode, color1, color2) {\n  const ab = color1.alpha // result\n\n  let // backdrop\n  cb\n\n  const as = color2.alpha\n\n  let // source\n  cs\n\n  let ar\n  let cr\n  const r = []\n\n  ar = as + ab * (1 - as)\n  for (let i = 0; i < 3; i++) {\n    cb = color1.rgb[i] / 255\n    cs = color2.rgb[i] / 255\n    cr = mode(cb, cs)\n    if (ar) {\n      cr = (as * cs + ab * (cb - as * (cb + cs - cr))) / ar\n    }\n    r[i] = cr * 255\n  }\n\n  return new Color(r, ar)\n}\n\nconst colorBlendModeFunctions = {\n  multiply(cb, cs) {\n    return cb * cs\n  },\n  screen(cb, cs) {\n    return cb + cs - cb * cs\n  },\n  overlay(cb, cs) {\n    cb *= 2\n    return cb <= 1\n      ? colorBlendModeFunctions.multiply(cb, cs)\n      : colorBlendModeFunctions.screen(cb - 1, cs)\n  },\n  softlight(cb, cs) {\n    let d = 1\n    let e = cb\n    if (cs > 0.5) {\n      e = 1\n      d = cb > 0.25 ? Math.sqrt(cb) : ((16 * cb - 12) * cb + 4) * cb\n    }\n    return cb - (1 - 2 * cs) * e * (d - cb)\n  },\n  hardlight(cb, cs) {\n    return colorBlendModeFunctions.overlay(cs, cb)\n  },\n  difference(cb, cs) {\n    return Math.abs(cb - cs)\n  },\n  exclusion(cb, cs) {\n    return cb + cs - 2 * cb * cs\n  },\n\n  // non-w3c functions:\n  average(cb, cs) {\n    return (cb + cs) / 2\n  },\n  negation(cb, cs) {\n    return 1 - Math.abs(cb + cs - 1)\n  },\n}\n\nfor (const f in colorBlendModeFunctions) {\n  if (colorBlendModeFunctions.hasOwnProperty(f)) {\n    colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f])\n  }\n}\n\nfunctionRegistry.addMultiple(colorBlend)\n","module.exports = {\n  error(msg) {\n    this._fireEvent('error', msg)\n  },\n  warn(msg) {\n    this._fireEvent('warn', msg)\n  },\n  info(msg) {\n    this._fireEvent('info', msg)\n  },\n  debug(msg) {\n    this._fireEvent('debug', msg)\n  },\n  addListener(listener) {\n    this._listeners.push(listener)\n  },\n  removeListener(listener) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      if (this._listeners[i] === listener) {\n        this._listeners.splice(i, 1)\n        return\n      }\n    }\n  },\n  _fireEvent(type, msg) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      const logFunction = this._listeners[i][type]\n      if (logFunction) {\n        logFunction(msg)\n      }\n    }\n  },\n  _listeners: [],\n}\n","const logger = require('../logger')\n\nclass Environment {\n  constructor(externalEnvironment, fileManagers) {\n    this.fileManagers = fileManagers || []\n    externalEnvironment = externalEnvironment || {}\n\n    const optionalFunctions = [\n      'encodeBase64',\n      'mimeLookup',\n      'charsetLookup',\n      'getSourceMapGenerator',\n    ]\n    const requiredFunctions = []\n    const functions = requiredFunctions.concat(optionalFunctions)\n\n    for (let i = 0; i < functions.length; i++) {\n      const propName = functions[i]\n      const environmentFunc = externalEnvironment[propName]\n      if (environmentFunc) {\n        this[propName] = environmentFunc.bind(externalEnvironment)\n      } else if (i < requiredFunctions.length) {\n        this.warn(`missing required function in environment - ${propName}`)\n      }\n    }\n  }\n\n  getFileManager(filename, currentDirectory, options, environment, isSync) {\n    if (!filename) {\n      logger.warn(\n        'getFileManager called with no filename.. Please report this issue. continuing.'\n      )\n    }\n    if (!currentDirectory) {\n      logger.warn(\n        'getFileManager called with null directory.. Please report this issue. continuing.'\n      )\n    }\n\n    let fileManagers = this.fileManagers\n    if (options.pluginManager) {\n      fileManagers = []\n        .concat(fileManagers)\n        .concat(options.pluginManager.getFileManagers())\n    }\n    for (let i = fileManagers.length - 1; i >= 0; i--) {\n      const fileManager = fileManagers[i]\n      if (\n        fileManager[isSync ? 'supportsSync' : 'supports'](\n          filename,\n          currentDirectory,\n          options,\n          environment\n        )\n      ) {\n        return fileManager\n      }\n    }\n    return null\n  }\n\n  addFileManager(fileManager) {\n    this.fileManagers.push(fileManager)\n  }\n\n  clearFileManagers() {\n    this.fileManagers = []\n  }\n}\n\nmodule.exports = Environment\n","module.exports = environment => {\n  class SourceMapOutput {\n    constructor(options) {\n      this._css = []\n      this._rootNode = options.rootNode\n      this._contentsMap = options.contentsMap\n      this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap\n      if (options.sourceMapFilename) {\n        this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/')\n      }\n      this._outputFilename = options.outputFilename\n      this.sourceMapURL = options.sourceMapURL\n      if (options.sourceMapBasepath) {\n        this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/')\n      }\n      if (options.sourceMapRootpath) {\n        this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/')\n        if (\n          this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !==\n          '/'\n        ) {\n          this._sourceMapRootpath += '/'\n        }\n      } else {\n        this._sourceMapRootpath = ''\n      }\n      this._outputSourceFiles = options.outputSourceFiles\n      this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator()\n\n      this._lineNumber = 0\n      this._column = 0\n    }\n\n    normalizeFilename(filename) {\n      filename = filename.replace(/\\\\/g, '/')\n\n      if (\n        this._sourceMapBasepath &&\n        filename.indexOf(this._sourceMapBasepath) === 0\n      ) {\n        filename = filename.substring(this._sourceMapBasepath.length)\n        if (filename.charAt(0) === '\\\\' || filename.charAt(0) === '/') {\n          filename = filename.substring(1)\n        }\n      }\n      return (this._sourceMapRootpath || '') + filename\n    }\n\n    add(chunk, fileInfo, index, mapLines) {\n      //ignore adding empty strings\n      if (!chunk) {\n        return\n      }\n\n      let lines\n      let sourceLines\n      let columns\n      let sourceColumns\n      let i\n\n      if (fileInfo) {\n        let inputSource = this._contentsMap[fileInfo.filename]\n\n        // remove vars/banner added to the top of the file\n        if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n          // adjust the index\n          index -= this._contentsIgnoredCharsMap[fileInfo.filename]\n          if (index < 0) {\n            index = 0\n          }\n          // adjust the source\n          inputSource = inputSource.slice(\n            this._contentsIgnoredCharsMap[fileInfo.filename]\n          )\n        }\n        inputSource = inputSource.substring(0, index)\n        sourceLines = inputSource.split('\\n')\n        sourceColumns = sourceLines[sourceLines.length - 1]\n      }\n\n      lines = chunk.split('\\n')\n      columns = lines[lines.length - 1]\n\n      if (fileInfo) {\n        if (!mapLines) {\n          this._sourceMapGenerator.addMapping({\n            generated: { line: this._lineNumber + 1, column: this._column },\n            original: {\n              line: sourceLines.length,\n              column: sourceColumns.length,\n            },\n            source: this.normalizeFilename(fileInfo.filename),\n          })\n        } else {\n          for (i = 0; i < lines.length; i++) {\n            this._sourceMapGenerator.addMapping({\n              generated: {\n                line: this._lineNumber + i + 1,\n                column: i === 0 ? this._column : 0,\n              },\n              original: {\n                line: sourceLines.length + i,\n                column: i === 0 ? sourceColumns.length : 0,\n              },\n              source: this.normalizeFilename(fileInfo.filename),\n            })\n          }\n        }\n      }\n\n      if (lines.length === 1) {\n        this._column += columns.length\n      } else {\n        this._lineNumber += lines.length - 1\n        this._column = columns.length\n      }\n\n      this._css.push(chunk)\n    }\n\n    isEmpty() {\n      return this._css.length === 0\n    }\n\n    toCSS(context) {\n      this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({\n        file: this._outputFilename,\n        sourceRoot: null,\n      })\n\n      if (this._outputSourceFiles) {\n        for (const filename in this._contentsMap) {\n          if (this._contentsMap.hasOwnProperty(filename)) {\n            let source = this._contentsMap[filename]\n            if (this._contentsIgnoredCharsMap[filename]) {\n              source = source.slice(this._contentsIgnoredCharsMap[filename])\n            }\n            this._sourceMapGenerator.setSourceContent(\n              this.normalizeFilename(filename),\n              source\n            )\n          }\n        }\n      }\n\n      this._rootNode.genCSS(context, this)\n\n      if (this._css.length > 0) {\n        let sourceMapURL\n        const sourceMapContent = JSON.stringify(\n          this._sourceMapGenerator.toJSON()\n        )\n\n        if (this.sourceMapURL) {\n          sourceMapURL = this.sourceMapURL\n        } else if (this._sourceMapFilename) {\n          sourceMapURL = this._sourceMapFilename\n        }\n        this.sourceMapURL = sourceMapURL\n\n        this.sourceMap = sourceMapContent\n      }\n\n      return this._css.join('')\n    }\n  }\n\n  return SourceMapOutput\n}\n","module.exports = (SourceMapOutput, environment) => {\n  class SourceMapBuilder {\n    constructor(options) {\n      this.options = options\n    }\n\n    toCSS(rootNode, options, imports) {\n      const sourceMapOutput = new SourceMapOutput({\n        contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n        rootNode,\n        contentsMap: imports.contents,\n        sourceMapFilename: this.options.sourceMapFilename,\n        sourceMapURL: this.options.sourceMapURL,\n        outputFilename: this.options.sourceMapOutputFilename,\n        sourceMapBasepath: this.options.sourceMapBasepath,\n        sourceMapRootpath: this.options.sourceMapRootpath,\n        outputSourceFiles: this.options.outputSourceFiles,\n        sourceMapGenerator: this.options.sourceMapGenerator,\n        sourceMapFileInline: this.options.sourceMapFileInline,\n      })\n\n      const css = sourceMapOutput.toCSS(options)\n      this.sourceMap = sourceMapOutput.sourceMap\n      this.sourceMapURL = sourceMapOutput.sourceMapURL\n      if (this.options.sourceMapInputFilename) {\n        this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(\n          this.options.sourceMapInputFilename\n        )\n      }\n      return css + this.getCSSAppendage()\n    }\n\n    getCSSAppendage() {\n      let sourceMapURL = this.sourceMapURL\n      if (this.options.sourceMapFileInline) {\n        if (this.sourceMap === undefined) {\n          return ''\n        }\n        sourceMapURL = `data:application/json;base64,${environment.encodeBase64(\n          this.sourceMap\n        )}`\n      }\n\n      if (sourceMapURL) {\n        return `/*# sourceMappingURL=${sourceMapURL} */`\n      }\n      return ''\n    }\n\n    getExternalSourceMap() {\n      return this.sourceMap\n    }\n\n    setExternalSourceMap(sourceMap) {\n      this.sourceMap = sourceMap\n    }\n\n    isInline() {\n      return this.options.sourceMapFileInline\n    }\n\n    getSourceMapURL() {\n      return this.sourceMapURL\n    }\n\n    getOutputFilename() {\n      return this.options.sourceMapOutputFilename\n    }\n\n    getInputFilename() {\n      return this.sourceMapInputFilename\n    }\n  }\n\n  return SourceMapBuilder\n}\n","module.exports = {\n  getLocation(index, inputStream) {\n    let n = index + 1\n    let line = null\n    let column = -1\n\n    while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n      column++\n    }\n\n    if (typeof index === 'number') {\n      line = (inputStream.slice(0, index).match(/\\n/g) || '').length\n    }\n\n    return {\n      line,\n      column,\n    }\n  },\n}\n","const utils = require('./utils')\n\nconst LessError = (module.exports = function LessError(\n  e,\n  importManager,\n  currentFilename\n) {\n  Error.call(this)\n\n  const filename = e.filename || currentFilename\n\n  if (importManager && filename) {\n    const input = importManager.contents[filename]\n    const loc = utils.getLocation(e.index, input)\n    const line = loc.line\n    const col = loc.column\n    const callLine = e.call && utils.getLocation(e.call, input).line\n    const lines = input.split('\\n')\n\n    this.type = e.type || 'Syntax'\n    this.filename = filename\n    this.index = e.index\n    this.line = typeof line === 'number' ? line + 1 : null\n    this.callLine = callLine + 1\n    this.callExtract = lines[callLine]\n    this.column = col\n    this.extract = [lines[line - 1], lines[line], lines[line + 1]]\n  }\n  this.message = e.message\n  this.stack = e.stack\n})\n\nif (typeof Object.create === 'undefined') {\n  const F = () => {}\n  F.prototype = Error.prototype\n  LessError.prototype = new F()\n} else {\n  LessError.prototype = Object.create(Error.prototype)\n}\n\nLessError.prototype.constructor = LessError\n","const contexts = {}\nmodule.exports = contexts\n\nconst copyFromOriginal = function copyFromOriginal(\n  original,\n  destination,\n  propertiesToCopy\n) {\n  if (!original) {\n    return\n  }\n\n  for (let i = 0; i < propertiesToCopy.length; i++) {\n    if (original.hasOwnProperty(propertiesToCopy[i])) {\n      destination[propertiesToCopy[i]] = original[propertiesToCopy[i]]\n    }\n  }\n}\n\n/*\n parse is used whilst parsing\n */\nconst parseCopyProperties = [\n  // options\n  'paths', // option - unmodified - paths to search for imports on\n  'relativeUrls', // option - whether to adjust URL's to be relative\n  'rootpath', // option - rootpath to append to URL's\n  'strictImports', // option -\n  'insecure', // option - whether to allow imports from insecure ssl hosts\n  'dumpLineNumbers', // option - whether to dump line numbers\n  'compress', // option - whether to compress\n  'syncImport', // option - whether to import synchronously\n  'chunkInput', // option - whether to chunk input. more performant but causes parse issues.\n  'mime', // browser only - mime type for sheet import\n  'useFileCache', // browser only - whether to use the per file session cache\n  // context\n  'processImports', // option & context - whether to process imports. if false then imports will not be imported.\n  // Used by the import manager to stop multiple import visitors being created.\n  'pluginManager', // Used as the plugin manager for the session\n]\n\ncontexts.Parse = function(options) {\n  copyFromOriginal(options, this, parseCopyProperties)\n\n  if (typeof this.paths === 'string') {\n    this.paths = [this.paths]\n  }\n}\n\nconst evalCopyProperties = [\n  'paths', // additional include paths\n  'compress', // whether to compress\n  'ieCompat', // whether to enforce IE compatibility (IE8 data-uri)\n  'strictMath', // whether math has to be within parenthesis\n  'strictUnits', // whether units need to evaluate correctly\n  'sourceMap', // whether to output a source map\n  'importMultiple', // whether we are currently importing multiple copies\n  'urlArgs', // whether to add args into url tokens\n  'javascriptEnabled', // option - whether JavaScript is enabled. if undefined, defaults to true\n  'pluginManager', // Used as the plugin manager for the session\n  'importantScope', // used to bubble up !important statements,\n  'simplify',\n]\n\ncontexts.Eval = function(options, frames) {\n  copyFromOriginal(options, this, evalCopyProperties)\n\n  if (typeof this.paths === 'string') {\n    this.paths = [this.paths]\n  }\n\n  this.frames = frames || []\n  this.importantScope = this.importantScope || []\n}\n\ncontexts.Eval.prototype.inParenthesis = function() {\n  if (!this.parensStack) {\n    this.parensStack = []\n  }\n  this.parensStack.push(true)\n}\n\ncontexts.Eval.prototype.outOfParenthesis = function() {\n  this.parensStack.pop()\n}\n\ncontexts.Eval.prototype.isMathOn = function() {\n  return this.strictMath ? this.parensStack && this.parensStack.length : true\n}\n\ncontexts.Eval.prototype.isPathRelative = path =>\n  !/^(?:[a-z-]+:|\\/|#)/i.test(path)\n\ncontexts.Eval.prototype.normalizePath = path => {\n  const segments = path.split('/').reverse()\n  let segment\n\n  path = []\n  while (segments.length !== 0) {\n    segment = segments.pop()\n    switch (segment) {\n      case '.':\n        break\n      case '..':\n        if (path.length === 0 || path[path.length - 1] === '..') {\n          path.push(segment)\n        } else {\n          path.pop()\n        }\n        break\n      default:\n        path.push(segment)\n        break\n    }\n  }\n\n  return path.join('/')\n}\n\n//todo - do the same for the toCSS ?\n","class Node {\n  toCSS(context) {\n    const strs = []\n    this.genCSS(context, {\n      add(chunk, fileInfo, index) {\n        strs.push(chunk)\n      },\n      isEmpty() {\n        return strs.length === 0\n      },\n    })\n    return strs.join('')\n  }\n\n  genCSS(context, output) {\n    output.add(this.value)\n  }\n\n  accept(visitor) {\n    this.value = visitor.visit(this.value)\n  }\n\n  eval() {\n    return this\n  }\n\n  _operate(context, op, a, b) {\n    switch (op) {\n      case '+':\n        return a + b\n      case '-':\n        return a - b\n      case '*':\n        return a * b\n      case '/':\n        return a / b\n    }\n  }\n\n  fround(context, value) {\n    const precision = context && context.numPrecision\n    //add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999....) are properly rounded...\n    return precision == null\n      ? value\n      : Number((value + 2e-16).toFixed(precision))\n  }\n\n  // Returns true if this node represents root of ast imported by reference\n  blocksVisibility() {\n    if (this.visibilityBlocks == null) {\n      this.visibilityBlocks = 0\n    }\n    return this.visibilityBlocks !== 0\n  }\n\n  addVisibilityBlock() {\n    if (this.visibilityBlocks == null) {\n      this.visibilityBlocks = 0\n    }\n    this.visibilityBlocks = this.visibilityBlocks + 1\n  }\n\n  removeVisibilityBlock() {\n    if (this.visibilityBlocks == null) {\n      this.visibilityBlocks = 0\n    }\n    this.visibilityBlocks = this.visibilityBlocks - 1\n  }\n\n  //Turns on node visibility - if called node will be shown in output regardless\n  //of whether it comes from import by reference or not\n  ensureVisibility() {\n    this.nodeVisible = true\n  }\n\n  //Turns off node visibility - if called node will NOT be shown in output regardless\n  //of whether it comes from import by reference or not\n  ensureInvisibility() {\n    this.nodeVisible = false\n  }\n\n  // return values:\n  // false - the node must not be visible\n  // true - the node must be visible\n  // undefined or null - the node has the same visibility as its parent\n  isVisible() {\n    return this.nodeVisible\n  }\n\n  visibilityInfo() {\n    return {\n      visibilityBlocks: this.visibilityBlocks,\n      nodeVisible: this.nodeVisible,\n    }\n  }\n\n  copyVisibilityInfo(info) {\n    if (!info) {\n      return\n    }\n    this.visibilityBlocks = info.visibilityBlocks\n    this.nodeVisible = info.nodeVisible\n  }\n}\n\nNode.compare = (a, b) => {\n  /* returns:\n     -1: a < b\n     0: a = b\n     1: a > b\n     and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n\n  if (\n    a.compare &&\n    // for \"symmetric results\" force toCSS-based comparison\n    // of Quoted or Anonymous if either value is one of those\n    !(b.type === 'Quoted' || b.type === 'Anonymous')\n  ) {\n    return a.compare(b)\n  } else if (b.compare) {\n    return -b.compare(a)\n  } else if (a.type !== b.type) {\n    return undefined\n  }\n\n  a = a.value\n  b = b.value\n  if (!Array.isArray(a)) {\n    return a === b ? 0 : undefined\n  }\n  if (a.length !== b.length) {\n    return undefined\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (Node.compare(a[i], b[i]) !== 0) {\n      return undefined\n    }\n  }\n  return 0\n}\n\nNode.numericCompare = (a, b) =>\n  a < b ? -1 : a === b ? 0 : a > b ? 1 : undefined\nmodule.exports = Node\n","const Node = require('./node')\n\nclass Alpha extends Node {\n  constructor(val) {\n    super()\n    this.value = val\n  }\n\n  accept(visitor) {\n    this.value = visitor.visit(this.value)\n  }\n\n  eval(context) {\n    if (this.value.eval) {\n      return new Alpha(this.value.eval(context))\n    }\n    return this\n  }\n\n  genCSS(context, output) {\n    output.add('alpha(opacity=')\n\n    if (this.value.genCSS) {\n      this.value.genCSS(context, output)\n    } else {\n      output.add(this.value)\n    }\n\n    output.add(')')\n  }\n}\n\nAlpha.prototype.type = 'Alpha'\n\nmodule.exports = Alpha\n","module.exports = {\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faebd7',\n  aqua: '#00ffff',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffe4c4',\n  black: '#000000',\n  blanchedalmond: '#ffebcd',\n  blue: '#0000ff',\n  blueviolet: '#8a2be2',\n  brown: '#a52a2a',\n  burlywood: '#deb887',\n  cadetblue: '#5f9ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691e',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  cyan: '#00ffff',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgrey: '#a9a9a9',\n  darkgreen: '#006400',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#e9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkslategrey: '#2f4f4f',\n  darkturquoise: '#00ced1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1e90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  fuchsia: '#ff00ff',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  gold: '#ffd700',\n  goldenrod: '#daa520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#adff2f',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  indianred: '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0e68c',\n  lavender: '#e6e6fa',\n  lavenderblush: '#fff0f5',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8e6',\n  lightcoral: '#f08080',\n  lightcyan: '#e0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgray: '#d3d3d3',\n  lightgrey: '#d3d3d3',\n  lightgreen: '#90ee90',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cefa',\n  lightslategray: '#778899',\n  lightslategrey: '#778899',\n  lightsteelblue: '#b0c4de',\n  lightyellow: '#ffffe0',\n  lime: '#00ff00',\n  limegreen: '#32cd32',\n  linen: '#faf0e6',\n  magenta: '#ff00ff',\n  maroon: '#800000',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370d8',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68ee',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffe4e1',\n  moccasin: '#ffe4b5',\n  navajowhite: '#ffdead',\n  navy: '#000080',\n  oldlace: '#fdf5e6',\n  olive: '#808000',\n  olivedrab: '#6b8e23',\n  orange: '#ffa500',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#eee8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afeeee',\n  palevioletred: '#d87093',\n  papayawhip: '#ffefd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0e0e6',\n  purple: '#800080',\n  rebeccapurple: '#663399',\n  red: '#ff0000',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169e1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2e8b57',\n  seashell: '#fff5ee',\n  sienna: '#a0522d',\n  silver: '#c0c0c0',\n  skyblue: '#87ceeb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  teal: '#008080',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40e0d0',\n  violet: '#ee82ee',\n  wheat: '#f5deb3',\n  white: '#ffffff',\n  whitesmoke: '#f5f5f5',\n  yellow: '#ffff00',\n  yellowgreen: '#9acd32',\n}\n","const Node = require('./node')\n\nclass Paren extends Node {\n  constructor(node) {\n    super()\n    this.value = node\n  }\n\n  genCSS(context, output) {\n    output.add('(')\n    this.value.genCSS(context, output)\n    output.add(')')\n  }\n\n  eval(context) {\n    return new Paren(this.value.eval(context))\n  }\n}\n\nParen.prototype.type = 'Paren'\nmodule.exports = Paren\n","const Node = require('./node')\n\nclass Combinator extends Node {\n  constructor(value) {\n    super()\n    if (value === ' ') {\n      this.value = ' '\n      this.emptyOrWhitespace = true\n    } else {\n      this.value = value ? value.trim() : ''\n      this.emptyOrWhitespace = this.value === ''\n    }\n  }\n\n  genCSS(context, output) {\n    const spaceOrEmpty =\n      context.compress || _noSpaceCombinators[this.value] ? '' : ' '\n    output.add(spaceOrEmpty + this.value + spaceOrEmpty)\n  }\n}\n\nCombinator.prototype.type = 'Combinator'\nconst _noSpaceCombinators = {\n  '': true,\n  ' ': true,\n  '|': true,\n}\nmodule.exports = Combinator\n","const Node = require('./node')\nconst Paren = require('./paren')\nconst Combinator = require('./combinator')\n\nclass Element extends Node {\n  constructor(combinator, value, index, currentFileInfo, info) {\n    super()\n    this.combinator =\n      combinator instanceof Combinator ? combinator : new Combinator(combinator)\n\n    if (typeof value === 'string') {\n      this.value = value.trim()\n    } else if (value) {\n      this.value = value\n    } else {\n      this.value = ''\n    }\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.copyVisibilityInfo(info)\n  }\n\n  accept(visitor) {\n    const value = this.value\n    this.combinator = visitor.visit(this.combinator)\n    if (typeof value === 'object') {\n      this.value = visitor.visit(value)\n    }\n  }\n\n  eval(context) {\n    return new Element(\n      this.combinator,\n      this.value.eval ? this.value.eval(context) : this.value,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  clone() {\n    return new Element(\n      this.combinator,\n      this.value,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  genCSS(context, output) {\n    output.add(this.toCSS(context), this.currentFileInfo, this.index)\n  }\n\n  toCSS(context = {}) {\n    let value = this.value\n    const firstSelector = context.firstSelector\n    if (value instanceof Paren) {\n      // selector in parens should not be affected by outer selector\n      // flags (breaks only interpolated selectors - see #1973)\n      context.firstSelector = true\n    }\n    value = value.toCSS ? value.toCSS(context) : value\n    context.firstSelector = firstSelector\n    if (value === '' && this.combinator.value.charAt(0) === '&') {\n      return ''\n    } else {\n      return this.combinator.toCSS(context) + value\n    }\n  }\n}\n\nElement.prototype.type = 'Element'\nmodule.exports = Element\n","const Node = require('./node')\nconst Element = require('./element')\n\nclass Selector extends Node {\n  constructor(\n    elements,\n    extendList,\n    condition,\n    index,\n    currentFileInfo,\n    visibilityInfo\n  ) {\n    super()\n    this.elements = elements\n    this.extendList = extendList\n    this.condition = condition\n    this.currentFileInfo = currentFileInfo || {}\n    if (!condition) {\n      this.evaldCondition = true\n    }\n    this.copyVisibilityInfo(visibilityInfo)\n  }\n\n  accept(visitor) {\n    if (this.elements) {\n      this.elements = visitor.visitArray(this.elements)\n    }\n    if (this.extendList) {\n      this.extendList = visitor.visitArray(this.extendList)\n    }\n    if (this.condition) {\n      this.condition = visitor.visit(this.condition)\n    }\n  }\n\n  createDerived(elements, extendList, evaldCondition) {\n    const info = this.visibilityInfo()\n    evaldCondition =\n      evaldCondition != null ? evaldCondition : this.evaldCondition\n    const newSelector = new Selector(\n      elements,\n      extendList || this.extendList,\n      null,\n      this.index,\n      this.currentFileInfo,\n      info\n    )\n    newSelector.evaldCondition = evaldCondition\n    newSelector.mediaEmpty = this.mediaEmpty\n    return newSelector\n  }\n\n  createEmptySelectors() {\n    const el = new Element('', '&', this.index, this.currentFileInfo)\n    const sels = [\n      new Selector([el], null, null, this.index, this.currentFileInfo),\n    ]\n    sels[0].mediaEmpty = true\n    return sels\n  }\n\n  match(other) {\n    const elements = this.elements\n    const len = elements.length\n    let olen\n    let i\n\n    other.CacheElements()\n\n    olen = other._elements.length\n    if (olen === 0 || len < olen) {\n      return 0\n    } else {\n      for (i = 0; i < olen; i++) {\n        if (elements[i].value !== other._elements[i]) {\n          return 0\n        }\n      }\n    }\n\n    return olen // return number of matched elements\n  }\n\n  CacheElements() {\n    if (this._elements) {\n      return\n    }\n\n    let elements = this.elements\n      .map(v => v.combinator.value + (v.value.value || v.value))\n      .join('')\n      .match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g)\n\n    if (elements) {\n      if (elements[0] === '&') {\n        elements.shift()\n      }\n    } else {\n      elements = []\n    }\n\n    this._elements = elements\n  }\n\n  isJustParentSelector() {\n    return (\n      !this.mediaEmpty &&\n      this.elements.length === 1 &&\n      this.elements[0].value === '&' &&\n      (this.elements[0].combinator.value === ' ' ||\n        this.elements[0].combinator.value === '')\n    )\n  }\n\n  eval(context) {\n    const evaldCondition = this.condition && this.condition.eval(context)\n    let elements = this.elements\n    let extendList = this.extendList\n\n    elements = elements && elements.map(e => e.eval(context))\n    extendList = extendList && extendList.map(extend => extend.eval(context))\n\n    return this.createDerived(elements, extendList, evaldCondition)\n  }\n\n  genCSS(context, output) {\n    let i\n    let element\n    if (\n      (!context || !context.firstSelector) &&\n      this.elements[0].combinator.value === ''\n    ) {\n      output.add(' ', this.currentFileInfo, this.index)\n    }\n    if (!this._css) {\n      //TODO caching? speed comparison?\n      for (i = 0; i < this.elements.length; i++) {\n        element = this.elements[i]\n        element.genCSS(context, output)\n      }\n    }\n  }\n\n  getIsOutput() {\n    return this.evaldCondition\n  }\n}\n\nSelector.prototype.type = 'Selector'\nmodule.exports = Selector\n","const Node = require('./node')\n\nclass Value extends Node {\n  constructor(value) {\n    super()\n    this.value = value\n    if (!value) {\n      throw new Error('Value requires an array argument')\n    }\n  }\n\n  accept(visitor) {\n    if (this.value) {\n      this.value = visitor.visitArray(this.value)\n    }\n  }\n\n  eval(context) {\n    if (this.value.length === 1) {\n      return this.value[0].eval(context)\n    } else {\n      return new Value(this.value.map(v => v.eval(context)))\n    }\n  }\n\n  genCSS(context, output) {\n    let i\n    for (i = 0; i < this.value.length; i++) {\n      this.value[i].genCSS(context, output)\n      if (i + 1 < this.value.length) {\n        output.add(context && context.compress ? ',' : ', ')\n      }\n    }\n  }\n}\n\nValue.prototype.type = 'Value'\nmodule.exports = Value\n","const Node = require('./node')\n\nclass Keyword extends Node {\n  constructor(value) {\n    super()\n    this.value = value\n  }\n\n  genCSS(context, output) {\n    if (this.value === '%') {\n      throw { type: 'Syntax', message: 'Invalid % without number' }\n    }\n    output.add(this.value)\n  }\n}\n\nKeyword.prototype.type = 'Keyword'\n\nKeyword.True = new Keyword('true')\nKeyword.False = new Keyword('false')\n\nmodule.exports = Keyword\n","const Keyword = require('../tree/keyword')\nconst functionRegistry = require('./function-registry')\n\nconst defaultFunc = {\n  eval() {\n    const v = this.value_\n    const e = this.error_\n    if (e) {\n      throw e\n    }\n    if (v != null) {\n      return v ? Keyword.True : Keyword.False\n    }\n  },\n  value(v) {\n    this.value_ = v\n  },\n  error(e) {\n    this.error_ = e\n  },\n  reset() {\n    this.value_ = this.error_ = null\n  },\n}\n\nfunctionRegistry.add('default', defaultFunc.eval.bind(defaultFunc))\n\nmodule.exports = defaultFunc\n","const debugInfo = (context, ctx, lineSeparator) => {\n  let result = ''\n  if (context.dumpLineNumbers && !context.compress) {\n    switch (context.dumpLineNumbers) {\n      case 'comments':\n        result = debugInfo.asComment(ctx)\n        break\n      case 'mediaquery':\n        result = debugInfo.asMediaQuery(ctx)\n        break\n      case 'all':\n        result =\n          debugInfo.asComment(ctx) +\n          (lineSeparator || '') +\n          debugInfo.asMediaQuery(ctx)\n        break\n    }\n  }\n  return result\n}\n\ndebugInfo.asComment = ctx =>\n  `/* line ${ctx.debugInfo.lineNumber}, ${ctx.debugInfo.fileName} */\\n`\n\ndebugInfo.asMediaQuery = ctx => {\n  let filenameWithProtocol = ctx.debugInfo.fileName\n  if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n    filenameWithProtocol = `file://${filenameWithProtocol}`\n  }\n  return `@media -sass-debug-info{filename{font-family:${filenameWithProtocol.replace(\n    /([.:\\/\\\\])/g,\n    a => {\n      if (a == '\\\\') {\n        a = '/'\n      }\n      return '\\\\' + a\n    }\n  )}}line{font-family:\\\\00003${ctx.debugInfo.lineNumber}}}\\n`\n}\n\nmodule.exports = debugInfo\n","const Node = require('./node')\nconst Rule = require('./rule')\nconst Selector = require('./selector')\nconst Element = require('./element')\nconst Paren = require('./paren')\nconst contexts = require('../contexts')\nconst globalFunctionRegistry = require('../functions/function-registry')\nconst defaultFunc = require('../functions/default')\nconst getDebugInfo = require('./debug-info')\n\nclass Ruleset extends Node {\n  constructor(selectors, rules, strictImports, visibilityInfo) {\n    super()\n    this.selectors = selectors\n    this.rules = rules\n    this._lookups = {}\n    this.strictImports = strictImports\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    if (this.paths) {\n      this.paths = visitor.visitArray(this.paths, true)\n    } else if (this.selectors) {\n      this.selectors = visitor.visitArray(this.selectors)\n    }\n    if (this.rules && this.rules.length) {\n      this.rules = visitor.visitArray(this.rules)\n    }\n  }\n\n  eval(context) {\n    const thisSelectors = this.selectors\n    let selectors\n    let selCnt\n    let selector\n    let i\n    let hasOnePassingSelector = false\n\n    if (thisSelectors && (selCnt = thisSelectors.length)) {\n      selectors = []\n      defaultFunc.error({\n        type: 'Syntax',\n        message: 'it is currently only allowed in parametric mixin guards,',\n      })\n      for (i = 0; i < selCnt; i++) {\n        selector = thisSelectors[i].eval(context)\n        selectors.push(selector)\n        if (selector.evaldCondition) {\n          hasOnePassingSelector = true\n        }\n      }\n      defaultFunc.reset()\n    } else {\n      hasOnePassingSelector = true\n    }\n\n    let rules = this.rules ? this.rules.slice(0) : null\n    const ruleset = new Ruleset(\n      selectors,\n      rules,\n      this.strictImports,\n      this.visibilityInfo()\n    )\n    let rule\n    let subRule\n\n    ruleset.originalRuleset = this\n    ruleset.root = this.root\n    ruleset.firstRoot = this.firstRoot\n    ruleset.allowImports = this.allowImports\n\n    if (this.debugInfo) {\n      ruleset.debugInfo = this.debugInfo\n    }\n\n    if (!hasOnePassingSelector) {\n      rules.length = 0\n    }\n\n    // inherit a function registry from the frames stack when possible;\n    // otherwise from the global registry\n    ruleset.functionRegistry = (frames => {\n      let i = 0\n      const n = frames.length\n      let found\n      for (; i !== n; ++i) {\n        found = frames[i].functionRegistry\n        if (found) {\n          return found\n        }\n      }\n      return globalFunctionRegistry\n    })(context.frames).inherit()\n\n    // push the current ruleset to the frames stack\n    const ctxFrames = context.frames\n    ctxFrames.unshift(ruleset)\n\n    // currrent selectors\n    let ctxSelectors = context.selectors\n    if (!ctxSelectors) {\n      context.selectors = ctxSelectors = []\n    }\n    ctxSelectors.unshift(this.selectors)\n\n    // Evaluate imports\n    if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n      ruleset.evalImports(context)\n    }\n\n    // Store the frames around mixin definitions,\n    // so they can be evaluated like closures when the time comes.\n    const rsRules = ruleset.rules\n\n    let rsRuleCnt = rsRules ? rsRules.length : 0\n    for (i = 0; i < rsRuleCnt; i++) {\n      if (rsRules[i].evalFirst) {\n        rsRules[i] = rsRules[i].eval(context)\n      }\n    }\n\n    const mediaBlockCount =\n      (context.mediaBlocks && context.mediaBlocks.length) || 0\n\n    // Evaluate mixin calls.\n    for (i = 0; i < rsRuleCnt; i++) {\n      if (rsRules[i].type === 'MixinCall') {\n        /*jshint loopfunc:true */\n        rules = rsRules[i].eval(context).filter(r => {\n          if (r instanceof Rule && r.variable) {\n            // do not pollute the scope if the variable is\n            // already there. consider returning false here\n            // but we need a way to \"return\" variable from mixins\n            return !ruleset.variable(r.name)\n          }\n          return true\n        })\n        rsRules.splice(...[i, 1].concat(rules))\n        rsRuleCnt += rules.length - 1\n        i += rules.length - 1\n        ruleset.resetCache()\n      } else if (rsRules[i].type === 'RulesetCall') {\n        /*jshint loopfunc:true */\n        rules = rsRules[i].eval(context).rules.filter(r => {\n          if (r instanceof Rule && r.variable) {\n            // do not pollute the scope at all\n            return false\n          }\n          return true\n        })\n        rsRules.splice(...[i, 1].concat(rules))\n        rsRuleCnt += rules.length - 1\n        i += rules.length - 1\n        ruleset.resetCache()\n      }\n    }\n\n    // Evaluate everything else\n    for (i = 0; i < rsRules.length; i++) {\n      rule = rsRules[i]\n      if (!rule.evalFirst) {\n        rsRules[i] = rule = rule.eval ? rule.eval(context) : rule\n      }\n    }\n\n    // Evaluate everything else\n    for (i = 0; i < rsRules.length; i++) {\n      rule = rsRules[i]\n      // for rulesets, check if it is a css guard and can be removed\n      if (\n        rule instanceof Ruleset &&\n        rule.selectors &&\n        rule.selectors.length === 1\n      ) {\n        // check if it can be folded in (e.g. & where)\n        if (rule.selectors[0].isJustParentSelector()) {\n          rsRules.splice(i--, 1)\n\n          for (let j = 0; j < rule.rules.length; j++) {\n            subRule = rule.rules[j]\n            subRule.copyVisibilityInfo(rule.visibilityInfo())\n            if (!(subRule instanceof Rule) || !subRule.variable) {\n              rsRules.splice(++i, 0, subRule)\n            }\n          }\n        }\n      }\n    }\n\n    // Pop the stack\n    ctxFrames.shift()\n    ctxSelectors.shift()\n\n    if (context.mediaBlocks) {\n      for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n        context.mediaBlocks[i].bubbleSelectors(selectors)\n      }\n    }\n\n    return ruleset\n  }\n\n  evalImports(context) {\n    const rules = this.rules\n    let i\n    let importRules\n    if (!rules) {\n      return\n    }\n\n    for (i = 0; i < rules.length; i++) {\n      if (rules[i].type === 'Import') {\n        importRules = rules[i].eval(context)\n        if (importRules && (importRules.length || importRules.length === 0)) {\n          rules.splice(...[i, 1].concat(importRules))\n          i += importRules.length - 1\n        } else {\n          rules.splice(i, 1, importRules)\n        }\n        this.resetCache()\n      }\n    }\n  }\n\n  makeImportant() {\n    const result = new Ruleset(\n      this.selectors,\n      this.rules.map(r => {\n        if (r.makeImportant) {\n          return r.makeImportant()\n        } else {\n          return r\n        }\n      }),\n      this.strictImports,\n      this.visibilityInfo()\n    )\n\n    return result\n  }\n\n  matchArgs(args) {\n    return !args || args.length === 0\n  }\n\n  // lets you call a css selector with a guard\n  matchCondition(args, context) {\n    const lastSelector = this.selectors[this.selectors.length - 1]\n    if (!lastSelector.evaldCondition) {\n      return false\n    }\n    if (\n      lastSelector.condition &&\n      !lastSelector.condition.eval(new contexts.Eval(context, context.frames))\n    ) {\n      return false\n    }\n    return true\n  }\n\n  resetCache() {\n    this._rulesets = null\n    this._variables = null\n    this._lookups = {}\n  }\n\n  variables() {\n    if (!this._variables) {\n      this._variables = !this.rules\n        ? {}\n        : this.rules.reduce((hash, r) => {\n            if (r instanceof Rule && r.variable === true) {\n              hash[r.name] = r\n            }\n            // when evaluating variables in an import statement, imports have not been eval'd\n            // so we need to go inside import statements.\n            // guard against root being a string (in the case of inlined less)\n            if (r.type === 'Import' && r.root && r.root.variables) {\n              const vars = r.root.variables()\n              for (const name in vars) {\n                if (vars.hasOwnProperty(name)) {\n                  hash[name] = vars[name]\n                }\n              }\n            }\n            return hash\n          }, {})\n    }\n    return this._variables\n  }\n\n  variable(name) {\n    return this.variables()[name]\n  }\n\n  rulesets() {\n    if (!this.rules) {\n      return []\n    }\n\n    const filtRules = []\n    const rules = this.rules\n    const cnt = rules.length\n    let i\n    let rule\n\n    for (i = 0; i < cnt; i++) {\n      rule = rules[i]\n      if (rule.isRuleset) {\n        filtRules.push(rule)\n      }\n    }\n\n    return filtRules\n  }\n\n  prependRule(rule) {\n    const rules = this.rules\n    if (rules) {\n      rules.unshift(rule)\n    } else {\n      this.rules = [rule]\n    }\n  }\n\n  find(selector, self = this, filter) {\n    const rules = []\n    let match\n    let foundMixins\n    const key = selector.toCSS()\n\n    if (key in this._lookups) {\n      return this._lookups[key]\n    }\n\n    this.rulesets().forEach(rule => {\n      if (rule !== self) {\n        for (let j = 0; j < rule.selectors.length; j++) {\n          match = selector.match(rule.selectors[j])\n          if (match) {\n            if (selector.elements.length > match) {\n              if (!filter || filter(rule)) {\n                foundMixins = rule.find(\n                  new Selector(selector.elements.slice(match)),\n                  self,\n                  filter\n                )\n                for (let i = 0; i < foundMixins.length; ++i) {\n                  foundMixins[i].path.push(rule)\n                }\n                Array.prototype.push.apply(rules, foundMixins)\n              }\n            } else {\n              rules.push({ rule, path: [] })\n            }\n            break\n          }\n        }\n      }\n    })\n    this._lookups[key] = rules\n    return rules\n  }\n\n  genCSS(context, output) {\n    let i\n    let j\n    const charsetRuleNodes = []\n    let ruleNodes = []\n\n    let // Line number debugging\n    debugInfo\n\n    let rule\n    let path\n\n    context.tabLevel = context.tabLevel || 0\n\n    if (!this.root) {\n      context.tabLevel++\n    }\n\n    const tabRuleStr = context.compress\n      ? ''\n      : Array(context.tabLevel + 1).join('  ')\n    const tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ')\n    let sep\n\n    function isRulesetLikeNode(rule) {\n      // if it has nested rules, then it should be treated like a ruleset\n      // medias and comments do not have nested rules, but should be treated like rulesets anyway\n      // some directives and anonymous nodes are ruleset like, others are not\n      if (typeof rule.isRulesetLike === 'boolean') {\n        return rule.isRulesetLike\n      } else if (typeof rule.isRulesetLike === 'function') {\n        return rule.isRulesetLike()\n      }\n\n      //anything else is assumed to be a rule\n      return false\n    }\n\n    let charsetNodeIndex = 0\n    let importNodeIndex = 0\n    for (i = 0; i < this.rules.length; i++) {\n      rule = this.rules[i]\n      if (rule.type === 'Comment') {\n        if (importNodeIndex === i) {\n          importNodeIndex++\n        }\n        ruleNodes.push(rule)\n      } else if (rule.isCharset && rule.isCharset()) {\n        ruleNodes.splice(charsetNodeIndex, 0, rule)\n        charsetNodeIndex++\n        importNodeIndex++\n      } else if (rule.type === 'Import') {\n        ruleNodes.splice(importNodeIndex, 0, rule)\n        importNodeIndex++\n      } else {\n        ruleNodes.push(rule)\n      }\n    }\n    ruleNodes = charsetRuleNodes.concat(ruleNodes)\n\n    // If this is the root node, we don't render\n    // a selector, or {}.\n    if (!this.root) {\n      debugInfo = getDebugInfo(context, this, tabSetStr)\n\n      if (debugInfo) {\n        output.add(debugInfo)\n        output.add(tabSetStr)\n      }\n\n      const paths = this.paths\n      const pathCnt = paths.length\n      let pathSubCnt\n\n      sep = context.compress ? ',' : `,\\n${tabSetStr}`\n\n      for (i = 0; i < pathCnt; i++) {\n        path = paths[i]\n        if (!(pathSubCnt = path.length)) {\n          continue\n        }\n        if (i > 0) {\n          output.add(sep)\n        }\n\n        context.firstSelector = true\n        path[0].genCSS(context, output)\n\n        context.firstSelector = false\n        for (j = 1; j < pathSubCnt; j++) {\n          path[j].genCSS(context, output)\n        }\n      }\n\n      output.add((context.compress ? '{' : ' {\\n') + tabRuleStr)\n    }\n\n    // Compile rules and rulesets\n    for (i = 0; i < ruleNodes.length; i++) {\n      rule = ruleNodes[i]\n\n      if (i + 1 === ruleNodes.length) {\n        context.lastRule = true\n      }\n\n      const currentLastRule = context.lastRule\n      if (isRulesetLikeNode(rule)) {\n        context.lastRule = false\n      }\n\n      if (rule.genCSS) {\n        rule.genCSS(context, output)\n      } else if (rule.value) {\n        output.add(rule.value.toString())\n      }\n\n      context.lastRule = currentLastRule\n\n      if (!context.lastRule) {\n        output.add(context.compress ? '' : `\\n${tabRuleStr}`)\n      } else {\n        context.lastRule = false\n      }\n    }\n\n    if (!this.root) {\n      output.add(context.compress ? '}' : `\\n${tabSetStr}}`)\n      context.tabLevel--\n    }\n\n    if (!output.isEmpty() && !context.compress && this.firstRoot) {\n      output.add('\\n')\n    }\n  }\n\n  joinSelectors(paths, context, selectors) {\n    for (let s = 0; s < selectors.length; s++) {\n      this.joinSelector(paths, context, selectors[s])\n    }\n  }\n\n  joinSelector(paths, context, selector) {\n    function createParenthesis(elementsToPak, originalElement) {\n      let replacementParen\n      let j\n      if (elementsToPak.length === 0) {\n        replacementParen = new Paren(elementsToPak[0])\n      } else {\n        const insideParent = []\n        for (j = 0; j < elementsToPak.length; j++) {\n          insideParent.push(\n            new Element(\n              null,\n              elementsToPak[j],\n              originalElement.index,\n              originalElement.currentFileInfo\n            )\n          )\n        }\n        replacementParen = new Paren(new Selector(insideParent))\n      }\n      return replacementParen\n    }\n\n    function createSelector(containedElement, originalElement) {\n      let element\n      let selector\n      element = new Element(\n        null,\n        containedElement,\n        originalElement.index,\n        originalElement.currentFileInfo\n      )\n      selector = new Selector([element])\n      return selector\n    }\n\n    // joins selector path from `beginningPath` with selector path in `addPath`\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns concatenated path\n    function addReplacementIntoPath(\n      beginningPath,\n      addPath,\n      replacedElement,\n      originalSelector\n    ) {\n      let newSelectorPath\n      let lastSelector\n      let newJoinedSelector\n      // our new selector path\n      newSelectorPath = []\n\n      //construct the joined selector - if & is the first thing this will be empty,\n      // if not newJoinedSelector will be the last set of elements in the selector\n      if (beginningPath.length > 0) {\n        newSelectorPath = beginningPath.slice(0)\n        lastSelector = newSelectorPath.pop()\n        newJoinedSelector = originalSelector.createDerived(\n          lastSelector.elements.slice(0)\n        )\n      } else {\n        newJoinedSelector = originalSelector.createDerived([])\n      }\n\n      if (addPath.length > 0) {\n        // /deep/ is a combinator that is valid without anything in front of it\n        // so if the & does not have a combinator that is \"\" or \" \" then\n        // and there is a combinator on the parent, then grab that.\n        // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n        let combinator = replacedElement.combinator\n\n        const parentEl = addPath[0].elements[0]\n        if (\n          combinator.emptyOrWhitespace &&\n          !parentEl.combinator.emptyOrWhitespace\n        ) {\n          combinator = parentEl.combinator\n        }\n        // join the elements so far with the first part of the parent\n        newJoinedSelector.elements.push(\n          new Element(\n            combinator,\n            parentEl.value,\n            replacedElement.index,\n            replacedElement.currentFileInfo\n          )\n        )\n        newJoinedSelector.elements = newJoinedSelector.elements.concat(\n          addPath[0].elements.slice(1)\n        )\n      }\n\n      // now add the joined selector - but only if it is not empty\n      if (newJoinedSelector.elements.length !== 0) {\n        newSelectorPath.push(newJoinedSelector)\n      }\n\n      //put together the parent selectors after the join (e.g. the rest of the parent)\n      if (addPath.length > 1) {\n        let restOfPath = addPath.slice(1)\n        restOfPath = restOfPath.map(selector =>\n          selector.createDerived(selector.elements, [])\n        )\n        newSelectorPath = newSelectorPath.concat(restOfPath)\n      }\n      return newSelectorPath\n    }\n\n    // joins selector path from `beginningPath` with every selector path in `addPaths` array\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns array with all concatenated paths\n    function addAllReplacementsIntoPath(\n      beginningPath,\n      addPaths,\n      replacedElement,\n      originalSelector,\n      result\n    ) {\n      let j\n      for (j = 0; j < beginningPath.length; j++) {\n        const newSelectorPath = addReplacementIntoPath(\n          beginningPath[j],\n          addPaths,\n          replacedElement,\n          originalSelector\n        )\n        result.push(newSelectorPath)\n      }\n      return result\n    }\n\n    function mergeElementsOnToSelectors(elements, selectors) {\n      let i\n      let sel\n\n      if (elements.length === 0) {\n        return\n      }\n      if (selectors.length === 0) {\n        selectors.push([new Selector(elements)])\n        return\n      }\n\n      for (i = 0; i < selectors.length; i++) {\n        sel = selectors[i]\n\n        // if the previous thing in sel is a parent this needs to join on to it\n        if (sel.length > 0) {\n          sel[sel.length - 1] = sel[sel.length - 1].createDerived(\n            sel[sel.length - 1].elements.concat(elements)\n          )\n        } else {\n          sel.push(new Selector(elements))\n        }\n      }\n    }\n\n    // replace all parent selectors inside `inSelector` by content of `context` array\n    // resulting selectors are returned inside `paths` array\n    // returns true if `inSelector` contained at least one parent selector\n    function replaceParentSelector(paths, context, inSelector) {\n      // The paths are [[Selector]]\n      // The first list is a list of comma separated selectors\n      // The inner list is a list of inheritance separated selectors\n      // e.g.\n      // .a, .b {\n      //   .c {\n      //   }\n      // }\n      // == [[.a] [.c]] [[.b] [.c]]\n      //\n      let i\n\n      let j\n      let k\n      let currentElements\n      let newSelectors\n      let selectorsMultiplied\n      let sel\n      let el\n      let hadParentSelector = false\n      let length\n      let lastSelector\n      function findNestedSelector(element) {\n        let maybeSelector\n        if (element.value.type !== 'Paren') {\n          return null\n        }\n\n        maybeSelector = element.value.value\n        if (maybeSelector.type !== 'Selector') {\n          return null\n        }\n\n        return maybeSelector\n      }\n\n      // the elements from the current selector so far\n      currentElements = []\n      // the current list of new selectors to add to the path.\n      // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n      // by the parents\n      newSelectors = [[]]\n\n      for (i = 0; i < inSelector.elements.length; i++) {\n        el = inSelector.elements[i]\n        // non parent reference elements just get added\n        if (el.value !== '&') {\n          const nestedSelector = findNestedSelector(el)\n          if (nestedSelector != null) {\n            // merge the current list of non parent selector elements\n            // on to the current list of selectors to add\n            mergeElementsOnToSelectors(currentElements, newSelectors)\n\n            const nestedPaths = []\n            let replaced\n            const replacedNewSelectors = []\n            replaced = replaceParentSelector(\n              nestedPaths,\n              context,\n              nestedSelector\n            )\n            hadParentSelector = hadParentSelector || replaced\n            //the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n            for (k = 0; k < nestedPaths.length; k++) {\n              const replacementSelector = createSelector(\n                createParenthesis(nestedPaths[k], el),\n                el\n              )\n              addAllReplacementsIntoPath(\n                newSelectors,\n                [replacementSelector],\n                el,\n                inSelector,\n                replacedNewSelectors\n              )\n            }\n            newSelectors = replacedNewSelectors\n            currentElements = []\n          } else {\n            currentElements.push(el)\n          }\n        } else {\n          hadParentSelector = true\n          // the new list of selectors to add\n          selectorsMultiplied = []\n\n          // merge the current list of non parent selector elements\n          // on to the current list of selectors to add\n          mergeElementsOnToSelectors(currentElements, newSelectors)\n\n          // loop through our current selectors\n          for (j = 0; j < newSelectors.length; j++) {\n            sel = newSelectors[j]\n            // if we don't have any parent paths, the & might be in a mixin so that it can be used\n            // whether there are parents or not\n            if (context.length === 0) {\n              // the combinator used on el should now be applied to the next element instead so that\n              // it is not lost\n              if (sel.length > 0) {\n                sel[0].elements.push(\n                  new Element(el.combinator, '', el.index, el.currentFileInfo)\n                )\n              }\n              selectorsMultiplied.push(sel)\n            } else {\n              // and the parent selectors\n              for (k = 0; k < context.length; k++) {\n                // We need to put the current selectors\n                // then join the last selector's elements on to the parents selectors\n                const newSelectorPath = addReplacementIntoPath(\n                  sel,\n                  context[k],\n                  el,\n                  inSelector\n                )\n                // add that to our new set of selectors\n                selectorsMultiplied.push(newSelectorPath)\n              }\n            }\n          }\n\n          // our new selectors has been multiplied, so reset the state\n          newSelectors = selectorsMultiplied\n          currentElements = []\n        }\n      }\n\n      // if we have any elements left over (e.g. .a& .b == .b)\n      // add them on to all the current selectors\n      mergeElementsOnToSelectors(currentElements, newSelectors)\n\n      for (i = 0; i < newSelectors.length; i++) {\n        length = newSelectors[i].length\n        if (length > 0) {\n          paths.push(newSelectors[i])\n          lastSelector = newSelectors[i][length - 1]\n          newSelectors[i][length - 1] = lastSelector.createDerived(\n            lastSelector.elements,\n            inSelector.extendList\n          )\n          //newSelectors[i][length - 1].copyVisibilityInfo(inSelector.visibilityInfo());\n        }\n      }\n\n      return hadParentSelector\n    }\n\n    function deriveSelector(visibilityInfo, deriveFrom) {\n      const newSelector = deriveFrom.createDerived(\n        deriveFrom.elements,\n        deriveFrom.extendList,\n        deriveFrom.evaldCondition\n      )\n      newSelector.copyVisibilityInfo(visibilityInfo)\n      return newSelector\n    }\n\n    // joinSelector code follows\n    let i\n\n    let newPaths\n    let hadParentSelector\n\n    newPaths = []\n    hadParentSelector = replaceParentSelector(newPaths, context, selector)\n\n    if (!hadParentSelector) {\n      if (context.length > 0) {\n        newPaths = []\n        for (i = 0; i < context.length; i++) {\n          //var concatenated = [];\n          //context[i].forEach(function(entry) {\n          //    var newEntry = entry.createDerived(entry.elements, entry.extendList, entry.evaldCondition);\n          //    newEntry.copyVisibilityInfo(selector.visibilityInfo());\n          //    concatenated.push(newEntry);\n          //}, this);\n          const concatenated = context[i].map(\n            deriveSelector.bind(this, selector.visibilityInfo())\n          )\n\n          concatenated.push(selector)\n          newPaths.push(concatenated)\n        }\n      } else {\n        newPaths = [[selector]]\n      }\n    }\n\n    for (i = 0; i < newPaths.length; i++) {\n      paths.push(newPaths[i])\n    }\n  }\n}\n\nRuleset.prototype.type = 'Ruleset'\nRuleset.prototype.isRuleset = true\nRuleset.prototype.isRulesetLike = true\nmodule.exports = Ruleset\n","const Node = require('./node')\nconst Selector = require('./selector')\nconst Ruleset = require('./ruleset')\n\nclass Directive extends Node {\n  constructor(\n    name,\n    value,\n    rules,\n    index,\n    currentFileInfo,\n    debugInfo,\n    isRooted,\n    visibilityInfo\n  ) {\n    super()\n    let i\n\n    this.name = name\n    this.value = value\n    if (rules) {\n      if (Array.isArray(rules)) {\n        this.rules = rules\n      } else {\n        this.rules = [rules]\n        this.rules[0].selectors = new Selector(\n          [],\n          null,\n          null,\n          this.index,\n          currentFileInfo\n        ).createEmptySelectors()\n      }\n      for (i = 0; i < this.rules.length; i++) {\n        this.rules[i].allowImports = true\n      }\n    }\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.debugInfo = debugInfo\n    this.isRooted = isRooted || false\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    const value = this.value\n    const rules = this.rules\n    if (rules) {\n      this.rules = visitor.visitArray(rules)\n    }\n    if (value) {\n      this.value = visitor.visit(value)\n    }\n  }\n\n  isRulesetLike() {\n    return this.rules || !this.isCharset()\n  }\n\n  isCharset() {\n    return '@charset' === this.name\n  }\n\n  genCSS(context, output) {\n    const value = this.value\n    const rules = this.rules\n    output.add(this.name, this.currentFileInfo, this.index)\n    if (value) {\n      output.add(' ')\n      value.genCSS(context, output)\n    }\n    if (rules) {\n      this.outputRuleset(context, output, rules)\n    } else {\n      output.add(';')\n    }\n  }\n\n  eval(context) {\n    let mediaPathBackup\n    let mediaBlocksBackup\n    let value = this.value\n    let rules = this.rules\n\n    //media stored inside other directive should not bubble over it\n    //backpup media bubbling information\n    mediaPathBackup = context.mediaPath\n    mediaBlocksBackup = context.mediaBlocks\n    //deleted media bubbling information\n    context.mediaPath = []\n    context.mediaBlocks = []\n\n    if (value) {\n      value = value.eval(context)\n    }\n    if (rules) {\n      // assuming that there is only one rule at this point - that is how parser constructs the rule\n      rules = [rules[0].eval(context)]\n      rules[0].root = true\n    }\n    //restore media bubbling information\n    context.mediaPath = mediaPathBackup\n    context.mediaBlocks = mediaBlocksBackup\n\n    return new Directive(\n      this.name,\n      value,\n      rules,\n      this.index,\n      this.currentFileInfo,\n      this.debugInfo,\n      this.isRooted,\n      this.visibilityInfo()\n    )\n  }\n\n  variable(name) {\n    if (this.rules) {\n      // assuming that there is only one rule at this point - that is how parser constructs the rule\n      return Ruleset.prototype.variable.call(this.rules[0], name)\n    }\n  }\n\n  find(...args) {\n    if (this.rules) {\n      // assuming that there is only one rule at this point - that is how parser constructs the rule\n      return Ruleset.prototype.find.apply(this.rules[0], args)\n    }\n  }\n\n  rulesets() {\n    if (this.rules) {\n      // assuming that there is only one rule at this point - that is how parser constructs the rule\n      return Ruleset.prototype.rulesets.apply(this.rules[0])\n    }\n  }\n\n  outputRuleset(context, output, rules) {\n    const ruleCnt = rules.length\n    let i\n    context.tabLevel = (context.tabLevel | 0) + 1\n\n    // Compressed\n    if (context.compress) {\n      output.add('{')\n      for (i = 0; i < ruleCnt; i++) {\n        rules[i].genCSS(context, output)\n      }\n      output.add('}')\n      context.tabLevel--\n      return\n    }\n\n    // Non-compressed\n    const tabSetStr = `\\n${Array(context.tabLevel).join('  ')}`\n\n    const tabRuleStr = `${tabSetStr}  `\n    if (!ruleCnt) {\n      output.add(` {${tabSetStr}}`)\n    } else {\n      output.add(` {${tabRuleStr}`)\n      rules[0].genCSS(context, output)\n      for (i = 1; i < ruleCnt; i++) {\n        output.add(tabRuleStr)\n        rules[i].genCSS(context, output)\n      }\n      output.add(`${tabSetStr}}`)\n    }\n\n    context.tabLevel--\n  }\n}\n\nDirective.prototype.type = 'Directive'\nmodule.exports = Directive\n","const Node = require('./node')\nconst contexts = require('../contexts')\n\nclass DetachedRuleset extends Node {\n  constructor(ruleset, frames) {\n    super()\n    this.ruleset = ruleset\n    this.frames = frames\n  }\n\n  accept(visitor) {\n    this.ruleset = visitor.visit(this.ruleset)\n  }\n\n  eval(context) {\n    const frames = this.frames || context.frames.slice(0)\n    return new DetachedRuleset(this.ruleset, frames)\n  }\n\n  callEval(context) {\n    return this.ruleset.eval(\n      this.frames\n        ? new contexts.Eval(context, this.frames.concat(context.frames))\n        : context\n    )\n  }\n}\n\nDetachedRuleset.prototype.type = 'DetachedRuleset'\nDetachedRuleset.prototype.evalFirst = true\nmodule.exports = DetachedRuleset\n","module.exports = {\n  length: {\n    m: 1,\n    cm: 0.01,\n    mm: 0.001,\n    in: 0.0254,\n    px: 0.0254 / 96,\n    pt: 0.0254 / 72,\n    pc: 0.0254 / 72 * 12,\n  },\n  duration: {\n    s: 1,\n    ms: 0.001,\n  },\n  angle: {\n    rad: 1 / (2 * Math.PI),\n    deg: 1 / 360,\n    grad: 1 / 400,\n    turn: 1,\n  },\n}\n","const Node = require('./node')\nconst unitConversions = require('../data/unit-conversions')\n\nclass Unit extends Node {\n  constructor(numerator, denominator, backupUnit) {\n    super()\n    this.numerator = numerator ? numerator.slice(0).sort() : []\n    this.denominator = denominator ? denominator.slice(0).sort() : []\n    if (backupUnit) {\n      this.backupUnit = backupUnit\n    } else if (numerator && numerator.length) {\n      this.backupUnit = numerator[0]\n    }\n  }\n\n  clone() {\n    return new Unit(\n      this.numerator.slice(0),\n      this.denominator.slice(0),\n      this.backupUnit\n    )\n  }\n\n  genCSS(context, output) {\n    // Dimension checks the unit is singular and throws an error if in strict math mode.\n    const strictUnits = context && context.strictUnits\n    if (this.numerator.length === 1) {\n      output.add(this.numerator[0]) // the ideal situation\n    } else if (!strictUnits && this.backupUnit) {\n      output.add(this.backupUnit)\n    } else if (!strictUnits && this.denominator.length) {\n      output.add(this.denominator[0])\n    }\n  }\n\n  toString() {\n    let i\n    let returnStr = this.numerator.join('*')\n    for (i = 0; i < this.denominator.length; i++) {\n      returnStr += `/${this.denominator[i]}`\n    }\n    return returnStr\n  }\n\n  compare(other) {\n    return this.is(other.toString()) ? 0 : undefined\n  }\n\n  is(unitString) {\n    return this.toString().toUpperCase() === unitString.toUpperCase()\n  }\n\n  isLength() {\n    return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/))\n  }\n\n  isEmpty() {\n    return this.numerator.length === 0 && this.denominator.length === 0\n  }\n\n  isSingular() {\n    return this.numerator.length <= 1 && this.denominator.length === 0\n  }\n\n  map(callback) {\n    let i\n\n    for (i = 0; i < this.numerator.length; i++) {\n      this.numerator[i] = callback(this.numerator[i], false)\n    }\n\n    for (i = 0; i < this.denominator.length; i++) {\n      this.denominator[i] = callback(this.denominator[i], true)\n    }\n  }\n\n  usedUnits() {\n    let group\n    const result = {}\n    let mapUnit\n    let groupName\n\n    mapUnit = atomicUnit => {\n      /*jshint loopfunc:true */\n      if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n        result[groupName] = atomicUnit\n      }\n\n      return atomicUnit\n    }\n\n    for (groupName in unitConversions) {\n      if (unitConversions.hasOwnProperty(groupName)) {\n        group = unitConversions[groupName]\n\n        this.map(mapUnit)\n      }\n    }\n\n    return result\n  }\n\n  cancel() {\n    const counter = {}\n    let atomicUnit\n    let i\n\n    for (i = 0; i < this.numerator.length; i++) {\n      atomicUnit = this.numerator[i]\n      counter[atomicUnit] = (counter[atomicUnit] || 0) + 1\n    }\n\n    for (i = 0; i < this.denominator.length; i++) {\n      atomicUnit = this.denominator[i]\n      counter[atomicUnit] = (counter[atomicUnit] || 0) - 1\n    }\n\n    this.numerator = []\n    this.denominator = []\n\n    for (atomicUnit in counter) {\n      if (counter.hasOwnProperty(atomicUnit)) {\n        const count = counter[atomicUnit]\n\n        if (count > 0) {\n          for (i = 0; i < count; i++) {\n            this.numerator.push(atomicUnit)\n          }\n        } else if (count < 0) {\n          for (i = 0; i < -count; i++) {\n            this.denominator.push(atomicUnit)\n          }\n        }\n      }\n    }\n\n    this.numerator.sort()\n    this.denominator.sort()\n  }\n}\n\nUnit.prototype.type = 'Unit'\nmodule.exports = Unit\n","const Node = require('./node')\nconst unitConversions = require('../data/unit-conversions')\nconst Unit = require('./unit')\nconst Color = require('./color')\n\n//\n// A number with a unit\n//\nclass Dimension extends Node {\n  constructor(value, unit) {\n    super()\n    this.value = parseFloat(value)\n    this.unit =\n      unit && unit instanceof Unit ? unit : new Unit(unit ? [unit] : undefined)\n  }\n\n  accept(visitor) {\n    this.unit = visitor.visit(this.unit)\n  }\n\n  eval(context) {\n    return this\n  }\n\n  toColor() {\n    return new Color([this.value, this.value, this.value])\n  }\n\n  genCSS(context, output) {\n    if (context && context.strictUnits && !this.unit.isSingular()) {\n      throw new Error(\n        `Multiple units in dimension. Correct the units or use the unit function. Bad unit: ${this.unit.toString()}`\n      )\n    }\n\n    const value = this.fround(context, this.value)\n    let strValue = String(value)\n\n    if (value !== 0 && value < 0.000001 && value > -0.000001) {\n      // would be output 1e-6 etc.\n      strValue = value.toFixed(20).replace(/0+$/, '')\n    }\n\n    if (context && context.compress) {\n      // Zero values doesn't need a unit\n      if (value === 0 && this.unit.isLength()) {\n        output.add(strValue)\n        return\n      }\n\n      // Float values doesn't need a leading zero\n      if (value > 0 && value < 1) {\n        strValue = strValue.substr(1)\n      }\n    }\n\n    output.add(strValue)\n    this.unit.genCSS(context, output)\n  }\n\n  // In an operation between two Dimensions,\n  // we default to the first Dimension's unit,\n  // so `1px + 2` will yield `3px`.\n  operate(context, op, other) {\n    /*jshint noempty:false */\n    let value = this._operate(context, op, this.value, other.value)\n\n    let unit = this.unit.clone()\n\n    if (op === '+' || op === '-') {\n      if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n        unit = other.unit.clone()\n        if (this.unit.backupUnit) {\n          unit.backupUnit = this.unit.backupUnit\n        }\n      } else if (\n        other.unit.numerator.length === 0 &&\n        unit.denominator.length === 0\n      ) {\n        // do nothing\n      } else {\n        other = other.convertTo(this.unit.usedUnits())\n\n        if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n          throw new Error(\n            `Incompatible units. Change the units or use the unit function. Bad units: '${unit.toString()}' and '${other.unit.toString()}'.`\n          )\n        }\n\n        value = this._operate(context, op, this.value, other.value)\n      }\n    } else if (op === '*') {\n      unit.numerator = unit.numerator.concat(other.unit.numerator).sort()\n      unit.denominator = unit.denominator.concat(other.unit.denominator).sort()\n      unit.cancel()\n    } else if (op === '/') {\n      unit.numerator = unit.numerator.concat(other.unit.denominator).sort()\n      unit.denominator = unit.denominator.concat(other.unit.numerator).sort()\n      unit.cancel()\n    }\n    return new Dimension(value, unit)\n  }\n\n  compare(other) {\n    let a\n    let b\n\n    if (!(other instanceof Dimension)) {\n      return undefined\n    }\n\n    if (this.unit.isEmpty() || other.unit.isEmpty()) {\n      a = this\n      b = other\n    } else {\n      a = this.unify()\n      b = other.unify()\n      if (a.unit.compare(b.unit) !== 0) {\n        return undefined\n      }\n    }\n\n    return Node.numericCompare(a.value, b.value)\n  }\n\n  unify() {\n    return this.convertTo({ length: 'px', duration: 's', angle: 'rad' })\n  }\n\n  convertTo(conversions) {\n    let value = this.value\n    const unit = this.unit.clone()\n    let i\n    let groupName\n    let group\n    let targetUnit\n    let derivedConversions = {}\n    let applyUnit\n\n    if (typeof conversions === 'string') {\n      for (i in unitConversions) {\n        if (unitConversions[i].hasOwnProperty(conversions)) {\n          derivedConversions = {}\n          derivedConversions[i] = conversions\n        }\n      }\n      conversions = derivedConversions\n    }\n    applyUnit = (atomicUnit, denominator) => {\n      /* jshint loopfunc:true */\n      if (group.hasOwnProperty(atomicUnit)) {\n        if (denominator) {\n          value = value / (group[atomicUnit] / group[targetUnit])\n        } else {\n          value = value * (group[atomicUnit] / group[targetUnit])\n        }\n\n        return targetUnit\n      }\n\n      return atomicUnit\n    }\n\n    for (groupName in conversions) {\n      if (conversions.hasOwnProperty(groupName)) {\n        targetUnit = conversions[groupName]\n        group = unitConversions[groupName]\n\n        unit.map(applyUnit)\n      }\n    }\n\n    unit.cancel()\n\n    return new Dimension(value, unit)\n  }\n}\n\nDimension.prototype.type = 'Dimension'\nmodule.exports = Dimension\n","const Node = require('./node')\nconst Color = require('./color')\nconst Dimension = require('./dimension')\n\nclass Operation extends Node {\n  constructor(op, operands, isSpaced) {\n    super()\n    this.op = op.trim()\n    this.operands = operands\n    this.isSpaced = isSpaced\n  }\n\n  accept(visitor) {\n    this.operands = visitor.visit(this.operands)\n  }\n\n  eval(context) {\n    let a = this.operands[0].eval(context)\n    let b = this.operands[1].eval(context)\n\n    if (context.isMathOn()) {\n      if (a instanceof Dimension && b instanceof Color) {\n        a = a.toColor()\n      }\n      if (b instanceof Dimension && a instanceof Color) {\n        b = b.toColor()\n      }\n      if (!a.operate) {\n        throw {\n          type: 'Operation',\n          message: 'Operation on an invalid type',\n        }\n      }\n\n      return a.operate(context, this.op, b)\n    } else {\n      return new Operation(this.op, [a, b], this.isSpaced)\n    }\n  }\n\n  genCSS(context, output) {\n    this.operands[0].genCSS(context, output)\n    if (this.isSpaced) {\n      output.add(' ')\n    }\n    output.add(this.op)\n    if (this.isSpaced) {\n      output.add(' ')\n    }\n    this.operands[1].genCSS(context, output)\n  }\n}\n\nOperation.prototype.type = 'Operation'\n\nmodule.exports = Operation\n","const Node = require('./node')\n\nclass Variable extends Node {\n  constructor(name, index, currentFileInfo) {\n    super()\n    this.name = name\n    this.index = index\n    this.currentFileInfo = currentFileInfo || {}\n  }\n\n  eval(context) {\n    let variable\n    let name = this.name\n\n    if (name.indexOf('@@') === 0) {\n      name = `@${new Variable(\n        name.slice(1),\n        this.index,\n        this.currentFileInfo\n      ).eval(context).value}`\n    }\n\n    if (this.evaluating) {\n      throw {\n        type: 'Name',\n        message: `Recursive variable definition for ${name}`,\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n\n    this.evaluating = true\n    const current = this\n    variable = this.find(context.frames, frame => {\n      const v = frame.variable(name)\n      if (v) {\n        if (v.important) {\n          const importantScope =\n            context.importantScope[context.importantScope.length - 1]\n          importantScope.important = v.important\n        }\n        if (frame.root && context.simplify) {\n          // Wrap root\n          current.isRootVariable = true\n\n          //Add genCSS and toCSS\n          current.genCSS = function(context, output) {\n            if (context.frames) {\n              //In eval context\n              output.add(this.toCSS(context))\n            } else {\n              output.add(this.name)\n            }\n          }.bind(current)\n\n          current.toCSS = function() {\n            return `@{${this.name.slice(1)}}`\n          }.bind(current)\n\n          return current //don't eval root variables in simple mode\n        }\n        return v.value.eval(context)\n      }\n    })\n    if (variable) {\n      this.evaluating = false\n      return variable\n    } else {\n      throw {\n        type: 'Name',\n        message: `variable ${name} is undefined`,\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n  }\n\n  find(obj, fun) {\n    for (let i = 0, r; i < obj.length; i++) {\n      r = fun.call(obj, obj[i])\n      if (r) {\n        return r\n      }\n    }\n    return null\n  }\n}\n\nVariable.prototype.type = 'Variable'\nmodule.exports = Variable\n","const Node = require('./node')\n\nclass Attribute extends Node {\n  constructor(key, op, value) {\n    super()\n    this.key = key\n    this.op = op\n    this.value = value\n  }\n\n  eval(context) {\n    return new Attribute(\n      this.key.eval ? this.key.eval(context) : this.key,\n      this.op,\n      this.value && this.value.eval ? this.value.eval(context) : this.value\n    )\n  }\n\n  genCSS(context, output) {\n    output.add(this.toCSS(context))\n  }\n\n  toCSS(context) {\n    let value = this.key.toCSS ? this.key.toCSS(context) : this.key\n\n    if (this.op) {\n      value += this.op\n      value += this.value.toCSS ? this.value.toCSS(context) : this.value\n    }\n\n    return `[${value}]`\n  }\n}\n\nAttribute.prototype.type = 'Attribute'\nmodule.exports = Attribute\n","const Node = require('./node')\nconst Variable = require('./variable')\n\nclass JsEvalNode extends Node {\n  evaluateJavaScript(expression, context) {\n    let result\n    const that = this\n    const evalContext = {}\n\n    if (context.javascriptEnabled !== undefined && !context.javascriptEnabled) {\n      throw {\n        message: 'You are using JavaScript, which has been disabled.',\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n\n    expression = expression.replace(/@\\{([\\w-]+)\\}/g, (_, name) =>\n      that.jsify(\n        new Variable(`@${name}`, that.index, that.currentFileInfo).eval(context)\n      )\n    )\n\n    try {\n      expression = new Function(`return (${expression})`)\n    } catch (e) {\n      throw {\n        message: `JavaScript evaluation error: ${e.message} from \\`${expression}\\``,\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n\n    const variables = context.frames[0].variables()\n    for (const k in variables) {\n      if (variables.hasOwnProperty(k)) {\n        /*jshint loopfunc:true */\n        evalContext[k.slice(1)] = {\n          value: variables[k].value,\n          toJS() {\n            return this.value.eval(context).toCSS()\n          },\n        }\n      }\n    }\n\n    try {\n      result = expression.call(evalContext)\n    } catch (e) {\n      throw {\n        message: `JavaScript evaluation error: '${e.name}: ${e.message.replace(\n          /[\"]/g,\n          \"'\"\n        )}'`,\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n    return result\n  }\n\n  jsify(obj) {\n    if (Array.isArray(obj.value) && obj.value.length > 1) {\n      return `[${obj.value.map(v => v.toCSS()).join(', ')}]`\n    } else {\n      return obj.toCSS()\n    }\n  }\n}\n\nmodule.exports = JsEvalNode\n","const Node = require('./node')\nconst JsEvalNode = require('./js-eval-node')\nconst Variable = require('./variable')\n\nclass Quoted extends JsEvalNode {\n  constructor(str, content, escaped, index, currentFileInfo) {\n    super()\n    this.escaped = escaped == null ? true : escaped\n    this.value = content || ''\n    this.quote = str.charAt(0)\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n  }\n\n  genCSS(context, output) {\n    if (!this.escaped) {\n      output.add(this.quote, this.currentFileInfo, this.index)\n    }\n    output.add(this.value)\n    if (!this.escaped) {\n      output.add(this.quote)\n    }\n  }\n\n  containsVariables() {\n    return this.value.match(/(`([^`]+)`)|@\\{([\\w-]+)\\}/)\n  }\n\n  eval(context) {\n    const that = this\n    let value = this.value\n    const javascriptReplacement = (_, exp) =>\n      String(that.evaluateJavaScript(exp, context))\n    const interpolationReplacement = (_, name) => {\n      const v = new Variable(`@${name}`, that.index, that.currentFileInfo).eval(\n        context,\n        true\n      )\n      return v instanceof Quoted ? v.value : v.toCSS()\n    }\n    function iterativeReplace(value, regexp, replacementFnc) {\n      let evaluatedValue = value\n      do {\n        value = evaluatedValue\n        evaluatedValue = value.replace(regexp, replacementFnc)\n      } while (value !== evaluatedValue)\n      return evaluatedValue\n    }\n    value = iterativeReplace(value, /`([^`]+)`/g, javascriptReplacement)\n    value = iterativeReplace(value, /@\\{([\\w-]+)\\}/g, interpolationReplacement)\n    return new Quoted(\n      this.quote + value + this.quote,\n      value,\n      this.escaped,\n      this.index,\n      this.currentFileInfo\n    )\n  }\n\n  compare(other) {\n    // when comparing quoted strings allow the quote to differ\n    if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n      return Node.numericCompare(this.value, other.value)\n    } else {\n      return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined\n    }\n  }\n}\n\nQuoted.prototype.type = 'Quoted'\nmodule.exports = Quoted\n","const Node = require('./node')\nconst getDebugInfo = require('./debug-info')\n\nclass Comment extends Node {\n  constructor(value, isLineComment, index, currentFileInfo) {\n    super()\n    this.value = value\n    this.isLineComment = isLineComment\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.allowRoot = true\n  }\n\n  genCSS(context, output) {\n    if (this.debugInfo) {\n      output.add(getDebugInfo(context, this), this.currentFileInfo, this.index)\n    }\n    output.add(this.value)\n  }\n\n  isSilent(context) {\n    const isCompressed = context.compress && this.value[2] !== '!'\n    return this.isLineComment || isCompressed\n  }\n}\n\nComment.prototype.type = 'Comment'\nmodule.exports = Comment\n","const Node = require('./node')\nconst Paren = require('./paren')\nconst Comment = require('./comment')\n\nclass Expression extends Node {\n  constructor(value) {\n    super()\n    this.value = value\n    if (!value) {\n      throw new Error('Expression requires an array parameter')\n    }\n  }\n\n  accept(visitor) {\n    this.value = visitor.visitArray(this.value)\n  }\n\n  eval(context) {\n    let returnValue\n    const inParenthesis = this.parens && !this.parensInOp\n    let doubleParen = false\n    if (inParenthesis) {\n      context.inParenthesis()\n    }\n    if (this.value.length > 1) {\n      returnValue = new Expression(this.value.map(e => e.eval(context)))\n    } else if (this.value.length === 1) {\n      if (this.value[0].parens && !this.value[0].parensInOp) {\n        doubleParen = true\n      }\n      returnValue = this.value[0].eval(context)\n    } else {\n      returnValue = this\n    }\n    if (inParenthesis) {\n      context.outOfParenthesis()\n    }\n    if (this.parens && this.parensInOp && !context.isMathOn() && !doubleParen) {\n      returnValue = new Paren(returnValue)\n    }\n    return returnValue\n  }\n\n  genCSS(context, output) {\n    for (let i = 0; i < this.value.length; i++) {\n      this.value[i].genCSS(context, output)\n      if (i + 1 < this.value.length) {\n        output.add(' ')\n      }\n    }\n  }\n\n  throwAwayComments() {\n    this.value = this.value.filter(v => !(v instanceof Comment))\n  }\n}\n\nExpression.prototype.type = 'Expression'\nmodule.exports = Expression\n","const Expression = require('../tree/expression')\n\nclass functionCaller {\n  constructor(name, context, index, currentFileInfo) {\n    this.name = name.toLowerCase()\n    this.index = index\n    this.context = context\n    this.currentFileInfo = currentFileInfo\n\n    this.func = context.frames[0].functionRegistry.get(this.name)\n  }\n\n  isValid() {\n    return Boolean(this.func)\n  }\n\n  call(args) {\n    // This code is terrible and should be replaced as per this issue...\n    // https://github.com/less/less.js/issues/2477\n    if (Array.isArray(args)) {\n      args = args\n        .filter(item => {\n          if (item.type === 'Comment') {\n            return false\n          }\n          return true\n        })\n        .map(item => {\n          if (item.type === 'Expression') {\n            const subNodes = item.value.filter(item => {\n              if (item.type === 'Comment') {\n                return false\n              }\n              return true\n            })\n            if (subNodes.length === 1) {\n              return subNodes[0]\n            } else {\n              return new Expression(subNodes)\n            }\n          }\n          return item\n        })\n    }\n\n    return this.func(...args)\n  }\n}\n\nmodule.exports = functionCaller\n","const Node = require('./node')\nconst FunctionCaller = require('../functions/function-caller')\n\n//\n// A function call node.\n//\nclass Call extends Node {\n  constructor(name, args, index, currentFileInfo) {\n    super()\n    this.name = name\n    this.args = args\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n  }\n\n  accept(visitor) {\n    if (this.args) {\n      this.args = visitor.visitArray(this.args)\n    }\n  }\n\n  //\n  // When evaluating a function call,\n  // we either find the function in the functionRegistry,\n  // in which case we call it, passing the  evaluated arguments,\n  // if this returns null or we cannot find the function, we\n  // simply print it out as it appeared originally [2].\n  //\n  // The reason why we evaluate the arguments, is in the case where\n  // we try to pass a variable to a function, like: `saturate(@color)`.\n  // The function should receive the value, not the variable.\n  //\n  eval(context) {\n    const args = this.args.map(a => a.eval(context))\n    let result\n    const funcCaller = new FunctionCaller(\n      this.name,\n      context,\n      this.index,\n      this.currentFileInfo\n    )\n    //Check if any of root vars take place\n    for (const arg of args) {\n      if (arg.isRootVariable)\n        return new Call(this.name, args, this.index, this.currentFileInfo)\n    }\n\n    if (funcCaller.isValid()) {\n      try {\n        result = funcCaller.call(args)\n      } catch (e) {\n        throw {\n          type: e.type || 'Runtime',\n          message: `error evaluating function \\`${this.name}\\`${e.message\n            ? ': ' + e.message\n            : ''}`,\n          index: this.index,\n          filename: this.currentFileInfo.filename,\n        }\n      }\n\n      if (result != null) {\n        result.index = this.index\n        result.currentFileInfo = this.currentFileInfo\n        return result\n      }\n    }\n\n    return new Call(this.name, args, this.index, this.currentFileInfo)\n  }\n\n  genCSS(context, output) {\n    output.add(`${this.name}(`, this.currentFileInfo, this.index)\n\n    for (let i = 0; i < this.args.length; i++) {\n      this.args[i].genCSS(context, output)\n      if (i + 1 < this.args.length) {\n        output.add(', ')\n      }\n    }\n\n    output.add(')')\n  }\n}\n\nCall.prototype.type = 'Call'\nmodule.exports = Call\n","const Node = require('./node')\n\nclass URL extends Node {\n  constructor(val, index, currentFileInfo, isEvald) {\n    super()\n    this.value = val\n    this.currentFileInfo = currentFileInfo\n    this.index = index\n    this.isEvald = isEvald\n  }\n\n  accept(visitor) {\n    this.value = visitor.visit(this.value)\n  }\n\n  genCSS(context, output) {\n    output.add('url(')\n    this.value.genCSS(context, output)\n    output.add(')')\n  }\n\n  eval(context) {\n    const val = this.value.eval(context)\n    let rootpath\n\n    if (!this.isEvald) {\n      // Add the base path if the URL is relative\n      rootpath = this.currentFileInfo && this.currentFileInfo.rootpath\n      if (\n        rootpath &&\n        typeof val.value === 'string' &&\n        context.isPathRelative(val.value)\n      ) {\n        if (!val.quote) {\n          rootpath = rootpath.replace(/[\\(\\)'\"\\s]/g, match => `\\\\${match}`)\n        }\n        val.value = rootpath + val.value\n      }\n\n      val.value = context.normalizePath(val.value)\n\n      // Add url args if enabled\n      if (context.urlArgs) {\n        if (!val.value.match(/^\\s*data:/)) {\n          const delimiter = val.value.indexOf('?') === -1 ? '?' : '&'\n          const urlArgs = delimiter + context.urlArgs\n          if (val.value.indexOf('#') !== -1) {\n            val.value = val.value.replace('#', `${urlArgs}#`)\n          } else {\n            val.value += urlArgs\n          }\n        }\n      }\n    }\n\n    return new URL(val, this.index, this.currentFileInfo, true)\n  }\n}\n\nURL.prototype.type = 'Url'\nmodule.exports = URL\n","const Node = require('./node')\n\nclass Anonymous extends Node {\n  constructor(\n    value,\n    index,\n    currentFileInfo,\n    mapLines,\n    rulesetLike,\n    visibilityInfo\n  ) {\n    super()\n    this.value = value\n    this.index = index\n    this.mapLines = mapLines\n    this.currentFileInfo = currentFileInfo\n    this.rulesetLike = typeof rulesetLike === 'undefined' ? false : rulesetLike\n    this.allowRoot = true\n    this.copyVisibilityInfo(visibilityInfo)\n  }\n\n  eval() {\n    return new Anonymous(\n      this.value,\n      this.index,\n      this.currentFileInfo,\n      this.mapLines,\n      this.rulesetLike,\n      this.visibilityInfo()\n    )\n  }\n\n  compare(other) {\n    return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined\n  }\n\n  isRulesetLike() {\n    return this.rulesetLike\n  }\n\n  genCSS(context, output) {\n    output.add(this.value, this.currentFileInfo, this.index, this.mapLines)\n  }\n}\n\nAnonymous.prototype.type = 'Anonymous'\nmodule.exports = Anonymous\n","const Ruleset = require('./ruleset')\nconst Value = require('./value')\nconst Selector = require('./selector')\nconst Anonymous = require('./anonymous')\nconst Expression = require('./expression')\nconst Directive = require('./directive')\n\nclass Media extends Directive {\n  constructor(value, features, index, currentFileInfo, visibilityInfo) {\n    super()\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n\n    const selectors = new Selector(\n      [],\n      null,\n      null,\n      this.index,\n      this.currentFileInfo\n    ).createEmptySelectors()\n\n    this.features = new Value(features)\n    this.rules = [new Ruleset(selectors, value)]\n    this.rules[0].allowImports = true\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    if (this.features) {\n      this.features = visitor.visit(this.features)\n    }\n    if (this.rules) {\n      this.rules = visitor.visitArray(this.rules)\n    }\n  }\n\n  genCSS(context, output) {\n    output.add('@media ', this.currentFileInfo, this.index)\n    this.features.genCSS(context, output)\n    this.outputRuleset(context, output, this.rules)\n  }\n\n  eval(context) {\n    if (!context.mediaBlocks) {\n      context.mediaBlocks = []\n      context.mediaPath = []\n    }\n\n    const media = new Media(\n      null,\n      [],\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n    if (this.debugInfo) {\n      this.rules[0].debugInfo = this.debugInfo\n      media.debugInfo = this.debugInfo\n    }\n    let strictMathBypass = false\n    if (!context.strictMath) {\n      strictMathBypass = true\n      context.strictMath = true\n    }\n    try {\n      media.features = this.features.eval(context)\n    } finally {\n      if (strictMathBypass) {\n        context.strictMath = false\n      }\n    }\n\n    context.mediaPath.push(media)\n    context.mediaBlocks.push(media)\n\n    this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit()\n    context.frames.unshift(this.rules[0])\n    media.rules = [this.rules[0].eval(context)]\n    context.frames.shift()\n\n    context.mediaPath.pop()\n\n    return context.mediaPath.length === 0\n      ? media.evalTop(context)\n      : media.evalNested(context)\n  }\n\n  evalTop(context) {\n    let result = this\n\n    // Render all dependent Media blocks.\n    if (context.mediaBlocks.length > 1) {\n      const selectors = new Selector(\n        [],\n        null,\n        null,\n        this.index,\n        this.currentFileInfo\n      ).createEmptySelectors()\n      result = new Ruleset(selectors, context.mediaBlocks)\n      result.multiMedia = true\n      result.copyVisibilityInfo(this.visibilityInfo())\n    }\n\n    delete context.mediaBlocks\n    delete context.mediaPath\n\n    return result\n  }\n\n  evalNested(context) {\n    let i\n    let value\n    const path = context.mediaPath.concat([this])\n\n    // Extract the media-query conditions separated with `,` (OR).\n    for (i = 0; i < path.length; i++) {\n      value =\n        path[i].features instanceof Value\n          ? path[i].features.value\n          : path[i].features\n      path[i] = Array.isArray(value) ? value : [value]\n    }\n\n    // Trace all permutations to generate the resulting media-query.\n    //\n    // (a, b and c) with nested (d, e) ->\n    //    a and d\n    //    a and e\n    //    b and c and d\n    //    b and c and e\n    this.features = new Value(\n      this.permute(path).map(path => {\n        path = path.map(\n          fragment => (fragment.toCSS ? fragment : new Anonymous(fragment))\n        )\n\n        for (i = path.length - 1; i > 0; i--) {\n          path.splice(i, 0, new Anonymous('and'))\n        }\n\n        return new Expression(path)\n      })\n    )\n\n    // Fake a tree-node that doesn't output anything.\n    return new Ruleset([], [])\n  }\n\n  permute(arr) {\n    if (arr.length === 0) {\n      return []\n    } else if (arr.length === 1) {\n      return arr[0]\n    } else {\n      const result = []\n      const rest = this.permute(arr.slice(1))\n      for (let i = 0; i < rest.length; i++) {\n        for (let j = 0; j < arr[0].length; j++) {\n          result.push([arr[0][j]].concat(rest[i]))\n        }\n      }\n      return result\n    }\n  }\n\n  bubbleSelectors(selectors) {\n    if (!selectors) {\n      return\n    }\n    this.rules = [new Ruleset(selectors.slice(0), [this.rules[0]])]\n  }\n}\n\nMedia.prototype.type = 'Media'\nMedia.prototype.isRulesetLike = true\nmodule.exports = Media\n","const Node = require('./node')\nconst Media = require('./media')\nconst URL = require('./url')\nconst Quoted = require('./quoted')\nconst Ruleset = require('./ruleset')\nconst Anonymous = require('./anonymous')\n\n//\n// CSS @import node\n//\n// The general strategy here is that we don't want to wait\n// for the parsing to be completed, before we start importing\n// the file. That's because in the context of a browser,\n// most of the time will be spent waiting for the server to respond.\n//\n// On creation, we push the import path to our import queue, though\n// `import,push`, we also pass it a callback, which it'll call once\n// the file has been fetched, and parsed.\n//\nclass Import extends Node {\n  constructor(path, features, options, index, currentFileInfo, visibilityInfo) {\n    super()\n    this.options = options\n    this.index = index\n    this.path = path\n    this.features = features\n    this.currentFileInfo = currentFileInfo\n    this.allowRoot = true\n\n    if (this.options.less !== undefined || this.options.inline) {\n      this.css = !this.options.less || this.options.inline\n    } else {\n      const pathValue = this.getPath()\n      if (pathValue && /[#\\.\\&\\?\\/]css([\\?;].*)?$/.test(pathValue)) {\n        this.css = true\n      }\n    }\n    this.copyVisibilityInfo(visibilityInfo)\n  }\n\n  accept(visitor) {\n    if (this.features) {\n      this.features = visitor.visit(this.features)\n    }\n    this.path = visitor.visit(this.path)\n    if (!this.options.plugin && !this.options.inline && this.root) {\n      this.root = visitor.visit(this.root)\n    }\n  }\n\n  genCSS(context, output) {\n    if (this.css && this.path.currentFileInfo.reference === undefined) {\n      output.add('@import ', this.currentFileInfo, this.index)\n      this.path.genCSS(context, output)\n      if (this.features) {\n        output.add(' ')\n        this.features.genCSS(context, output)\n      }\n      output.add(';')\n    }\n  }\n\n  getPath() {\n    return this.path instanceof URL ? this.path.value.value : this.path.value\n  }\n\n  isVariableImport() {\n    let path = this.path\n    if (path instanceof URL) {\n      path = path.value\n    }\n    if (path instanceof Quoted) {\n      return path.containsVariables()\n    }\n\n    return true\n  }\n\n  evalForImport(context) {\n    let path = this.path\n\n    if (path instanceof URL) {\n      path = path.value\n    }\n\n    return new Import(\n      path.eval(context),\n      this.features,\n      this.options,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  evalPath(context) {\n    const path = this.path.eval(context)\n    const rootpath = this.currentFileInfo && this.currentFileInfo.rootpath\n\n    if (!(path instanceof URL)) {\n      if (rootpath) {\n        const pathValue = path.value\n        // Add the base path if the import is relative\n        if (pathValue && context.isPathRelative(pathValue)) {\n          path.value = rootpath + pathValue\n        }\n      }\n      path.value = context.normalizePath(path.value)\n    }\n\n    return path\n  }\n\n  eval(context) {\n    const result = this.doEval(context)\n    if (this.options.reference || this.blocksVisibility()) {\n      if (result.length || result.length === 0) {\n        result.forEach(node => {\n          node.addVisibilityBlock()\n        })\n      } else {\n        result.addVisibilityBlock()\n      }\n    }\n    return result\n  }\n\n  doEval(context) {\n    let ruleset\n    let registry\n    const features = this.features && this.features.eval(context)\n\n    if (this.options.plugin) {\n      registry = context.frames[0] && context.frames[0].functionRegistry\n      if (registry && this.root && this.root.functions) {\n        registry.addMultiple(this.root.functions)\n      }\n      return []\n    }\n\n    if (this.skip) {\n      if (typeof this.skip === 'function') {\n        this.skip = this.skip()\n      }\n      if (this.skip) {\n        return []\n      }\n    }\n    if (this.options.inline) {\n      const contents = new Anonymous(\n        this.root,\n        0,\n        {\n          filename: this.importedFilename,\n          reference:\n            this.path.currentFileInfo && this.path.currentFileInfo.reference,\n        },\n        true,\n        true\n      )\n\n      return this.features\n        ? new Media([contents], this.features.value)\n        : [contents]\n    } else if (this.css) {\n      const newImport = new Import(\n        this.evalPath(context),\n        features,\n        this.options,\n        this.index\n      )\n      if (!newImport.css && this.error) {\n        throw this.error\n      }\n      return newImport\n    } else {\n      ruleset = new Ruleset(null, this.root.rules.slice(0))\n      ruleset.evalImports(context)\n\n      return this.features\n        ? new Media(ruleset.rules, this.features.value)\n        : ruleset.rules\n    }\n  }\n}\n\nImport.prototype.type = 'Import'\nmodule.exports = Import\n","const Selector = require('./selector')\nconst Element = require('./element')\nconst Ruleset = require('./ruleset')\nconst Rule = require('./rule')\nconst Expression = require('./expression')\nconst contexts = require('../contexts')\n\nclass Definition extends Ruleset {\n  constructor(\n    name,\n    params,\n    rules,\n    condition,\n    variadic,\n    frames,\n    visibilityInfo\n  ) {\n    super()\n    this.name = name\n    this.selectors = [\n      new Selector([new Element(null, name, this.index, this.currentFileInfo)]),\n    ]\n    this.params = params\n    this.condition = condition\n    this.variadic = variadic\n    this.arity = params.length\n    this.rules = rules\n    this._lookups = {}\n    const optionalParameters = []\n    this.required = params.reduce((count, p) => {\n      if (!p.name || (p.name && !p.value)) {\n        return count + 1\n      } else {\n        optionalParameters.push(p.name)\n        return count\n      }\n    }, 0)\n    this.optionalParameters = optionalParameters\n    this.frames = frames\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    if (this.params && this.params.length) {\n      this.params = visitor.visitArray(this.params)\n    }\n    this.rules = visitor.visitArray(this.rules)\n    if (this.condition) {\n      this.condition = visitor.visit(this.condition)\n    }\n  }\n\n  evalParams(context, mixinEnv, args, evaldArguments) {\n    /*jshint boss:true */\n    const frame = new Ruleset(null, null)\n\n    let varargs\n    let arg\n    const params = this.params.slice(0)\n    let i\n    let j\n    let val\n    let name\n    let isNamedFound\n    let argIndex\n    let argsLength = 0\n\n    if (\n      mixinEnv.frames &&\n      mixinEnv.frames[0] &&\n      mixinEnv.frames[0].functionRegistry\n    ) {\n      frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit()\n    }\n    mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames))\n\n    if (args) {\n      args = args.slice(0)\n      argsLength = args.length\n\n      for (i = 0; i < argsLength; i++) {\n        arg = args[i]\n        if ((name = arg && arg.name)) {\n          isNamedFound = false\n          for (j = 0; j < params.length; j++) {\n            if (!evaldArguments[j] && name === params[j].name) {\n              evaldArguments[j] = arg.value.eval(context)\n              frame.prependRule(new Rule(name, arg.value.eval(context)))\n              isNamedFound = true\n              break\n            }\n          }\n          if (isNamedFound) {\n            args.splice(i, 1)\n            i--\n            continue\n          } else {\n            throw {\n              type: 'Runtime',\n              message: `Named argument for ${this.name} ${args[i]\n                .name} not found`,\n            }\n          }\n        }\n      }\n    }\n    argIndex = 0\n    for (i = 0; i < params.length; i++) {\n      if (evaldArguments[i]) {\n        continue\n      }\n\n      arg = args && args[argIndex]\n\n      if ((name = params[i].name)) {\n        if (params[i].variadic) {\n          varargs = []\n          for (j = argIndex; j < argsLength; j++) {\n            varargs.push(args[j].value.eval(context))\n          }\n          frame.prependRule(\n            new Rule(name, new Expression(varargs).eval(context))\n          )\n        } else {\n          val = arg && arg.value\n          if (val) {\n            val = val.eval(context)\n          } else if (params[i].value) {\n            val = params[i].value.eval(mixinEnv)\n            frame.resetCache()\n          } else {\n            throw {\n              type: 'Runtime',\n              message: `wrong number of arguments for ${this\n                .name} (${argsLength} for ${this.arity})`,\n            }\n          }\n\n          frame.prependRule(new Rule(name, val))\n          evaldArguments[i] = val\n        }\n      }\n\n      if (params[i].variadic && args) {\n        for (j = argIndex; j < argsLength; j++) {\n          evaldArguments[j] = args[j].value.eval(context)\n        }\n      }\n      argIndex++\n    }\n\n    return frame\n  }\n\n  makeImportant() {\n    const rules = !this.rules\n      ? this.rules\n      : this.rules.map(r => {\n          if (r.makeImportant) {\n            return r.makeImportant(true)\n          } else {\n            return r\n          }\n        })\n    const result = new Definition(\n      this.name,\n      this.params,\n      rules,\n      this.condition,\n      this.variadic,\n      this.frames\n    )\n    return result\n  }\n\n  eval(context) {\n    return new Definition(\n      this.name,\n      this.params,\n      this.rules,\n      this.condition,\n      this.variadic,\n      this.frames || context.frames.slice(0)\n    )\n  }\n\n  evalCall(context, args, important) {\n    const _arguments = []\n    const mixinFrames = this.frames\n      ? this.frames.concat(context.frames)\n      : context.frames\n    const frame = this.evalParams(\n      context,\n      new contexts.Eval(context, mixinFrames),\n      args,\n      _arguments\n    )\n    let rules\n    let ruleset\n\n    frame.prependRule(\n      new Rule('@arguments', new Expression(_arguments).eval(context))\n    )\n\n    rules = this.rules.slice(0)\n\n    ruleset = new Ruleset(null, rules)\n    ruleset.originalRuleset = this\n    ruleset = ruleset.eval(\n      new contexts.Eval(context, [this, frame].concat(mixinFrames))\n    )\n    if (important) {\n      ruleset = ruleset.makeImportant()\n    }\n    return ruleset\n  }\n\n  matchCondition(args, context) {\n    if (\n      this.condition &&\n      !this.condition.eval(\n        new contexts.Eval(\n          context,\n          [\n            this.evalParams(\n              context /* the parameter variables*/,\n              new contexts.Eval(\n                context,\n                this.frames\n                  ? this.frames.concat(context.frames)\n                  : context.frames\n              ),\n              args,\n              []\n            ),\n          ]\n            .concat(this.frames || []) // the parent namespace/mixin frames\n            .concat(context.frames)\n        )\n      )\n    ) {\n      // the current environment frames\n      return false\n    }\n    return true\n  }\n\n  matchArgs(args, context) {\n    const allArgsCnt = (args && args.length) || 0\n    let len\n    const optionalParameters = this.optionalParameters\n    const requiredArgsCnt = !args\n      ? 0\n      : args.reduce((count, p) => {\n          if (optionalParameters.indexOf(p.name) < 0) {\n            return count + 1\n          } else {\n            return count\n          }\n        }, 0)\n\n    if (!this.variadic) {\n      if (requiredArgsCnt < this.required) {\n        return false\n      }\n      if (allArgsCnt > this.params.length) {\n        return false\n      }\n    } else {\n      if (requiredArgsCnt < this.required - 1) {\n        return false\n      }\n    }\n\n    // check patterns\n    len = Math.min(requiredArgsCnt, this.arity)\n\n    for (let i = 0; i < len; i++) {\n      if (!this.params[i].name && !this.params[i].variadic) {\n        if (\n          args[i].value.eval(context).toCSS() !=\n          this.params[i].value.eval(context).toCSS()\n        ) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n}\n\nDefinition.prototype.type = 'MixinDefinition'\nDefinition.prototype.evalFirst = true\nmodule.exports = Definition\n","const Node = require('./node')\nconst Selector = require('./selector')\nconst MixinDefinition = require('./mixin-definition')\nconst defaultFunc = require('../functions/default')\n\nclass MixinCall extends Node {\n  constructor(elements, args, index, currentFileInfo, important) {\n    super()\n    this.selector = new Selector(elements)\n    this.arguments = args || []\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.important = important\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    if (this.selector) {\n      this.selector = visitor.visit(this.selector)\n    }\n    if (this.arguments.length) {\n      this.arguments = visitor.visitArray(this.arguments)\n    }\n  }\n\n  eval(context) {\n    let mixins\n    let mixin\n    let mixinPath\n    const args = []\n    let arg\n    let argValue\n    const rules = []\n    let match = false\n    let i\n    let m\n    let f\n    let isRecursive\n    let isOneFound\n    const candidates = []\n    let candidate\n    const conditionResult = []\n    let defaultResult\n    const defFalseEitherCase = -1\n    const defNone = 0\n    const defTrue = 1\n    const defFalse = 2\n    let count\n    let originalRuleset\n    let noArgumentsFilter\n\n    function calcDefGroup(mixin, mixinPath) {\n      let f\n      let p\n      let namespace\n\n      for (f = 0; f < 2; f++) {\n        conditionResult[f] = true\n        defaultFunc.value(f)\n        for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n          namespace = mixinPath[p]\n          if (namespace.matchCondition) {\n            conditionResult[f] =\n              conditionResult[f] && namespace.matchCondition(null, context)\n          }\n        }\n        if (mixin.matchCondition) {\n          conditionResult[f] =\n            conditionResult[f] && mixin.matchCondition(args, context)\n        }\n      }\n      if (conditionResult[0] || conditionResult[1]) {\n        if (conditionResult[0] != conditionResult[1]) {\n          return conditionResult[1] ? defTrue : defFalse\n        }\n\n        return defNone\n      }\n      return defFalseEitherCase\n    }\n\n    for (i = 0; i < this.arguments.length; i++) {\n      arg = this.arguments[i]\n      argValue = arg.value.eval(context)\n      if (arg.expand && Array.isArray(argValue.value)) {\n        argValue = argValue.value\n        for (m = 0; m < argValue.length; m++) {\n          args.push({ value: argValue[m] })\n        }\n      } else {\n        args.push({ name: arg.name, value: argValue })\n      }\n    }\n\n    noArgumentsFilter = rule => rule.matchArgs(null, context)\n\n    for (i = 0; i < context.frames.length; i++) {\n      if (\n        (mixins = context.frames[i].find(\n          this.selector,\n          null,\n          noArgumentsFilter\n        )).length > 0\n      ) {\n        isOneFound = true\n\n        // To make `default()` function independent of definition order we have two \"subpasses\" here.\n        // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n        // and build candidate list with corresponding flags. Then, when we know all possible matches,\n        // we make a final decision.\n\n        for (m = 0; m < mixins.length; m++) {\n          mixin = mixins[m].rule\n          mixinPath = mixins[m].path\n          isRecursive = false\n          for (f = 0; f < context.frames.length; f++) {\n            if (\n              !(mixin instanceof MixinDefinition) &&\n              mixin === (context.frames[f].originalRuleset || context.frames[f])\n            ) {\n              isRecursive = true\n              break\n            }\n          }\n          if (isRecursive) {\n            continue\n          }\n\n          if (mixin.matchArgs(args, context)) {\n            candidate = { mixin, group: calcDefGroup(mixin, mixinPath) }\n\n            if (candidate.group !== defFalseEitherCase) {\n              candidates.push(candidate)\n            }\n\n            match = true\n          }\n        }\n\n        defaultFunc.reset()\n\n        count = [0, 0, 0]\n        for (m = 0; m < candidates.length; m++) {\n          count[candidates[m].group]++\n        }\n\n        if (count[defNone] > 0) {\n          defaultResult = defFalse\n        } else {\n          defaultResult = defTrue\n          if (count[defTrue] + count[defFalse] > 1) {\n            throw {\n              type: 'Runtime',\n              message: `Ambiguous use of \\`default()\\` found when matching for \\`${this.format(\n                args\n              )}\\``,\n              index: this.index,\n              filename: this.currentFileInfo.filename,\n            }\n          }\n        }\n\n        for (m = 0; m < candidates.length; m++) {\n          candidate = candidates[m].group\n          if (candidate === defNone || candidate === defaultResult) {\n            try {\n              mixin = candidates[m].mixin\n              if (!(mixin instanceof MixinDefinition)) {\n                originalRuleset = mixin.originalRuleset || mixin\n                mixin = new MixinDefinition(\n                  '',\n                  [],\n                  mixin.rules,\n                  null,\n                  false,\n                  null,\n                  originalRuleset.visibilityInfo()\n                )\n                mixin.originalRuleset = originalRuleset\n              }\n              const newRules = mixin.evalCall(context, args, this.important)\n                .rules\n              this._setVisibilityToReplacement(newRules)\n              Array.prototype.push.apply(rules, newRules)\n            } catch (e) {\n              throw {\n                message: e.message,\n                index: this.index,\n                filename: this.currentFileInfo.filename,\n                stack: e.stack,\n              }\n            }\n          }\n        }\n\n        if (match) {\n          return rules\n        }\n      }\n    }\n    if (isOneFound) {\n      throw {\n        type: 'Runtime',\n        message: `No matching definition was found for \\`${this.format(\n          args\n        )}\\``,\n        index: this.index,\n        filename: this.currentFileInfo.filename,\n      }\n    } else {\n      throw {\n        type: 'Name',\n        message: `${this.selector.toCSS().trim()} is undefined`,\n        index: this.index,\n        filename: this.currentFileInfo.filename,\n      }\n    }\n  }\n\n  _setVisibilityToReplacement(replacement) {\n    let i\n    let rule\n    if (this.blocksVisibility()) {\n      for (i = 0; i < replacement.length; i++) {\n        rule = replacement[i]\n        rule.addVisibilityBlock()\n      }\n    }\n  }\n\n  format(args) {\n    return `${this.selector.toCSS().trim()}(${args\n      ? args\n          .map(a => {\n            let argValue = ''\n            if (a.name) {\n              argValue += a.name + ':'\n            }\n            if (a.value.toCSS) {\n              argValue += a.value.toCSS()\n            } else {\n              argValue += '???'\n            }\n            return argValue\n          })\n          .join(', ')\n      : ''})`\n  }\n}\n\nMixinCall.prototype.type = 'MixinCall'\nmodule.exports = MixinCall\n","const JsEvalNode = require('./js-eval-node')\nconst Dimension = require('./dimension')\nconst Quoted = require('./quoted')\nconst Anonymous = require('./anonymous')\n\nclass JavaScript extends JsEvalNode {\n  constructor(string, escaped, index, currentFileInfo) {\n    super()\n    this.escaped = escaped\n    this.expression = string\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n  }\n\n  eval(context) {\n    const result = this.evaluateJavaScript(this.expression, context)\n\n    if (typeof result === 'number') {\n      return new Dimension(result)\n    } else if (typeof result === 'string') {\n      return new Quoted(`\"${result}\"`, result, this.escaped, this.index)\n    } else if (Array.isArray(result)) {\n      return new Anonymous(result.join(', '))\n    } else {\n      return new Anonymous(result)\n    }\n  }\n}\n\nJavaScript.prototype.type = 'JavaScript'\n\nmodule.exports = JavaScript\n","const Node = require('./node')\n\nclass Assignment extends Node {\n  constructor(key, val) {\n    super()\n    this.key = key\n    this.value = val\n  }\n\n  accept(visitor) {\n    this.value = visitor.visit(this.value)\n  }\n\n  eval(context) {\n    if (this.value.eval) {\n      return new Assignment(this.key, this.value.eval(context))\n    }\n    return this\n  }\n\n  genCSS(context, output) {\n    output.add(`${this.key}=`)\n    if (this.value.genCSS) {\n      this.value.genCSS(context, output)\n    } else {\n      output.add(this.value)\n    }\n  }\n}\n\nAssignment.prototype.type = 'Assignment'\nmodule.exports = Assignment\n","const Node = require('./node')\n\nclass Condition extends Node {\n  constructor(op, l, r, i, negate) {\n    super()\n    this.op = op.trim()\n    this.lvalue = l\n    this.rvalue = r\n    this.index = i\n    this.negate = negate\n  }\n\n  accept(visitor) {\n    this.lvalue = visitor.visit(this.lvalue)\n    this.rvalue = visitor.visit(this.rvalue)\n  }\n\n  eval(context) {\n    const result = ((op, a, b) => {\n      switch (op) {\n        case 'and':\n          return a && b\n        case 'or':\n          return a || b\n        default:\n          switch (Node.compare(a, b)) {\n            case -1:\n              return op === '<' || op === '=<' || op === '<='\n            case 0:\n              return op === '=' || op === '>=' || op === '=<' || op === '<='\n            case 1:\n              return op === '>' || op === '>='\n            default:\n              return false\n          }\n      }\n    })(this.op, this.lvalue.eval(context), this.rvalue.eval(context))\n\n    return this.negate ? !result : result\n  }\n}\n\nCondition.prototype.type = 'Condition'\nmodule.exports = Condition\n","const Node = require('./node')\n\nclass UnicodeDescriptor extends Node {\n  constructor(value) {\n    super()\n    this.value = value\n  }\n}\n\nUnicodeDescriptor.prototype.type = 'UnicodeDescriptor'\n\nmodule.exports = UnicodeDescriptor\n","const Node = require('./node')\nconst Operation = require('./operation')\nconst Dimension = require('./dimension')\n\nclass Negative extends Node {\n  constructor(node) {\n    super()\n    this.value = node\n  }\n\n  genCSS(context, output) {\n    output.add('-')\n    this.value.genCSS(context, output)\n  }\n\n  eval(context) {\n    if (context.isMathOn()) {\n      return new Operation('*', [new Dimension(-1), this.value]).eval(context)\n    }\n    return new Negative(this.value.eval(context))\n  }\n}\n\nNegative.prototype.type = 'Negative'\nmodule.exports = Negative\n","const Node = require('./node')\nconst Selector = require('./selector')\n\nclass Extend extends Node {\n  constructor(selector, option, index, currentFileInfo, visibilityInfo) {\n    super()\n    this.selector = selector\n    this.option = option\n    this.index = index\n    this.object_id = Extend.next_id++\n    this.parent_ids = [this.object_id]\n    this.currentFileInfo = currentFileInfo || {}\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n\n    switch (option) {\n      case 'all':\n        this.allowBefore = true\n        this.allowAfter = true\n        break\n      default:\n        this.allowBefore = false\n        this.allowAfter = false\n        break\n    }\n  }\n\n  accept(visitor) {\n    this.selector = visitor.visit(this.selector)\n  }\n\n  eval(context) {\n    return new Extend(\n      this.selector.eval(context),\n      this.option,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  clone(context) {\n    return new Extend(\n      this.selector,\n      this.option,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  //it concatenates (joins) all selectors in selector array\n  findSelfSelectors(selectors) {\n    let selfElements = []\n    let i\n    let selectorElements\n\n    for (i = 0; i < selectors.length; i++) {\n      selectorElements = selectors[i].elements\n      // duplicate the logic in genCSS function inside the selector node.\n      // future TODO - move both logics into the selector joiner visitor\n      if (\n        i > 0 &&\n        selectorElements.length &&\n        selectorElements[0].combinator.value === ''\n      ) {\n        selectorElements[0].combinator.value = ' '\n      }\n      selfElements = selfElements.concat(selectors[i].elements)\n    }\n\n    this.selfSelectors = [new Selector(selfElements)]\n    this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo())\n  }\n}\n\nExtend.next_id = 0\n\nExtend.prototype.type = 'Extend'\nmodule.exports = Extend\n","const Node = require('./node')\nconst Variable = require('./variable')\n\nclass RulesetCall extends Node {\n  constructor(variable) {\n    super()\n    this.variable = variable\n    this.allowRoot = true\n  }\n\n  eval(context) {\n    const detachedRuleset = new Variable(this.variable).eval(context)\n    return detachedRuleset.callEval(context)\n  }\n}\n\nRulesetCall.prototype.type = 'RulesetCall'\nmodule.exports = RulesetCall\n","const tree = {}\n\ntree.Node = require('./node')\ntree.Alpha = require('./alpha')\ntree.Color = require('./color')\ntree.Directive = require('./directive')\ntree.DetachedRuleset = require('./detached-ruleset')\ntree.Operation = require('./operation')\ntree.Dimension = require('./dimension')\ntree.Unit = require('./unit')\ntree.Keyword = require('./keyword')\ntree.Variable = require('./variable')\ntree.Ruleset = require('./ruleset')\ntree.Element = require('./element')\ntree.Attribute = require('./attribute')\ntree.Combinator = require('./combinator')\ntree.Selector = require('./selector')\ntree.Quoted = require('./quoted')\ntree.Expression = require('./expression')\ntree.Rule = require('./rule')\ntree.Call = require('./call')\ntree.URL = require('./url')\ntree.Import = require('./import')\ntree.mixin = {\n  Call: require('./mixin-call'),\n  Definition: require('./mixin-definition'),\n}\ntree.Comment = require('./comment')\ntree.Anonymous = require('./anonymous')\ntree.Value = require('./value')\ntree.JavaScript = require('./javascript')\ntree.Assignment = require('./assignment')\ntree.Condition = require('./condition')\ntree.Paren = require('./paren')\ntree.Media = require('./media')\ntree.UnicodeDescriptor = require('./unicode-descriptor')\ntree.Negative = require('./negative')\ntree.Extend = require('./extend')\ntree.RulesetCall = require('./ruleset-call')\n\nmodule.exports = tree\n","class ImportSequencer {\n  constructor(onSequencerEmpty) {\n    this.imports = []\n    this.variableImports = []\n    this._onSequencerEmpty = onSequencerEmpty\n    this._currentDepth = 0\n  }\n\n  addImport(callback) {\n    const importSequencer = this\n\n    const importItem = {\n      callback,\n      args: null,\n      isReady: false,\n    }\n\n    this.imports.push(importItem)\n    return function(...args) {\n      importItem.args = Array.prototype.slice.call(args, 0)\n      importItem.isReady = true\n      importSequencer.tryRun()\n    }\n  }\n\n  addVariableImport(callback) {\n    this.variableImports.push(callback)\n  }\n\n  tryRun() {\n    this._currentDepth++\n    try {\n      while (true) {\n        while (this.imports.length > 0) {\n          const importItem = this.imports[0]\n          if (!importItem.isReady) {\n            return\n          }\n          this.imports = this.imports.slice(1)\n          importItem.callback.apply(null, importItem.args)\n        }\n        if (this.variableImports.length === 0) {\n          break\n        }\n        const variableImport = this.variableImports[0]\n        this.variableImports = this.variableImports.slice(1)\n        variableImport()\n      }\n    } finally {\n      this._currentDepth--\n    }\n    if (this._currentDepth === 0 && this._onSequencerEmpty) {\n      this._onSequencerEmpty()\n    }\n  }\n}\n\nmodule.exports = ImportSequencer\n","const contexts = require('../contexts')\nconst Visitor = require('./visitor')\nconst ImportSequencer = require('./import-sequencer')\n\nconst ImportVisitor = function(importer, finish) {\n  this._visitor = new Visitor(this)\n  this._importer = importer\n  this._finish = finish\n  this.context = new contexts.Eval()\n  this.importCount = 0\n  this.onceFileDetectionMap = {}\n  this.recursionDetector = {}\n  this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this))\n}\n\nImportVisitor.prototype = {\n  isReplacing: false,\n  run(root) {\n    try {\n      // process the contents\n      this._visitor.visit(root)\n    } catch (e) {\n      this.error = e\n    }\n\n    this.isFinished = true\n    this._sequencer.tryRun()\n  },\n  _onSequencerEmpty() {\n    if (!this.isFinished) {\n      return\n    }\n    this._finish(this.error)\n  },\n  visitImport(importNode, visitArgs) {\n    const inlineCSS = importNode.options.inline\n\n    if (!importNode.css || inlineCSS) {\n      const context = new contexts.Eval(\n        this.context,\n        this.context.frames.slice(0)\n      )\n      const importParent = context.frames[0]\n\n      this.importCount++\n      if (importNode.isVariableImport()) {\n        this._sequencer.addVariableImport(\n          this.processImportNode.bind(this, importNode, context, importParent)\n        )\n      } else {\n        this.processImportNode(importNode, context, importParent)\n      }\n    }\n    visitArgs.visitDeeper = false\n  },\n  processImportNode(importNode, context, importParent) {\n    let evaldImportNode\n    const inlineCSS = importNode.options.inline\n\n    try {\n      evaldImportNode = importNode.evalForImport(context)\n    } catch (e) {\n      if (!e.filename) {\n        e.index = importNode.index\n        e.filename = importNode.currentFileInfo.filename\n      }\n      // attempt to eval properly and treat as css\n      importNode.css = true\n      // if that fails, this error will be thrown\n      importNode.error = e\n    }\n\n    if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n      if (evaldImportNode.options.multiple) {\n        context.importMultiple = true\n      }\n\n      // try appending if we haven't determined if it is css or not\n      const tryAppendLessExtension = evaldImportNode.css === undefined\n\n      for (let i = 0; i < importParent.rules.length; i++) {\n        if (importParent.rules[i] === importNode) {\n          importParent.rules[i] = evaldImportNode\n          break\n        }\n      }\n\n      const onImported = this.onImported.bind(this, evaldImportNode, context)\n      const sequencedOnImported = this._sequencer.addImport(onImported)\n\n      this._importer.push(\n        evaldImportNode.getPath(),\n        tryAppendLessExtension,\n        evaldImportNode.currentFileInfo,\n        evaldImportNode.options,\n        sequencedOnImported\n      )\n    } else {\n      this.importCount--\n      if (this.isFinished) {\n        this._sequencer.tryRun()\n      }\n    }\n  },\n  onImported(importNode, context, e, root, importedAtRoot, fullPath) {\n    if (e) {\n      if (!e.filename) {\n        e.index = importNode.index\n        e.filename = importNode.currentFileInfo.filename\n      }\n      this.error = e\n    }\n\n    const importVisitor = this\n    const inlineCSS = importNode.options.inline\n    const isPlugin = importNode.options.plugin\n    const isOptional = importNode.options.optional\n    const duplicateImport =\n      importedAtRoot || fullPath in importVisitor.recursionDetector\n\n    if (!context.importMultiple) {\n      if (duplicateImport) {\n        importNode.skip = true\n      } else {\n        importNode.skip = () => {\n          if (fullPath in importVisitor.onceFileDetectionMap) {\n            return true\n          }\n          importVisitor.onceFileDetectionMap[fullPath] = true\n          return false\n        }\n      }\n    }\n\n    if (!fullPath && isOptional) {\n      importNode.skip = true\n    }\n\n    if (root) {\n      importNode.root = root\n      importNode.importedFilename = fullPath\n\n      if (\n        !inlineCSS &&\n        !isPlugin &&\n        (context.importMultiple || !duplicateImport)\n      ) {\n        importVisitor.recursionDetector[fullPath] = true\n\n        const oldContext = this.context\n        this.context = context\n        try {\n          this._visitor.visit(root)\n        } catch (e) {\n          this.error = e\n        }\n        this.context = oldContext\n      }\n    }\n\n    importVisitor.importCount--\n\n    if (importVisitor.isFinished) {\n      importVisitor._sequencer.tryRun()\n    }\n  },\n  visitRule(ruleNode, visitArgs) {\n    if (ruleNode.value.type === 'DetachedRuleset') {\n      this.context.frames.unshift(ruleNode)\n    } else {\n      visitArgs.visitDeeper = false\n    }\n  },\n  visitRuleOut(ruleNode) {\n    if (ruleNode.value.type === 'DetachedRuleset') {\n      this.context.frames.shift()\n    }\n  },\n  visitDirective(directiveNode, visitArgs) {\n    this.context.frames.unshift(directiveNode)\n  },\n  visitDirectiveOut(directiveNode) {\n    this.context.frames.shift()\n  },\n  visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n    this.context.frames.unshift(mixinDefinitionNode)\n  },\n  visitMixinDefinitionOut(mixinDefinitionNode) {\n    this.context.frames.shift()\n  },\n  visitRuleset(rulesetNode, visitArgs) {\n    this.context.frames.unshift(rulesetNode)\n  },\n  visitRulesetOut(rulesetNode) {\n    this.context.frames.shift()\n  },\n  visitMedia(mediaNode, visitArgs) {\n    this.context.frames.unshift(mediaNode.rules[0])\n  },\n  visitMediaOut(mediaNode) {\n    this.context.frames.shift()\n  },\n}\nmodule.exports = ImportVisitor\n","class SetTreeVisibilityVisitor {\n  constructor(visible) {\n    this.visible = visible\n  }\n\n  run(root) {\n    this.visit(root)\n  }\n\n  visitArray(nodes) {\n    if (!nodes) {\n      return nodes\n    }\n\n    const cnt = nodes.length\n    let i\n    for (i = 0; i < cnt; i++) {\n      this.visit(nodes[i])\n    }\n    return nodes\n  }\n\n  visit(node) {\n    if (!node) {\n      return node\n    }\n    if (node.constructor === Array) {\n      return this.visitArray(node)\n    }\n\n    if (!node.blocksVisibility || node.blocksVisibility()) {\n      return node\n    }\n    if (this.visible) {\n      node.ensureVisibility()\n    } else {\n      node.ensureInvisibility()\n    }\n\n    node.accept(this)\n    return node\n  }\n}\n\nmodule.exports = SetTreeVisibilityVisitor\n","const tree = require('../tree')\nconst Visitor = require('./visitor')\nconst logger = require('../logger')\n\n/*jshint loopfunc:true */\n\nclass ExtendFinderVisitor {\n  constructor() {\n    this._visitor = new Visitor(this)\n    this.contexts = []\n    this.allExtendsStack = [[]]\n  }\n\n  run(root) {\n    root = this._visitor.visit(root)\n    root.allExtends = this.allExtendsStack[0]\n    return root\n  }\n\n  visitRule(ruleNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitRuleset(rulesetNode, visitArgs) {\n    if (rulesetNode.root) {\n      return\n    }\n\n    let i\n    let j\n    let extend\n    const allSelectorsExtendList = []\n    let extendList\n\n    // get &:extend(.a); rules which apply to all selectors in this ruleset\n    const rules = rulesetNode.rules\n\n    const ruleCnt = rules ? rules.length : 0\n    for (i = 0; i < ruleCnt; i++) {\n      if (rulesetNode.rules[i] instanceof tree.Extend) {\n        allSelectorsExtendList.push(rules[i])\n        rulesetNode.extendOnEveryPath = true\n      }\n    }\n\n    // now find every selector and apply the extends that apply to all extends\n    // and the ones which apply to an individual extend\n    const paths = rulesetNode.paths\n    for (i = 0; i < paths.length; i++) {\n      const selectorPath = paths[i]\n      const selector = selectorPath[selectorPath.length - 1]\n      const selExtendList = selector.extendList\n\n      extendList = selExtendList\n        ? selExtendList.slice(0).concat(allSelectorsExtendList)\n        : allSelectorsExtendList\n\n      if (extendList) {\n        extendList = extendList.map(allSelectorsExtend =>\n          allSelectorsExtend.clone()\n        )\n      }\n\n      for (j = 0; j < extendList.length; j++) {\n        this.foundExtends = true\n        extend = extendList[j]\n        extend.findSelfSelectors(selectorPath)\n        extend.ruleset = rulesetNode\n        if (j === 0) {\n          extend.firstExtendOnThisSelectorPath = true\n        }\n        this.allExtendsStack[this.allExtendsStack.length - 1].push(extend)\n      }\n    }\n\n    this.contexts.push(rulesetNode.selectors)\n  }\n\n  visitRulesetOut(rulesetNode) {\n    if (!rulesetNode.root) {\n      this.contexts.length = this.contexts.length - 1\n    }\n  }\n\n  visitMedia(mediaNode, visitArgs) {\n    mediaNode.allExtends = []\n    this.allExtendsStack.push(mediaNode.allExtends)\n  }\n\n  visitMediaOut(mediaNode) {\n    this.allExtendsStack.length = this.allExtendsStack.length - 1\n  }\n\n  visitDirective(directiveNode, visitArgs) {\n    directiveNode.allExtends = []\n    this.allExtendsStack.push(directiveNode.allExtends)\n  }\n\n  visitDirectiveOut(directiveNode) {\n    this.allExtendsStack.length = this.allExtendsStack.length - 1\n  }\n}\n\nclass ProcessExtendsVisitor {\n  constructor() {\n    this._visitor = new Visitor(this)\n  }\n\n  run(root) {\n    const extendFinder = new ExtendFinderVisitor()\n    this.extendIndices = {}\n    extendFinder.run(root)\n    if (!extendFinder.foundExtends) {\n      return root\n    }\n    root.allExtends = root.allExtends.concat(\n      this.doExtendChaining(root.allExtends, root.allExtends)\n    )\n    this.allExtendsStack = [root.allExtends]\n    const newRoot = this._visitor.visit(root)\n    this.checkExtendsForNonMatched(root.allExtends)\n    return newRoot\n  }\n\n  checkExtendsForNonMatched(extendList) {\n    const indices = this.extendIndices\n    extendList\n      .filter(\n        extend => !extend.hasFoundMatches && extend.parent_ids.length == 1\n      )\n      .forEach(extend => {\n        let selector = '_unknown_'\n        try {\n          selector = extend.selector.toCSS({})\n        } catch (_) {}\n\n        if (!indices[`${extend.index} ${selector}`]) {\n          indices[`${extend.index} ${selector}`] = true\n          logger.warn(`extend '${selector}' has no matches`)\n        }\n      })\n  }\n\n  doExtendChaining(extendsList, extendsListTarget, iterationCount) {\n    //\n    // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n    // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n    // this means this new extend can then go and alter other extends\n    //\n    // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n    // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n    // processed if we look at each selector at a time, as is done in visitRuleset\n\n    let extendIndex\n\n    let targetExtendIndex\n    let matches\n    const extendsToAdd = []\n    let newSelector\n    const extendVisitor = this\n    let selectorPath\n    let extend\n    let targetExtend\n    let newExtend\n\n    iterationCount = iterationCount || 0\n\n    //loop through comparing every extend with every target extend.\n    // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n    // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n    // and the second is the target.\n    // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n    // case when processing media queries\n    for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n      for (\n        targetExtendIndex = 0;\n        targetExtendIndex < extendsListTarget.length;\n        targetExtendIndex++\n      ) {\n        extend = extendsList[extendIndex]\n        targetExtend = extendsListTarget[targetExtendIndex]\n\n        // look for circular references\n        if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {\n          continue\n        }\n\n        // find a match in the target extends self selector (the bit before :extend)\n        selectorPath = [targetExtend.selfSelectors[0]]\n        matches = extendVisitor.findMatch(extend, selectorPath)\n\n        if (matches.length) {\n          extend.hasFoundMatches = true\n\n          // we found a match, so for each self selector..\n          extend.selfSelectors.forEach(selfSelector => {\n            const info = targetExtend.visibilityInfo()\n\n            // process the extend as usual\n            newSelector = extendVisitor.extendSelector(\n              matches,\n              selectorPath,\n              selfSelector,\n              extend.isVisible()\n            )\n\n            // but now we create a new extend from it\n            newExtend = new tree.Extend(\n              targetExtend.selector,\n              targetExtend.option,\n              0,\n              targetExtend.currentFileInfo,\n              info\n            )\n            newExtend.selfSelectors = newSelector\n\n            // add the extend onto the list of extends for that selector\n            newSelector[newSelector.length - 1].extendList = [newExtend]\n\n            // record that we need to add it.\n            extendsToAdd.push(newExtend)\n            newExtend.ruleset = targetExtend.ruleset\n\n            //remember its parents for circular references\n            newExtend.parent_ids = newExtend.parent_ids.concat(\n              targetExtend.parent_ids,\n              extend.parent_ids\n            )\n\n            // only process the selector once.. if we have :extend(.a,.b) then multiple\n            // extends will look at the same selector path, so when extending\n            // we know that any others will be duplicates in terms of what is added to the css\n            if (targetExtend.firstExtendOnThisSelectorPath) {\n              newExtend.firstExtendOnThisSelectorPath = true\n              targetExtend.ruleset.paths.push(newSelector)\n            }\n          })\n        }\n      }\n    }\n\n    if (extendsToAdd.length) {\n      // try to detect circular references to stop a stack overflow.\n      // may no longer be needed.\n      this.extendChainCount++\n      if (iterationCount > 100) {\n        let selectorOne = '{unable to calculate}'\n        let selectorTwo = '{unable to calculate}'\n        try {\n          selectorOne = extendsToAdd[0].selfSelectors[0].toCSS()\n          selectorTwo = extendsToAdd[0].selector.toCSS()\n        } catch (e) {}\n        throw {\n          message: `extend circular reference detected. One of the circular extends is currently:${selectorOne}:extend(${selectorTwo})`,\n        }\n      }\n\n      // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n      // d extending e...\n      return extendsToAdd.concat(\n        extendVisitor.doExtendChaining(\n          extendsToAdd,\n          extendsListTarget,\n          iterationCount + 1\n        )\n      )\n    } else {\n      return extendsToAdd\n    }\n  }\n\n  visitRule(ruleNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitSelector(selectorNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitRuleset(rulesetNode, visitArgs) {\n    if (rulesetNode.root) {\n      return\n    }\n    let matches\n    let pathIndex\n    let extendIndex\n    const allExtends = this.allExtendsStack[this.allExtendsStack.length - 1]\n    const selectorsToAdd = []\n    const extendVisitor = this\n    let selectorPath\n\n    // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n    for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n      for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n        selectorPath = rulesetNode.paths[pathIndex]\n\n        // extending extends happens initially, before the main pass\n        if (rulesetNode.extendOnEveryPath) {\n          continue\n        }\n        const extendList = selectorPath[selectorPath.length - 1].extendList\n        if (extendList && extendList.length) {\n          continue\n        }\n\n        matches = this.findMatch(allExtends[extendIndex], selectorPath)\n\n        if (matches.length) {\n          allExtends[extendIndex].hasFoundMatches = true\n\n          allExtends[extendIndex].selfSelectors.forEach(selfSelector => {\n            let extendedSelectors\n            extendedSelectors = extendVisitor.extendSelector(\n              matches,\n              selectorPath,\n              selfSelector,\n              allExtends[extendIndex].isVisible()\n            )\n            selectorsToAdd.push(extendedSelectors)\n          })\n        }\n      }\n    }\n    rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd)\n  }\n\n  findMatch(extend, haystackSelectorPath) {\n    //\n    // look through the haystack selector path to try and find the needle - extend.selector\n    // returns an array of selector matches that can then be replaced\n    //\n    let haystackSelectorIndex\n\n    let hackstackSelector\n    let hackstackElementIndex\n    let haystackElement\n    let targetCombinator\n    let i\n    const extendVisitor = this\n    const needleElements = extend.selector.elements\n    const potentialMatches = []\n    let potentialMatch\n    const matches = []\n\n    // loop through the haystack elements\n    for (\n      haystackSelectorIndex = 0;\n      haystackSelectorIndex < haystackSelectorPath.length;\n      haystackSelectorIndex++\n    ) {\n      hackstackSelector = haystackSelectorPath[haystackSelectorIndex]\n\n      for (\n        hackstackElementIndex = 0;\n        hackstackElementIndex < hackstackSelector.elements.length;\n        hackstackElementIndex++\n      ) {\n        haystackElement = hackstackSelector.elements[hackstackElementIndex]\n\n        // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n        if (\n          extend.allowBefore ||\n          (haystackSelectorIndex === 0 && hackstackElementIndex === 0)\n        ) {\n          potentialMatches.push({\n            pathIndex: haystackSelectorIndex,\n            index: hackstackElementIndex,\n            matched: 0,\n            initialCombinator: haystackElement.combinator,\n          })\n        }\n\n        for (i = 0; i < potentialMatches.length; i++) {\n          potentialMatch = potentialMatches[i]\n\n          // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n          // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n          // work out what the resulting combinator will be\n          targetCombinator = haystackElement.combinator.value\n          if (targetCombinator === '' && hackstackElementIndex === 0) {\n            targetCombinator = ' '\n          }\n\n          // if we don't match, null our match to indicate failure\n          if (\n            !extendVisitor.isElementValuesEqual(\n              needleElements[potentialMatch.matched].value,\n              haystackElement.value\n            ) ||\n            (potentialMatch.matched > 0 &&\n              needleElements[potentialMatch.matched].combinator.value !==\n                targetCombinator)\n          ) {\n            potentialMatch = null\n          } else {\n            potentialMatch.matched++\n          }\n\n          // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n          if (potentialMatch) {\n            potentialMatch.finished =\n              potentialMatch.matched === needleElements.length\n            if (\n              potentialMatch.finished &&\n              (!extend.allowAfter &&\n                (hackstackElementIndex + 1 <\n                  hackstackSelector.elements.length ||\n                  haystackSelectorIndex + 1 < haystackSelectorPath.length))\n            ) {\n              potentialMatch = null\n            }\n          }\n          // if null we remove, if not, we are still valid, so either push as a valid match or continue\n          if (potentialMatch) {\n            if (potentialMatch.finished) {\n              potentialMatch.length = needleElements.length\n              potentialMatch.endPathIndex = haystackSelectorIndex\n              potentialMatch.endPathElementIndex = hackstackElementIndex + 1 // index after end of match\n              potentialMatches.length = 0 // we don't allow matches to overlap, so start matching again\n              matches.push(potentialMatch)\n            }\n          } else {\n            potentialMatches.splice(i, 1)\n            i--\n          }\n        }\n      }\n    }\n    return matches\n  }\n\n  isElementValuesEqual(elementValue1, elementValue2) {\n    if (\n      typeof elementValue1 === 'string' ||\n      typeof elementValue2 === 'string'\n    ) {\n      return elementValue1 === elementValue2\n    }\n    if (elementValue1 instanceof tree.Attribute) {\n      if (\n        elementValue1.op !== elementValue2.op ||\n        elementValue1.key !== elementValue2.key\n      ) {\n        return false\n      }\n      if (!elementValue1.value || !elementValue2.value) {\n        if (elementValue1.value || elementValue2.value) {\n          return false\n        }\n        return true\n      }\n      elementValue1 = elementValue1.value.value || elementValue1.value\n      elementValue2 = elementValue2.value.value || elementValue2.value\n      return elementValue1 === elementValue2\n    }\n    elementValue1 = elementValue1.value\n    elementValue2 = elementValue2.value\n    if (elementValue1 instanceof tree.Selector) {\n      if (\n        !(elementValue2 instanceof tree.Selector) ||\n        elementValue1.elements.length !== elementValue2.elements.length\n      ) {\n        return false\n      }\n      for (let i = 0; i < elementValue1.elements.length; i++) {\n        if (\n          elementValue1.elements[i].combinator.value !==\n          elementValue2.elements[i].combinator.value\n        ) {\n          if (\n            i !== 0 ||\n            (elementValue1.elements[i].combinator.value || ' ') !==\n              (elementValue2.elements[i].combinator.value || ' ')\n          ) {\n            return false\n          }\n        }\n        if (\n          !this.isElementValuesEqual(\n            elementValue1.elements[i].value,\n            elementValue2.elements[i].value\n          )\n        ) {\n          return false\n        }\n      }\n      return true\n    }\n    return false\n  }\n\n  extendSelector(matches, selectorPath, replacementSelector, isVisible) {\n    //for a set of matches, replace each match with the replacement selector\n\n    let currentSelectorPathIndex = 0\n\n    let currentSelectorPathElementIndex = 0\n    let path = []\n    let matchIndex\n    let selector\n    let firstElement\n    let match\n    let newElements\n\n    for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n      match = matches[matchIndex]\n      selector = selectorPath[match.pathIndex]\n      firstElement = new tree.Element(\n        match.initialCombinator,\n        replacementSelector.elements[0].value,\n        replacementSelector.elements[0].index,\n        replacementSelector.elements[0].currentFileInfo\n      )\n\n      if (\n        match.pathIndex > currentSelectorPathIndex &&\n        currentSelectorPathElementIndex > 0\n      ) {\n        path[path.length - 1].elements = path[path.length - 1].elements.concat(\n          selectorPath[currentSelectorPathIndex].elements.slice(\n            currentSelectorPathElementIndex\n          )\n        )\n        currentSelectorPathElementIndex = 0\n        currentSelectorPathIndex++\n      }\n\n      newElements = selector.elements\n        .slice(currentSelectorPathElementIndex, match.index)\n        .concat([firstElement])\n        .concat(replacementSelector.elements.slice(1))\n\n      if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n        path[path.length - 1].elements = path[path.length - 1].elements.concat(\n          newElements\n        )\n      } else {\n        path = path.concat(\n          selectorPath.slice(currentSelectorPathIndex, match.pathIndex)\n        )\n\n        path.push(new tree.Selector(newElements))\n      }\n      currentSelectorPathIndex = match.endPathIndex\n      currentSelectorPathElementIndex = match.endPathElementIndex\n      if (\n        currentSelectorPathElementIndex >=\n        selectorPath[currentSelectorPathIndex].elements.length\n      ) {\n        currentSelectorPathElementIndex = 0\n        currentSelectorPathIndex++\n      }\n    }\n\n    if (\n      currentSelectorPathIndex < selectorPath.length &&\n      currentSelectorPathElementIndex > 0\n    ) {\n      path[path.length - 1].elements = path[path.length - 1].elements.concat(\n        selectorPath[currentSelectorPathIndex].elements.slice(\n          currentSelectorPathElementIndex\n        )\n      )\n      currentSelectorPathIndex++\n    }\n\n    path = path.concat(\n      selectorPath.slice(currentSelectorPathIndex, selectorPath.length)\n    )\n    path = path.map(currentValue => {\n      // we can re-use elements here, because the visibility property matters only for selectors\n      const derived = currentValue.createDerived(currentValue.elements)\n      if (isVisible) {\n        derived.ensureVisibility()\n      } else {\n        derived.ensureInvisibility()\n      }\n      return derived\n    })\n    return path\n  }\n\n  visitMedia(mediaNode, visitArgs) {\n    let newAllExtends = mediaNode.allExtends.concat(\n      this.allExtendsStack[this.allExtendsStack.length - 1]\n    )\n    newAllExtends = newAllExtends.concat(\n      this.doExtendChaining(newAllExtends, mediaNode.allExtends)\n    )\n    this.allExtendsStack.push(newAllExtends)\n  }\n\n  visitMediaOut(mediaNode) {\n    const lastIndex = this.allExtendsStack.length - 1\n    this.allExtendsStack.length = lastIndex\n  }\n\n  visitDirective(directiveNode, visitArgs) {\n    let newAllExtends = directiveNode.allExtends.concat(\n      this.allExtendsStack[this.allExtendsStack.length - 1]\n    )\n    newAllExtends = newAllExtends.concat(\n      this.doExtendChaining(newAllExtends, directiveNode.allExtends)\n    )\n    this.allExtendsStack.push(newAllExtends)\n  }\n\n  visitDirectiveOut(directiveNode) {\n    const lastIndex = this.allExtendsStack.length - 1\n    this.allExtendsStack.length = lastIndex\n  }\n}\n\nmodule.exports = ProcessExtendsVisitor\n","const Visitor = require('./visitor')\n\nclass JoinSelectorVisitor {\n  constructor() {\n    this.contexts = [[]]\n    this._visitor = new Visitor(this)\n  }\n\n  run(root) {\n    return this._visitor.visit(root)\n  }\n\n  visitRule(ruleNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitRuleset(rulesetNode, visitArgs) {\n    const context = this.contexts[this.contexts.length - 1]\n    const paths = []\n    let selectors\n\n    this.contexts.push(paths)\n\n    if (!rulesetNode.root) {\n      selectors = rulesetNode.selectors\n      if (selectors) {\n        selectors = selectors.filter(selector => selector.getIsOutput())\n        rulesetNode.selectors = selectors.length\n          ? selectors\n          : (selectors = null)\n        if (selectors) {\n          rulesetNode.joinSelectors(paths, context, selectors)\n        }\n      }\n      if (!selectors) {\n        rulesetNode.rules = null\n      }\n      rulesetNode.paths = paths\n    }\n  }\n\n  visitRulesetOut(rulesetNode) {\n    this.contexts.length = this.contexts.length - 1\n  }\n\n  visitMedia(mediaNode, visitArgs) {\n    const context = this.contexts[this.contexts.length - 1]\n    mediaNode.rules[0].root = context.length === 0 || context[0].multiMedia\n  }\n\n  visitDirective(directiveNode, visitArgs) {\n    const context = this.contexts[this.contexts.length - 1]\n    if (directiveNode.rules && directiveNode.rules.length) {\n      directiveNode.rules[0].root =\n        directiveNode.isRooted || context.length === 0 || null\n    }\n  }\n}\n\nmodule.exports = JoinSelectorVisitor\n","const tree = require('../tree')\nconst Visitor = require('./visitor')\n\nclass CSSVisitorUtils {\n  constructor(context) {\n    this._visitor = new Visitor(this)\n    this._context = context\n  }\n\n  containsSilentNonBlockedChild(bodyRules) {\n    let rule\n    if (bodyRules == null) {\n      return false\n    }\n    for (let r = 0; r < bodyRules.length; r++) {\n      rule = bodyRules[r]\n      if (\n        rule.isSilent &&\n        rule.isSilent(this._context) &&\n        !rule.blocksVisibility()\n      ) {\n        //the directive contains something that was referenced (likely by extend)\n        //therefore it needs to be shown in output too\n        return true\n      }\n    }\n    return false\n  }\n\n  keepOnlyVisibleChilds(owner) {\n    if (owner == null || owner.rules == null) {\n      return\n    }\n\n    owner.rules = owner.rules.filter(thing => thing.isVisible())\n  }\n\n  isEmpty(owner) {\n    if (owner == null || owner.rules == null) {\n      return true\n    }\n    return owner.rules.length === 0\n  }\n\n  hasVisibleSelector(rulesetNode) {\n    if (rulesetNode == null || rulesetNode.paths == null) {\n      return false\n    }\n    return rulesetNode.paths.length > 0\n  }\n\n  resolveVisibility(node, originalRules) {\n    if (!node.blocksVisibility()) {\n      if (\n        this.isEmpty(node) &&\n        !this.containsSilentNonBlockedChild(originalRules)\n      ) {\n        return\n      }\n\n      return node\n    }\n\n    const compiledRulesBody = node.rules[0]\n    this.keepOnlyVisibleChilds(compiledRulesBody)\n\n    if (this.isEmpty(compiledRulesBody)) {\n      return\n    }\n\n    node.ensureVisibility()\n    node.removeVisibilityBlock()\n\n    return node\n  }\n\n  isVisibleRuleset(rulesetNode) {\n    if (rulesetNode.firstRoot) {\n      return true\n    }\n\n    if (this.isEmpty(rulesetNode)) {\n      return false\n    }\n\n    if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n      return false\n    }\n\n    return true\n  }\n}\n\nconst ToCSSVisitor = function(context) {\n  this._visitor = new Visitor(this)\n  this._context = context\n  this.utils = new CSSVisitorUtils(context)\n  this._level = 0\n}\n\nToCSSVisitor.prototype = {\n  isReplacing: true,\n  run(root) {\n    return this._visitor.visit(root)\n  },\n\n  visitRule(ruleNode, visitArgs) {\n    if (ruleNode.blocksVisibility()) {\n      return\n    }\n    if (ruleNode.variable && (this._level > 1 || !this._context.simplify)) {\n      return\n    }\n    return ruleNode\n  },\n\n  visitMixinDefinition(mixinNode, visitArgs) {\n    // mixin definitions do not get eval'd - this means they keep state\n    // so we have to clear that state here so it isn't used if toCSS is called twice\n    mixinNode.frames = []\n  },\n\n  visitExtend(extendNode, visitArgs) {},\n\n  visitComment(commentNode, visitArgs) {\n    if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n      return\n    }\n    return commentNode\n  },\n\n  visitMedia(mediaNode, visitArgs) {\n    const originalRules = mediaNode.rules[0].rules\n    mediaNode.accept(this._visitor)\n    visitArgs.visitDeeper = false\n\n    return this.utils.resolveVisibility(mediaNode, originalRules)\n  },\n\n  visitImport(importNode, visitArgs) {\n    if (importNode.blocksVisibility()) {\n      return\n    }\n    return importNode\n  },\n\n  visitDirective(directiveNode, visitArgs) {\n    if (directiveNode.rules && directiveNode.rules.length) {\n      return this.visitDirectiveWithBody(directiveNode, visitArgs)\n    } else {\n      return this.visitDirectiveWithoutBody(directiveNode, visitArgs)\n    }\n  },\n\n  visitDirectiveWithBody(directiveNode, visitArgs) {\n    //if there is only one nested ruleset and that one has no path, then it is\n    //just fake ruleset\n    function hasFakeRuleset(directiveNode) {\n      const bodyRules = directiveNode.rules\n      return (\n        bodyRules.length === 1 &&\n        (!bodyRules[0].paths || bodyRules[0].paths.length === 0)\n      )\n    }\n    function getBodyRules(directiveNode) {\n      const nodeRules = directiveNode.rules\n      if (hasFakeRuleset(directiveNode)) {\n        return nodeRules[0].rules\n      }\n\n      return nodeRules\n    }\n    //it is still true that it is only one ruleset in array\n    //this is last such moment\n    //process childs\n    const originalRules = getBodyRules(directiveNode)\n    directiveNode.accept(this._visitor)\n    visitArgs.visitDeeper = false\n\n    if (!this.utils.isEmpty(directiveNode)) {\n      this._mergeRules(directiveNode.rules[0].rules)\n    }\n\n    return this.utils.resolveVisibility(directiveNode, originalRules)\n  },\n\n  visitDirectiveWithoutBody(directiveNode, visitArgs) {\n    if (directiveNode.blocksVisibility()) {\n      return\n    }\n\n    if (directiveNode.name === '@charset') {\n      // Only output the debug info together with subsequent @charset definitions\n      // a comment (or @media statement) before the actual @charset directive would\n      // be considered illegal css as it has to be on the first line\n      if (this.charset) {\n        if (directiveNode.debugInfo) {\n          const comment = new tree.Comment(\n            `/* ${directiveNode.toCSS(this._context).replace(/\\n/g, '')} */\\n`\n          )\n          comment.debugInfo = directiveNode.debugInfo\n          return this._visitor.visit(comment)\n        }\n        return\n      }\n      this.charset = true\n    }\n\n    return directiveNode\n  },\n\n  checkValidNodes(rules, isRoot) {\n    if (!rules) {\n      return\n    }\n\n    for (let i = 0; i < rules.length; i++) {\n      const ruleNode = rules[i]\n      if (isRoot && ruleNode instanceof tree.Rule && !ruleNode.variable) {\n        throw {\n          message:\n            'Properties must be inside selector blocks. They cannot be in the root',\n          index: ruleNode.index,\n          filename:\n            ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename,\n        }\n      }\n      if (ruleNode instanceof tree.Call) {\n        throw {\n          message: `Function '${ruleNode.name}' is undefined`,\n          index: ruleNode.index,\n          filename:\n            ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename,\n        }\n      }\n      if (ruleNode.type && !ruleNode.allowRoot) {\n        throw {\n          message: `${ruleNode.type} node returned by a function is not valid here`,\n          index: ruleNode.index,\n          filename:\n            ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename,\n        }\n      }\n    }\n  },\n  visitRulesetOut(rulesetNode) {\n    this._level--\n  },\n  visitRuleset(rulesetNode, visitArgs) {\n    this._level++\n\n    //at this point rulesets are nested into each other\n    let rule\n\n    const rulesets = []\n\n    this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot)\n\n    if (!rulesetNode.root) {\n      //remove invisible paths\n      this._compileRulesetPaths(rulesetNode)\n\n      // remove rulesets from this ruleset body and compile them separately\n      const nodeRules = rulesetNode.rules\n\n      let nodeRuleCnt = nodeRules ? nodeRules.length : 0\n      for (let i = 0; i < nodeRuleCnt; ) {\n        rule = nodeRules[i]\n        if (rule && rule.rules) {\n          // visit because we are moving them out from being a child\n          rulesets.push(this._visitor.visit(rule))\n          nodeRules.splice(i, 1)\n          nodeRuleCnt--\n          continue\n        }\n        i++\n      }\n      // accept the visitor to remove rules and refactor itself\n      // then we can decide nogw whether we want it or not\n      // compile body\n      if (nodeRuleCnt > 0) {\n        rulesetNode.accept(this._visitor)\n      } else {\n        rulesetNode.rules = null\n      }\n      visitArgs.visitDeeper = false\n    } else {\n      //if (! rulesetNode.root) {\n      rulesetNode.accept(this._visitor)\n      visitArgs.visitDeeper = false\n    }\n\n    if (rulesetNode.rules) {\n      this._mergeRules(rulesetNode.rules)\n      this._removeDuplicateRules(rulesetNode.rules)\n    }\n\n    //now decide whether we keep the ruleset\n    if (this.utils.isVisibleRuleset(rulesetNode)) {\n      rulesetNode.ensureVisibility()\n      rulesets.splice(0, 0, rulesetNode)\n    }\n\n    if (rulesets.length === 1) {\n      return rulesets[0]\n    }\n    return rulesets\n  },\n\n  _compileRulesetPaths(rulesetNode) {\n    if (rulesetNode.paths) {\n      rulesetNode.paths = rulesetNode.paths.filter(p => {\n        let i\n        if (p[0].elements[0].combinator.value === ' ') {\n          p[0].elements[0].combinator = new tree.Combinator('')\n        }\n        for (i = 0; i < p.length; i++) {\n          if (p[i].isVisible() && p[i].getIsOutput()) {\n            return true\n          }\n        }\n        return false\n      })\n    }\n  },\n\n  _removeDuplicateRules(rules) {\n    if (!rules) {\n      return\n    }\n\n    // remove duplicates\n    const ruleCache = {}\n\n    let ruleList\n    let rule\n    let i\n\n    for (i = rules.length - 1; i >= 0; i--) {\n      rule = rules[i]\n      if (rule instanceof tree.Rule) {\n        if (!ruleCache[rule.name]) {\n          ruleCache[rule.name] = rule\n        } else {\n          ruleList = ruleCache[rule.name]\n          if (ruleList instanceof tree.Rule) {\n            ruleList = ruleCache[rule.name] = [\n              ruleCache[rule.name].toCSS(this._context),\n            ]\n          }\n          const ruleCSS = rule.toCSS(this._context)\n          if (ruleList.indexOf(ruleCSS) !== -1) {\n            rules.splice(i, 1)\n          } else {\n            ruleList.push(ruleCSS)\n          }\n        }\n      }\n    }\n  },\n\n  _mergeRules(rules) {\n    if (!rules) {\n      return\n    }\n\n    const groups = {}\n    let parts\n    let rule\n    let key\n\n    for (let i = 0; i < rules.length; i++) {\n      rule = rules[i]\n\n      if (rule instanceof tree.Rule && rule.merge) {\n        key = [rule.name, rule.important ? '!' : ''].join(',')\n\n        if (!groups[key]) {\n          groups[key] = []\n        } else {\n          rules.splice(i--, 1)\n        }\n\n        groups[key].push(rule)\n      }\n    }\n\n    Object.keys(groups).map(k => {\n      function toExpression(values) {\n        return new tree.Expression(values.map(p => p.value))\n      }\n\n      function toValue(values) {\n        return new tree.Value(values.map(p => p))\n      }\n\n      parts = groups[k]\n\n      if (parts.length > 1) {\n        rule = parts[0]\n        const spacedGroups = []\n        let lastSpacedGroup = []\n        parts.map(p => {\n          if (p.merge === '+') {\n            if (lastSpacedGroup.length > 0) {\n              spacedGroups.push(toExpression(lastSpacedGroup))\n            }\n            lastSpacedGroup = []\n          }\n          lastSpacedGroup.push(p)\n        })\n        spacedGroups.push(toExpression(lastSpacedGroup))\n        rule.value = toValue(spacedGroups)\n      }\n    })\n  },\n\n  visitAnonymous(anonymousNode, visitArgs) {\n    if (anonymousNode.blocksVisibility()) {\n      return\n    }\n    anonymousNode.accept(this._visitor)\n    return anonymousNode\n  },\n}\n\nmodule.exports = ToCSSVisitor\n","const visitors = {\n  Visitor: require('./visitor'),\n  ImportVisitor: require('./import-visitor'),\n  MarkVisibleSelectorsVisitor: require('./set-tree-visibility-visitor'),\n  ExtendVisitor: require('./extend-visitor'),\n  JoinSelectorVisitor: require('./join-selector-visitor'),\n  ToCSSVisitor: require('./to-css-visitor'),\n}\n\nmodule.exports = visitors\n","const contexts = require('./contexts')\nconst visitor = require('./visitors')\nconst tree = require('./tree')\n\nmodule.exports = (root, options) => {\n  options = options || {}\n  let evaldRoot\n  let variables = options.variables\n  const evalEnv = new contexts.Eval(options)\n\n  //\n  // Allows setting variables with a hash, so:\n  //\n  //   `{ color: new tree.Color('#f01') }` will become:\n  //\n  //   new tree.Rule('@color',\n  //     new tree.Value([\n  //       new tree.Expression([\n  //         new tree.Color('#f01')\n  //       ])\n  //     ])\n  //   )\n  //\n  if (typeof variables === 'object' && !Array.isArray(variables)) {\n    variables = Object.keys(variables).map(k => {\n      let value = variables[k]\n\n      if (!(value instanceof tree.Value)) {\n        if (!(value instanceof tree.Expression)) {\n          value = new tree.Expression([value])\n        }\n        value = new tree.Value([value])\n      }\n      return new tree.Rule(`@${k}`, value, false, null, 0)\n    })\n    evalEnv.frames = [new tree.Ruleset(null, variables)]\n  }\n\n  const preEvalVisitors = []\n\n  const visitors = [\n    new visitor.JoinSelectorVisitor(),\n    new visitor.MarkVisibleSelectorsVisitor(true),\n    new visitor.ExtendVisitor(),\n    new visitor.ToCSSVisitor({\n      compress: Boolean(options.compress),\n      simplify: Boolean(options.simplify),\n    }),\n  ]\n\n  let i\n\n  if (options.pluginManager) {\n    const pluginVisitors = options.pluginManager.getVisitors()\n    for (i = 0; i < pluginVisitors.length; i++) {\n      const pluginVisitor = pluginVisitors[i]\n      if (pluginVisitor.isPreEvalVisitor) {\n        preEvalVisitors.push(pluginVisitor)\n      } else {\n        if (pluginVisitor.isPreVisitor) {\n          visitors.splice(0, 0, pluginVisitor)\n        } else {\n          visitors.push(pluginVisitor)\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < preEvalVisitors.length; i++) {\n    preEvalVisitors[i].run(root)\n  }\n\n  evaldRoot = root.eval(evalEnv)\n\n  for (i = 0; i < visitors.length; i++) {\n    visitors[i].run(evaldRoot)\n  }\n\n  return evaldRoot\n}\n","const LessError = require('./less-error')\nconst transformTree = require('./transform-tree')\nconst logger = require('./logger')\n\nmodule.exports = SourceMapBuilder => {\n  class ParseTree {\n    constructor(root, imports) {\n      this.root = root\n      this.imports = imports\n    }\n\n    toCSS(options) {\n      let evaldRoot\n      const result = {}\n      let sourceMapBuilder\n      try {\n        evaldRoot = transformTree(this.root, options)\n      } catch (e) {\n        throw new LessError(e, this.imports)\n      }\n\n      try {\n        const compress = Boolean(options.compress)\n        if (compress) {\n          logger.warn(\n            'The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.'\n          )\n        }\n\n        const toCSSOptions = {\n          compress,\n          dumpLineNumbers: options.dumpLineNumbers,\n          strictUnits: Boolean(options.strictUnits),\n          simplify: Boolean(options.simplify),\n          numPrecision: 8,\n        }\n\n        if (options.sourceMap) {\n          sourceMapBuilder = new SourceMapBuilder(options.sourceMap)\n          result.css = sourceMapBuilder.toCSS(\n            evaldRoot,\n            toCSSOptions,\n            this.imports\n          )\n        } else {\n          result.css = evaldRoot.toCSS(toCSSOptions)\n        }\n      } catch (e) {\n        throw new LessError(e, this.imports)\n      }\n\n      if (options.pluginManager) {\n        const postProcessors = options.pluginManager.getPostProcessors()\n        for (let i = 0; i < postProcessors.length; i++) {\n          result.css = postProcessors[i].process(result.css, {\n            sourceMap: sourceMapBuilder,\n            options,\n            imports: this.imports,\n          })\n        }\n      }\n      if (options.sourceMap) {\n        result.map = sourceMapBuilder.getExternalSourceMap()\n      }\n\n      result.imports = []\n      for (const file in this.imports.files) {\n        if (\n          this.imports.files.hasOwnProperty(file) &&\n          file !== this.imports.rootFilename\n        ) {\n          result.imports.push(file)\n        }\n      }\n      return result\n    }\n  }\n\n  return ParseTree\n}\n","// Split the input into chunks.\nmodule.exports = (input, fail) => {\n  const len = input.length\n  let level = 0\n  let parenLevel = 0\n  let lastOpening\n  let lastOpeningParen\n  let lastMultiComment\n  let lastMultiCommentEndBrace\n  const chunks = []\n  let emitFrom = 0\n  let chunkerCurrentIndex\n  let currentChunkStartIndex\n  let cc\n  let cc2\n  let matched\n\n  function emitChunk(force) {\n    const len = chunkerCurrentIndex - emitFrom\n    if ((len < 512 && !force) || !len) {\n      return\n    }\n    chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1))\n    emitFrom = chunkerCurrentIndex + 1\n  }\n\n  for (\n    chunkerCurrentIndex = 0;\n    chunkerCurrentIndex < len;\n    chunkerCurrentIndex++\n  ) {\n    cc = input.charCodeAt(chunkerCurrentIndex)\n    if ((cc >= 97 && cc <= 122) || cc < 34) {\n      // a-z or whitespace\n      continue\n    }\n\n    switch (cc) {\n      case 40: // (\n        parenLevel++\n        lastOpeningParen = chunkerCurrentIndex\n        continue\n      case 41: // )\n        if (--parenLevel < 0) {\n          return fail('missing opening `(`', chunkerCurrentIndex)\n        }\n        continue\n      case 59: // ;\n        if (!parenLevel) {\n          emitChunk()\n        }\n        continue\n      case 123: // {\n        level++\n        lastOpening = chunkerCurrentIndex\n        continue\n      case 125: // }\n        if (--level < 0) {\n          return fail('missing opening `{`', chunkerCurrentIndex)\n        }\n        if (!level && !parenLevel) {\n          emitChunk()\n        }\n        continue\n      case 92: // \\\n        if (chunkerCurrentIndex < len - 1) {\n          chunkerCurrentIndex++\n          continue\n        }\n        return fail('unescaped `\\\\`', chunkerCurrentIndex)\n      case 34:\n      case 39:\n      case 96: // \", ' and `\n        matched = 0\n        currentChunkStartIndex = chunkerCurrentIndex\n        for (\n          chunkerCurrentIndex = chunkerCurrentIndex + 1;\n          chunkerCurrentIndex < len;\n          chunkerCurrentIndex++\n        ) {\n          cc2 = input.charCodeAt(chunkerCurrentIndex)\n          if (cc2 > 96) {\n            continue\n          }\n          if (cc2 == cc) {\n            matched = 1\n            break\n          }\n          if (cc2 == 92) {\n            // \\\n            if (chunkerCurrentIndex == len - 1) {\n              return fail('unescaped `\\\\`', chunkerCurrentIndex)\n            }\n            chunkerCurrentIndex++\n          }\n        }\n        if (matched) {\n          continue\n        }\n        return fail(\n          `unmatched \\`${String.fromCharCode(cc)}\\``,\n          currentChunkStartIndex\n        )\n      case 47: // /, check for comment\n        if (parenLevel || chunkerCurrentIndex == len - 1) {\n          continue\n        }\n        cc2 = input.charCodeAt(chunkerCurrentIndex + 1)\n        if (cc2 == 47) {\n          // //, find lnfeed\n          for (\n            chunkerCurrentIndex = chunkerCurrentIndex + 2;\n            chunkerCurrentIndex < len;\n            chunkerCurrentIndex++\n          ) {\n            cc2 = input.charCodeAt(chunkerCurrentIndex)\n            if (cc2 <= 13 && (cc2 == 10 || cc2 == 13)) {\n              break\n            }\n          }\n        } else if (cc2 == 42) {\n          // /*, find */\n          lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex\n          for (\n            chunkerCurrentIndex = chunkerCurrentIndex + 2;\n            chunkerCurrentIndex < len - 1;\n            chunkerCurrentIndex++\n          ) {\n            cc2 = input.charCodeAt(chunkerCurrentIndex)\n            if (cc2 == 125) {\n              lastMultiCommentEndBrace = chunkerCurrentIndex\n            }\n            if (cc2 != 42) {\n              continue\n            }\n            if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\n              break\n            }\n          }\n          if (chunkerCurrentIndex == len - 1) {\n            return fail('missing closing `*/`', currentChunkStartIndex)\n          }\n          chunkerCurrentIndex++\n        }\n        continue\n      case 42: // *, check for unmatched */\n        if (\n          chunkerCurrentIndex < len - 1 &&\n          input.charCodeAt(chunkerCurrentIndex + 1) == 47\n        ) {\n          return fail('unmatched `/*`', chunkerCurrentIndex)\n        }\n        continue\n    }\n  }\n\n  if (level !== 0) {\n    if (\n      lastMultiComment > lastOpening &&\n      lastMultiCommentEndBrace > lastMultiComment\n    ) {\n      return fail('missing closing `}` or `*/`', lastOpening)\n    } else {\n      return fail('missing closing `}`', lastOpening)\n    }\n  } else if (parenLevel !== 0) {\n    return fail('missing closing `)`', lastOpeningParen)\n  }\n\n  emitChunk(true)\n  return chunks\n}\n","const chunker = require('./chunker')\n\nmodule.exports = () => {\n  let // LeSS input string\n  input\n\n  let // current chunk\n  j\n\n  const // holds state for backtracking\n  saveStack = []\n\n  let // furthest index the parser has gone to\n  furthest\n\n  let // if this is furthest we got to, this is the probably cause\n  furthestPossibleErrorMessage\n\n  let // chunkified input\n  chunks\n\n  let // current chunk\n  current\n\n  let // index of current chunk, in `input`\n  currentPos\n\n  const parserInput = {}\n  const CHARCODE_SPACE = 32\n  const CHARCODE_TAB = 9\n  const CHARCODE_LF = 10\n  const CHARCODE_CR = 13\n  const CHARCODE_PLUS = 43\n  const CHARCODE_COMMA = 44\n  const CHARCODE_FORWARD_SLASH = 47\n  const CHARCODE_9 = 57\n\n  function skipWhitespace(length) {\n    const oldi = parserInput.i\n    const oldj = j\n    const curr = parserInput.i - currentPos\n    const endIndex = parserInput.i + current.length - curr\n    const mem = (parserInput.i += length)\n    const inp = input\n    let c\n    let nextChar\n    let comment\n\n    for (; parserInput.i < endIndex; parserInput.i++) {\n      c = inp.charCodeAt(parserInput.i)\n\n      if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n        nextChar = inp.charAt(parserInput.i + 1)\n        if (nextChar === '/') {\n          comment = { index: parserInput.i, isLineComment: true }\n          let nextNewLine = inp.indexOf('\\n', parserInput.i + 2)\n          if (nextNewLine < 0) {\n            nextNewLine = endIndex\n          }\n          parserInput.i = nextNewLine\n          comment.text = inp.substr(\n            comment.index,\n            parserInput.i - comment.index\n          )\n          parserInput.commentStore.push(comment)\n          continue\n        } else if (nextChar === '*') {\n          const nextStarSlash = inp.indexOf('*/', parserInput.i + 2)\n          if (nextStarSlash >= 0) {\n            comment = {\n              index: parserInput.i,\n              text: inp.substr(\n                parserInput.i,\n                nextStarSlash + 2 - parserInput.i\n              ),\n              isLineComment: false,\n            }\n            parserInput.i += comment.text.length - 1\n            parserInput.commentStore.push(comment)\n            continue\n          }\n        }\n        break\n      }\n\n      if (\n        c !== CHARCODE_SPACE &&\n        c !== CHARCODE_LF &&\n        c !== CHARCODE_TAB &&\n        c !== CHARCODE_CR\n      ) {\n        break\n      }\n    }\n\n    current = current.slice(length + parserInput.i - mem + curr)\n    currentPos = parserInput.i\n\n    if (!current.length) {\n      if (j < chunks.length - 1) {\n        current = chunks[++j]\n        skipWhitespace(0) // skip space at the beginning of a chunk\n        return true // things changed\n      }\n      parserInput.finished = true\n    }\n\n    return oldi !== parserInput.i || oldj !== j\n  }\n\n  parserInput.save = () => {\n    currentPos = parserInput.i\n    saveStack.push({ current, i: parserInput.i, j })\n  }\n  parserInput.restore = possibleErrorMessage => {\n    if (\n      parserInput.i > furthest ||\n      (parserInput.i === furthest &&\n        possibleErrorMessage &&\n        !furthestPossibleErrorMessage)\n    ) {\n      furthest = parserInput.i\n      furthestPossibleErrorMessage = possibleErrorMessage\n    }\n    const state = saveStack.pop()\n    current = state.current\n    currentPos = parserInput.i = state.i\n    j = state.j\n  }\n  parserInput.forget = () => {\n    saveStack.pop()\n  }\n  parserInput.isWhitespace = offset => {\n    const pos = parserInput.i + (offset || 0)\n    const code = input.charCodeAt(pos)\n    return (\n      code === CHARCODE_SPACE ||\n      code === CHARCODE_CR ||\n      code === CHARCODE_TAB ||\n      code === CHARCODE_LF\n    )\n  }\n\n  // Specialization of $(tok)\n  parserInput.$re = tok => {\n    if (parserInput.i > currentPos) {\n      current = current.slice(parserInput.i - currentPos)\n      currentPos = parserInput.i\n    }\n\n    const m = tok.exec(current)\n    if (!m) {\n      return null\n    }\n\n    skipWhitespace(m[0].length)\n    if (typeof m === 'string') {\n      return m\n    }\n\n    return m.length === 1 ? m[0] : m\n  }\n\n  parserInput.$char = tok => {\n    if (input.charAt(parserInput.i) !== tok) {\n      return null\n    }\n    skipWhitespace(1)\n    return tok\n  }\n\n  parserInput.$str = tok => {\n    const tokLength = tok.length\n\n    // https://jsperf.com/string-startswith/21\n    for (let i = 0; i < tokLength; i++) {\n      if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n        return null\n      }\n    }\n\n    skipWhitespace(tokLength)\n    return tok\n  }\n\n  parserInput.$quoted = () => {\n    const startChar = input.charAt(parserInput.i)\n    if (startChar !== \"'\" && startChar !== '\"') {\n      return\n    }\n    const length = input.length\n    const currentPosition = parserInput.i\n\n    for (let i = 1; i + currentPosition < length; i++) {\n      const nextChar = input.charAt(i + currentPosition)\n      switch (nextChar) {\n        case '\\\\':\n          i++\n          continue\n        case '\\r':\n        case '\\n':\n          break\n        case startChar:\n          const str = input.substr(currentPosition, i + 1)\n          skipWhitespace(i + 1)\n          return str\n        default:\n      }\n    }\n    return null\n  }\n\n  parserInput.autoCommentAbsorb = true\n  parserInput.commentStore = []\n  parserInput.finished = false\n\n  // Same as $(), but don't change the state of the parser,\n  // just return the match.\n  parserInput.peek = tok => {\n    if (typeof tok === 'string') {\n      // https://jsperf.com/string-startswith/21\n      for (let i = 0; i < tok.length; i++) {\n        if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n          return false\n        }\n      }\n      return true\n    } else {\n      return tok.test(current)\n    }\n  }\n\n  // Specialization of peek()\n  // TODO remove or change some currentChar calls to peekChar\n  parserInput.peekChar = tok => input.charAt(parserInput.i) === tok\n\n  parserInput.currentChar = () => input.charAt(parserInput.i)\n\n  parserInput.getInput = () => input\n\n  parserInput.peekNotNumeric = () => {\n    const c = input.charCodeAt(parserInput.i)\n    //Is the first char of the dimension 0-9, '.', '+' or '-'\n    return (\n      c > CHARCODE_9 ||\n      c < CHARCODE_PLUS ||\n      c === CHARCODE_FORWARD_SLASH ||\n      c === CHARCODE_COMMA\n    )\n  }\n\n  parserInput.start = (str, chunkInput, failFunction) => {\n    input = str\n    parserInput.i = j = currentPos = furthest = 0\n\n    // chunking apparently makes things quicker (but my tests indicate\n    // it might actually make things slower in node at least)\n    // and it is a non-perfect parse - it can't recognise\n    // unquoted urls, meaning it can't distinguish comments\n    // meaning comments with quotes or {}() in them get 'counted'\n    // and then lead to parse errors.\n    // In addition if the chunking chunks in the wrong place we might\n    // not be able to parse a parser statement in one go\n    // this is officially deprecated but can be switched on via an option\n    // in the case it causes too much performance issues.\n    if (chunkInput) {\n      chunks = chunker(str, failFunction)\n    } else {\n      chunks = [str]\n    }\n\n    current = chunks[0]\n\n    skipWhitespace(0)\n  }\n\n  parserInput.end = () => {\n    let message\n    const isFinished = parserInput.i >= input.length\n\n    if (parserInput.i < furthest) {\n      message = furthestPossibleErrorMessage\n      parserInput.i = furthest\n    }\n    return {\n      isFinished,\n      furthest: parserInput.i,\n      furthestPossibleErrorMessage: message,\n      furthestReachedEnd: parserInput.i >= input.length - 1,\n      furthestChar: input[parserInput.i],\n    }\n  }\n\n  return parserInput\n}\n","const LessError = require('../less-error')\nconst tree = require('../tree')\nconst visitors = require('../visitors')\nconst getParserInput = require('./parser-input')\nconst utils = require('../utils')\n\n//\n// less.js - parser\n//\n//    A relatively straight-forward predictive parser.\n//    There is no tokenization/lexing stage, the input is parsed\n//    in one sweep.\n//\n//    To make the parser fast enough to run in the browser, several\n//    optimization had to be made:\n//\n//    - Matching and slicing on a huge input is often cause of slowdowns.\n//      The solution is to chunkify the input into smaller strings.\n//      The chunks are stored in the `chunks` var,\n//      `j` holds the current chunk index, and `currentPos` holds\n//      the index of the current chunk in relation to `input`.\n//      This gives us an almost 4x speed-up.\n//\n//    - In many cases, we don't need to match individual tokens;\n//      for example, if a value doesn't hold any variables, operations\n//      or dynamic references, the parser can effectively 'skip' it,\n//      treating it as a literal.\n//      An example would be '1px solid #000' - which evaluates to itself,\n//      we don't need to know what the individual components are.\n//      The drawback, of course is that you don't get the benefits of\n//      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n//      and a smaller speed-up in the code-gen.\n//\n//\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\n//`\n//\nconst Parser = function Parser(context, imports, fileInfo) {\n  let parsers\n  const parserInput = getParserInput()\n\n  function error(msg, type) {\n    throw new LessError(\n      {\n        index: parserInput.i,\n        filename: fileInfo.filename,\n        type: type || 'Syntax',\n        message: msg,\n      },\n      imports\n    )\n  }\n\n  function expect(arg, msg, index) {\n    // some older browsers return typeof 'function' for RegExp\n    const result =\n      arg instanceof Function ? arg.call(parsers) : parserInput.$re(arg)\n    if (result) {\n      return result\n    }\n    error(\n      msg ||\n        (typeof arg === 'string'\n          ? `expected '${arg}' got '${parserInput.currentChar()}'`\n          : 'unexpected token')\n    )\n  }\n\n  // Specialization of expect()\n  function expectChar(arg, msg) {\n    if (parserInput.$char(arg)) {\n      return arg\n    }\n    error(msg || `expected '${arg}' got '${parserInput.currentChar()}'`)\n  }\n\n  function getDebugInfo(index) {\n    const filename = fileInfo.filename\n\n    return {\n      lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,\n      fileName: filename,\n    }\n  }\n\n  //\n  // The Parser\n  //\n  return {\n    //\n    // Parse an input string into an abstract syntax tree,\n    // @param str A string containing 'less' markup\n    // @param callback call `callback` when done.\n    // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n    //\n    parse(str, callback, additionalData) {\n      let root\n      let error = null\n      let globalVars\n      let modifyVars\n      let ignored\n      let preText = ''\n\n      globalVars =\n        additionalData && additionalData.globalVars\n          ? `${Parser.serializeVars(additionalData.globalVars)}\\n`\n          : ''\n      modifyVars =\n        additionalData && additionalData.modifyVars\n          ? `\\n${Parser.serializeVars(additionalData.modifyVars)}`\n          : ''\n\n      if (context.pluginManager) {\n        const preProcessors = context.pluginManager.getPreProcessors()\n        for (let i = 0; i < preProcessors.length; i++) {\n          str = preProcessors[i].process(str, { context, imports, fileInfo })\n        }\n      }\n\n      if (globalVars || (additionalData && additionalData.banner)) {\n        preText =\n          (additionalData && additionalData.banner\n            ? additionalData.banner\n            : '') + globalVars\n        ignored = imports.contentsIgnoredChars\n        ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0\n        ignored[fileInfo.filename] += preText.length\n      }\n\n      str = str.replace(/\\r\\n?/g, '\\n')\n      // Remove potential UTF Byte Order Mark\n      str = preText + str.replace(/^\\uFEFF/, '') + modifyVars\n      imports.contents[fileInfo.filename] = str\n\n      // Start with the primary rule.\n      // The whole syntax tree is held under a Ruleset node,\n      // with the `root` property set to true, so no `{}` are\n      // output. The callback is called when the input is parsed.\n      try {\n        parserInput.start(str, context.chunkInput, function fail(msg, index) {\n          throw new LessError(\n            {\n              index,\n              type: 'Parse',\n              message: msg,\n              filename: fileInfo.filename,\n            },\n            imports\n          )\n        })\n\n        root = new tree.Ruleset(null, this.parsers.primary())\n        root.root = true\n        root.firstRoot = true\n      } catch (e) {\n        return callback(new LessError(e, imports, fileInfo.filename))\n      }\n\n      // If `i` is smaller than the `input.length - 1`,\n      // it means the parser wasn't able to parse the whole\n      // string, so we've got a parsing error.\n      //\n      // We try to extract a \\n delimited string,\n      // showing the line where the parse error occurred.\n      // We split it up into two parts (the part which parsed,\n      // and the part which didn't), so we can color them differently.\n      const endInfo = parserInput.end()\n      if (!endInfo.isFinished) {\n        let message = endInfo.furthestPossibleErrorMessage\n\n        if (!message) {\n          message = 'Unrecognised input'\n          if (endInfo.furthestChar === '}') {\n            message += \". Possibly missing opening '{'\"\n          } else if (endInfo.furthestChar === ')') {\n            message += \". Possibly missing opening '('\"\n          } else if (endInfo.furthestReachedEnd) {\n            message += '. Possibly missing something'\n          }\n        }\n\n        error = new LessError(\n          {\n            type: 'Parse',\n            message,\n            index: endInfo.furthest,\n            filename: fileInfo.filename,\n          },\n          imports\n        )\n      }\n\n      const finish = e => {\n        e = error || e || imports.error\n\n        if (e) {\n          if (!(e instanceof LessError)) {\n            e = new LessError(e, imports, fileInfo.filename)\n          }\n\n          return callback(e)\n        } else {\n          return callback(null, root)\n        }\n      }\n\n      if (context.processImports !== false) {\n        new visitors.ImportVisitor(imports, finish).run(root)\n      } else {\n        return finish()\n      }\n    },\n\n    //\n    // Here in, the parsing rules/functions\n    //\n    // The basic structure of the syntax tree generated is as follows:\n    //\n    //   Ruleset ->  Rule -> Value -> Expression -> Entity\n    //\n    // Here's some Less code:\n    //\n    //    .class {\n    //      color: #fff;\n    //      border: 1px solid #000;\n    //      width: @w + 4px;\n    //      > .child {...}\n    //    }\n    //\n    // And here's what the parse tree might look like:\n    //\n    //     Ruleset (Selector '.class', [\n    //         Rule (\"color\",  Value ([Expression [Color #fff]]))\n    //         Rule (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n    //         Rule (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n    //         Ruleset (Selector [Element '>', '.child'], [...])\n    //     ])\n    //\n    //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n    //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n    //  first, before parsing, that's when we use `peek()`.\n    //\n    parsers: (parsers = {\n      //\n      // The `primary` rule is the *entry* and *exit* point of the parser.\n      // The rules here can appear at any level of the parse tree.\n      //\n      // The recursive nature of the grammar is an interplay between the `block`\n      // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n      // as represented by this simplified grammar:\n      //\n      //     primary  →  (ruleset | rule)+\n      //     ruleset  →  selector+ block\n      //     block    →  '{' primary '}'\n      //\n      // Only at one point is the primary rule not called from the\n      // block rule: at the root level.\n      //\n      primary() {\n        const mixin = this.mixin\n        let root = []\n        let node\n\n        while (true) {\n          while (true) {\n            node = this.comment()\n            if (!node) {\n              break\n            }\n            root.push(node)\n          }\n          // always process comments before deciding if finished\n          if (parserInput.finished) {\n            break\n          }\n          if (parserInput.peek('}')) {\n            break\n          }\n\n          node = this.extendRule()\n          if (node) {\n            root = root.concat(node)\n            continue\n          }\n\n          node =\n            mixin.definition() ||\n            this.rule() ||\n            this.ruleset() ||\n            mixin.call() ||\n            this.rulesetCall() ||\n            this.entities.call() ||\n            this.directive()\n          if (node) {\n            root.push(node)\n          } else {\n            let foundSemiColon = false\n            while (parserInput.$char(';')) {\n              foundSemiColon = true\n            }\n            if (!foundSemiColon) {\n              break\n            }\n          }\n        }\n\n        return root\n      },\n\n      // comments are collected by the main parsing mechanism and then assigned to nodes\n      // where the current structure allows it\n      comment() {\n        if (parserInput.commentStore.length) {\n          const comment = parserInput.commentStore.shift()\n          return new tree.Comment(\n            comment.text,\n            comment.isLineComment,\n            comment.index,\n            fileInfo\n          )\n        }\n      },\n\n      //\n      // Entities are tokens which can be found inside an Expression\n      //\n      entities: {\n        //\n        // A string, which supports escaping \" and '\n        //\n        //     \"milky way\" 'he\\'s the one!'\n        //\n        quoted() {\n          let str\n          const index = parserInput.i\n          let isEscaped = false\n\n          parserInput.save()\n          if (parserInput.$char('~')) {\n            isEscaped = true\n          }\n          str = parserInput.$quoted()\n          if (!str) {\n            parserInput.restore()\n            return\n          }\n          parserInput.forget()\n\n          return new tree.Quoted(\n            str.charAt(0),\n            str.substr(1, str.length - 2),\n            isEscaped,\n            index,\n            fileInfo\n          )\n        },\n\n        //\n        // A catch-all word, such as:\n        //\n        //     black border-collapse\n        //\n        keyword() {\n          const k =\n            parserInput.$char('%') ||\n            parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]*/)\n          if (k) {\n            return tree.Color.fromKeyword(k) || new tree.Keyword(k)\n          }\n        },\n\n        //\n        // A function call\n        //\n        //     rgb(255, 0, 255)\n        //\n        // We also try to catch IE's `alpha()`, but let the `alpha` parser\n        // deal with the details.\n        //\n        // The arguments are parsed with the `entities.arguments` parser.\n        //\n        call() {\n          let name\n          let nameLC\n          let args\n          let alpha\n          const index = parserInput.i\n\n          // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n          if (parserInput.peek(/^url\\(/i)) {\n            return\n          }\n\n          parserInput.save()\n\n          name = parserInput.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/)\n          if (!name) {\n            parserInput.forget()\n            return\n          }\n\n          name = name[1]\n          nameLC = name.toLowerCase()\n\n          if (nameLC === 'alpha') {\n            alpha = parsers.alpha()\n            if (alpha) {\n              parserInput.forget()\n              return alpha\n            }\n          }\n\n          args = this.arguments()\n\n          if (!parserInput.$char(')')) {\n            parserInput.restore(\"Could not parse call arguments or missing ')'\")\n            return\n          }\n\n          parserInput.forget()\n          return new tree.Call(name, args, index, fileInfo)\n        },\n        arguments() {\n          const argsSemiColon = []\n          const argsComma = []\n          let expressions = []\n          let isSemiColonSeparated\n          let value\n          let arg\n\n          parserInput.save()\n\n          while (true) {\n            arg =\n              parsers.detachedRuleset() ||\n              this.assignment() ||\n              parsers.expression()\n\n            if (!arg) {\n              break\n            }\n\n            value = arg\n\n            if (arg.value && arg.value.length == 1) {\n              value = arg.value[0]\n            }\n\n            if (value) {\n              expressions.push(value)\n            }\n\n            argsComma.push(value)\n\n            if (parserInput.$char(',')) {\n              continue\n            }\n\n            if (parserInput.$char(';') || isSemiColonSeparated) {\n              isSemiColonSeparated = true\n\n              if (expressions.length > 1) {\n                value = new tree.Value(expressions)\n              }\n              argsSemiColon.push(value)\n\n              expressions = []\n            }\n          }\n\n          parserInput.forget()\n          return isSemiColonSeparated ? argsSemiColon : argsComma\n        },\n        literal() {\n          return (\n            this.dimension() ||\n            this.color() ||\n            this.quoted() ||\n            this.unicodeDescriptor()\n          )\n        },\n\n        // Assignments are argument entities for calls.\n        // They are present in ie filter properties as shown below.\n        //\n        //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n        //\n\n        assignment() {\n          let key\n          let value\n          parserInput.save()\n          key = parserInput.$re(/^\\w+(?=\\s?=)/i)\n          if (!key) {\n            parserInput.restore()\n            return\n          }\n          if (!parserInput.$char('=')) {\n            parserInput.restore()\n            return\n          }\n          value = parsers.entity()\n          if (value) {\n            parserInput.forget()\n            return new tree.Assignment(key, value)\n          } else {\n            parserInput.restore()\n          }\n        },\n\n        //\n        // Parse url() tokens\n        //\n        // We use a specific rule for urls, because they don't really behave like\n        // standard function calls. The difference is that the argument doesn't have\n        // to be enclosed within a string, so it can't be parsed as an Expression.\n        //\n        url() {\n          let value\n          const index = parserInput.i\n\n          parserInput.autoCommentAbsorb = false\n\n          if (!parserInput.$str('url(')) {\n            parserInput.autoCommentAbsorb = true\n            return\n          }\n\n          value =\n            this.quoted() ||\n            this.variable() ||\n            parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) ||\n            ''\n\n          parserInput.autoCommentAbsorb = true\n\n          expectChar(')')\n\n          return new tree.URL(\n            value.value != null || value instanceof tree.Variable\n              ? value\n              : new tree.Anonymous(value),\n            index,\n            fileInfo\n          )\n        },\n\n        //\n        // A Variable entity, such as `@fink`, in\n        //\n        //     width: @fink + 2px\n        //\n        // We use a different parser for variable definitions,\n        // see `parsers.variable`.\n        //\n        variable() {\n          let name\n          const index = parserInput.i\n\n          if (\n            parserInput.currentChar() === '@' &&\n            (name = parserInput.$re(/^@@?[\\w-]+/))\n          ) {\n            return new tree.Variable(name, index, fileInfo)\n          }\n        },\n\n        // A variable entity using the protective {} e.g. @{var}\n        variableCurly() {\n          let curly\n          const index = parserInput.i\n\n          if (\n            parserInput.currentChar() === '@' &&\n            (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))\n          ) {\n            return new tree.Variable(`@${curly[1]}`, index, fileInfo)\n          }\n        },\n\n        //\n        // A Hexadecimal color\n        //\n        //     #4F3C2F\n        //\n        // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n        //\n        color() {\n          let rgb\n\n          if (\n            parserInput.currentChar() === '#' &&\n            (rgb = parserInput.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))\n          ) {\n            // strip colons, brackets, whitespaces and other characters that should not\n            // definitely be part of color string\n            let colorCandidateString = rgb.input.match(/^#([\\w]+).*/)\n            colorCandidateString = colorCandidateString[1]\n            if (!colorCandidateString.match(/^[A-Fa-f0-9]+$/)) {\n              // verify if candidate consists only of allowed HEX characters\n              error('Invalid HEX color code')\n            }\n            return new tree.Color(rgb[1], undefined, `#${colorCandidateString}`)\n          }\n        },\n\n        colorKeyword() {\n          parserInput.save()\n          const autoCommentAbsorb = parserInput.autoCommentAbsorb\n          parserInput.autoCommentAbsorb = false\n          const k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/)\n          parserInput.autoCommentAbsorb = autoCommentAbsorb\n          if (!k) {\n            parserInput.forget()\n            return\n          }\n          parserInput.restore()\n          const color = tree.Color.fromKeyword(k)\n          if (color) {\n            parserInput.$str(k)\n            return color\n          }\n        },\n\n        //\n        // A Dimension, that is, a number and a unit\n        //\n        //     0.5em 95%\n        //\n        dimension() {\n          if (parserInput.peekNotNumeric()) {\n            return\n          }\n\n          const value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i)\n          if (value) {\n            return new tree.Dimension(value[1], value[2])\n          }\n        },\n\n        //\n        // A unicode descriptor, as is used in unicode-range\n        //\n        // U+0??  or U+00A1-00A9\n        //\n        unicodeDescriptor() {\n          let ud\n\n          ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/)\n          if (ud) {\n            return new tree.UnicodeDescriptor(ud[0])\n          }\n        },\n\n        //\n        // JavaScript code to be evaluated\n        //\n        //     `window.location.href`\n        //\n        javascript() {\n          let js\n          const index = parserInput.i\n\n          parserInput.save()\n\n          const escape = parserInput.$char('~')\n          const jsQuote = parserInput.$char('`')\n\n          if (!jsQuote) {\n            parserInput.restore()\n            return\n          }\n\n          js = parserInput.$re(/^[^`]*`/)\n          if (js) {\n            parserInput.forget()\n            return new tree.JavaScript(\n              js.substr(0, js.length - 1),\n              Boolean(escape),\n              index,\n              fileInfo\n            )\n          }\n          parserInput.restore('invalid javascript definition')\n        },\n      },\n\n      //\n      // The variable part of a variable definition. Used in the `rule` parser\n      //\n      //     @fink:\n      //\n      variable() {\n        let name\n\n        if (\n          parserInput.currentChar() === '@' &&\n          (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))\n        ) {\n          return name[1]\n        }\n      },\n\n      //\n      // The variable part of a variable definition. Used in the `rule` parser\n      //\n      //     @fink();\n      //\n      rulesetCall() {\n        let name\n\n        if (\n          parserInput.currentChar() === '@' &&\n          (name = parserInput.$re(/^(@[\\w-]+)\\(\\s*\\)\\s*;/))\n        ) {\n          return new tree.RulesetCall(name[1])\n        }\n      },\n\n      //\n      // extend syntax - used to extend selectors\n      //\n      extend(isRule) {\n        let elements\n        let e\n        const index = parserInput.i\n        let option\n        let extendList\n        let extend\n\n        if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\n          return\n        }\n\n        do {\n          option = null\n          elements = null\n          while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n            e = this.element()\n            if (!e) {\n              break\n            }\n            if (elements) {\n              elements.push(e)\n            } else {\n              elements = [e]\n            }\n          }\n\n          option = option && option[1]\n          if (!elements) {\n            error('Missing target selector for :extend().')\n          }\n          extend = new tree.Extend(\n            new tree.Selector(elements),\n            option,\n            index,\n            fileInfo\n          )\n          if (extendList) {\n            extendList.push(extend)\n          } else {\n            extendList = [extend]\n          }\n        } while (parserInput.$char(','))\n\n        expect(/^\\)/)\n\n        if (isRule) {\n          expect(/^;/)\n        }\n\n        return extendList\n      },\n\n      //\n      // extendRule - used in a rule to extend all the parent selectors\n      //\n      extendRule() {\n        return this.extend(true)\n      },\n\n      //\n      // Mixins\n      //\n      mixin: {\n        //\n        // A Mixin call, with an optional argument list\n        //\n        //     #mixins > .square(#fff);\n        //     .rounded(4px, black);\n        //     .button;\n        //\n        // The `while` loop is there because mixins can be\n        // namespaced, but we only support the child and descendant\n        // selector for now.\n        //\n        call() {\n          const s = parserInput.currentChar()\n          let important = false\n          const index = parserInput.i\n          let elemIndex\n          let elements\n          let elem\n          let e\n          let c\n          let args\n\n          if (s !== '.' && s !== '#') {\n            return\n          }\n\n          parserInput.save() // stop us absorbing part of an invalid selector\n\n          while (true) {\n            elemIndex = parserInput.i\n            e = parserInput.$re(\n              /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/\n            )\n            if (!e) {\n              break\n            }\n            elem = new tree.Element(c, e, elemIndex, fileInfo)\n            if (elements) {\n              elements.push(elem)\n            } else {\n              elements = [elem]\n            }\n            c = parserInput.$char('>')\n          }\n\n          if (elements) {\n            if (parserInput.$char('(')) {\n              args = this.args(true).args\n              expectChar(')')\n            }\n\n            if (parsers.important()) {\n              important = true\n            }\n\n            if (parsers.end()) {\n              parserInput.forget()\n              return new tree.mixin.Call(\n                elements,\n                args,\n                index,\n                fileInfo,\n                important\n              )\n            }\n          }\n\n          parserInput.restore()\n        },\n        args(isCall) {\n          const entities = parsers.entities\n          const returner = { args: null, variadic: false }\n          let expressions = []\n          const argsSemiColon = []\n          const argsComma = []\n          let isSemiColonSeparated\n          let expressionContainsNamed\n          let name\n          let nameLoop\n          let value\n          let arg\n          let expand\n\n          parserInput.save()\n\n          while (true) {\n            if (isCall) {\n              arg = parsers.detachedRuleset() || parsers.expression()\n            } else {\n              parserInput.commentStore.length = 0\n              if (parserInput.$str('...')) {\n                returner.variadic = true\n                if (parserInput.$char(';') && !isSemiColonSeparated) {\n                  isSemiColonSeparated = true\n                }\n                ;(isSemiColonSeparated ? argsSemiColon : argsComma).push({\n                  variadic: true,\n                })\n                break\n              }\n              arg =\n                entities.variable() || entities.literal() || entities.keyword()\n            }\n\n            if (!arg) {\n              break\n            }\n\n            nameLoop = null\n            if (arg.throwAwayComments) {\n              arg.throwAwayComments()\n            }\n            value = arg\n            let val = null\n\n            if (isCall) {\n              // Variable\n              if (arg.value && arg.value.length == 1) {\n                val = arg.value[0]\n              }\n            } else {\n              val = arg\n            }\n\n            if (val && val instanceof tree.Variable) {\n              if (parserInput.$char(':')) {\n                if (expressions.length > 0) {\n                  if (isSemiColonSeparated) {\n                    error('Cannot mix ; and , as delimiter types')\n                  }\n                  expressionContainsNamed = true\n                }\n\n                value = parsers.detachedRuleset() || parsers.expression()\n\n                if (!value) {\n                  if (isCall) {\n                    error('could not understand value for named argument')\n                  } else {\n                    parserInput.restore()\n                    returner.args = []\n                    return returner\n                  }\n                }\n                nameLoop = name = val.name\n              } else if (parserInput.$str('...')) {\n                if (!isCall) {\n                  returner.variadic = true\n                  if (parserInput.$char(';') && !isSemiColonSeparated) {\n                    isSemiColonSeparated = true\n                  }\n                  ;(isSemiColonSeparated ? argsSemiColon : argsComma).push({\n                    name: arg.name,\n                    variadic: true,\n                  })\n                  break\n                } else {\n                  expand = true\n                }\n              } else if (!isCall) {\n                name = nameLoop = val.name\n                value = null\n              }\n            }\n\n            if (value) {\n              expressions.push(value)\n            }\n\n            argsComma.push({ name: nameLoop, value, expand })\n\n            if (parserInput.$char(',')) {\n              continue\n            }\n\n            if (parserInput.$char(';') || isSemiColonSeparated) {\n              if (expressionContainsNamed) {\n                error('Cannot mix ; and , as delimiter types')\n              }\n\n              isSemiColonSeparated = true\n\n              if (expressions.length > 1) {\n                value = new tree.Value(expressions)\n              }\n              argsSemiColon.push({ name, value, expand })\n\n              name = null\n              expressions = []\n              expressionContainsNamed = false\n            }\n          }\n\n          parserInput.forget()\n          returner.args = isSemiColonSeparated ? argsSemiColon : argsComma\n          return returner\n        },\n        //\n        // A Mixin definition, with a list of parameters\n        //\n        //     .rounded (@radius: 2px, @color) {\n        //        ...\n        //     }\n        //\n        // Until we have a finer grained state-machine, we have to\n        // do a look-ahead, to make sure we don't have a mixin call.\n        // See the `rule` function for more information.\n        //\n        // We start by matching `.rounded (`, and then proceed on to\n        // the argument list, which has optional default values.\n        // We store the parameters in `params`, with a `value` key,\n        // if there is a value, such as in the case of `@radius`.\n        //\n        // Once we've got our params list, and a closing `)`, we parse\n        // the `{...}` block.\n        //\n        definition() {\n          let name\n          let params = []\n          let match\n          let ruleset\n          let cond\n          let variadic = false\n          if (\n            (parserInput.currentChar() !== '.' &&\n              parserInput.currentChar() !== '#') ||\n            parserInput.peek(/^[^{]*\\}/)\n          ) {\n            return\n          }\n\n          parserInput.save()\n\n          match = parserInput.$re(\n            /^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/\n          )\n          if (match) {\n            name = match[1]\n\n            const argInfo = this.args(false)\n            params = argInfo.args\n            variadic = argInfo.variadic\n\n            // .mixincall(\"@{a}\");\n            // looks a bit like a mixin definition..\n            // also\n            // .mixincall(@a: {rule: set;});\n            // so we have to be nice and restore\n            if (!parserInput.$char(')')) {\n              parserInput.restore(\"Missing closing ')'\")\n              return\n            }\n\n            parserInput.commentStore.length = 0\n\n            if (parserInput.$str('when')) {\n              // Guard\n              cond = expect(parsers.conditions, 'expected condition')\n            }\n\n            ruleset = parsers.block()\n\n            if (ruleset) {\n              parserInput.forget()\n              return new tree.mixin.Definition(\n                name,\n                params,\n                ruleset,\n                cond,\n                variadic\n              )\n            } else {\n              parserInput.restore()\n            }\n          } else {\n            parserInput.forget()\n          }\n        },\n      },\n\n      //\n      // Entities are the smallest recognized token,\n      // and can be found inside a rule's value.\n      //\n      entity() {\n        const entities = this.entities\n\n        return (\n          this.comment() ||\n          entities.literal() ||\n          entities.variable() ||\n          entities.url() ||\n          entities.call() ||\n          entities.keyword() ||\n          entities.javascript()\n        )\n      },\n\n      //\n      // A Rule terminator. Note that we use `peek()` to check for '}',\n      // because the `block` rule will be expecting it, but we still need to make sure\n      // it's there, if ';' was omitted.\n      //\n      end() {\n        return parserInput.$char(';') || parserInput.peek('}')\n      },\n\n      //\n      // IE's alpha function\n      //\n      //     alpha(opacity=88)\n      //\n      alpha() {\n        let value\n\n        // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n        if (!parserInput.$re(/^opacity=/i)) {\n          return\n        }\n        value = parserInput.$re(/^\\d+/)\n        if (!value) {\n          value = expect(this.entities.variable, 'Could not parse alpha')\n        }\n        expectChar(')')\n        return new tree.Alpha(value)\n      },\n\n      //\n      // A Selector Element\n      //\n      //     div\n      //     + h1\n      //     #socks\n      //     input[type=\"text\"]\n      //\n      // Elements are the building blocks for Selectors,\n      // they are made out of a `Combinator` (see combinator rule),\n      // and an element name, such as a tag a class, or `*`.\n      //\n      element() {\n        let e\n        let c\n        let v\n        const index = parserInput.i\n\n        c = this.combinator()\n\n        e =\n          parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\n          parserInput.$re(\n            /^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/\n          ) ||\n          parserInput.$char('*') ||\n          parserInput.$char('&') ||\n          this.attribute() ||\n          parserInput.$re(/^\\([^&()@]+\\)/) ||\n          parserInput.$re(/^[\\.#:](?=@)/) ||\n          this.entities.variableCurly()\n\n        if (!e) {\n          parserInput.save()\n          if (parserInput.$char('(')) {\n            if ((v = this.selector()) && parserInput.$char(')')) {\n              e = new tree.Paren(v)\n              parserInput.forget()\n            } else {\n              parserInput.restore(\"Missing closing ')'\")\n            }\n          } else {\n            parserInput.forget()\n          }\n        }\n\n        if (e) {\n          return new tree.Element(c, e, index, fileInfo)\n        }\n      },\n\n      //\n      // Combinators combine elements together, in a Selector.\n      //\n      // Because our parser isn't white-space sensitive, special care\n      // has to be taken, when parsing the descendant combinator, ` `,\n      // as it's an empty space. We have to check the previous character\n      // in the input, to see if it's a ` ` character. More info on how\n      // we deal with this in *combinator.js*.\n      //\n      combinator() {\n        let c = parserInput.currentChar()\n\n        if (c === '/') {\n          parserInput.save()\n          const slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i)\n          if (slashedCombinator) {\n            parserInput.forget()\n            return new tree.Combinator(slashedCombinator)\n          }\n          parserInput.restore()\n        }\n\n        if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n          parserInput.i++\n          if (c === '^' && parserInput.currentChar() === '^') {\n            c = '^^'\n            parserInput.i++\n          }\n          while (parserInput.isWhitespace()) {\n            parserInput.i++\n          }\n          return new tree.Combinator(c)\n        } else if (parserInput.isWhitespace(-1)) {\n          return new tree.Combinator(' ')\n        } else {\n          return new tree.Combinator(null)\n        }\n      },\n      //\n      // A CSS selector (see selector below)\n      // with less extensions e.g. the ability to extend and guard\n      //\n      lessSelector() {\n        return this.selector(true)\n      },\n      //\n      // A CSS Selector\n      //\n      //     .class > div + h1\n      //     li a:hover\n      //\n      // Selectors are made out of one or more Elements, see above.\n      //\n      selector(isLess) {\n        const index = parserInput.i\n        let elements\n        let extendList\n        let c\n        let e\n        let allExtends\n        let when\n        let condition\n\n        while (\n          (isLess && (extendList = this.extend())) ||\n          (isLess && (when = parserInput.$str('when'))) ||\n          (e = this.element())\n        ) {\n          if (when) {\n            condition = expect(this.conditions, 'expected condition')\n          } else if (condition) {\n            error('CSS guard can only be used at the end of selector')\n          } else if (extendList) {\n            if (allExtends) {\n              allExtends = allExtends.concat(extendList)\n            } else {\n              allExtends = extendList\n            }\n          } else {\n            if (allExtends) {\n              error('Extend can only be used at the end of selector')\n            }\n            c = parserInput.currentChar()\n            if (elements) {\n              elements.push(e)\n            } else {\n              elements = [e]\n            }\n            e = null\n          }\n          if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n            break\n          }\n        }\n\n        if (elements) {\n          return new tree.Selector(\n            elements,\n            allExtends,\n            condition,\n            index,\n            fileInfo\n          )\n        }\n        if (allExtends) {\n          error(\n            'Extend must be used to extend a selector, it cannot be used on its own'\n          )\n        }\n      },\n      attribute() {\n        if (!parserInput.$char('[')) {\n          return\n        }\n\n        const entities = this.entities\n        let key\n        let val\n        let op\n\n        if (!(key = entities.variableCurly())) {\n          key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/)\n        }\n\n        op = parserInput.$re(/^[|~*$^]?=/)\n        if (op) {\n          val =\n            entities.quoted() ||\n            parserInput.$re(/^[0-9]+%/) ||\n            parserInput.$re(/^[\\w-]+/) ||\n            entities.variableCurly()\n        }\n\n        expectChar(']')\n\n        return new tree.Attribute(key, op, val)\n      },\n\n      //\n      // The `block` rule is used by `ruleset` and `mixin.definition`.\n      // It's a wrapper around the `primary` rule, with added `{}`.\n      //\n      block() {\n        let content\n        if (\n          parserInput.$char('{') &&\n          (content = this.primary()) &&\n          parserInput.$char('}')\n        ) {\n          return content\n        }\n      },\n\n      blockRuleset() {\n        let block = this.block()\n\n        if (block) {\n          block = new tree.Ruleset(null, block)\n        }\n        return block\n      },\n\n      detachedRuleset() {\n        const blockRuleset = this.blockRuleset()\n        if (blockRuleset) {\n          return new tree.DetachedRuleset(blockRuleset)\n        }\n      },\n\n      //\n      // div, .class, body > p {...}\n      //\n      ruleset() {\n        let selectors\n        let s\n        let rules\n        let debugInfo\n\n        parserInput.save()\n\n        if (context.dumpLineNumbers) {\n          debugInfo = getDebugInfo(parserInput.i)\n        }\n\n        while (true) {\n          s = this.lessSelector()\n          if (!s) {\n            break\n          }\n          if (selectors) {\n            selectors.push(s)\n          } else {\n            selectors = [s]\n          }\n          parserInput.commentStore.length = 0\n          if (s.condition && selectors.length > 1) {\n            error('Guards are only currently allowed on a single selector.')\n          }\n          if (!parserInput.$char(',')) {\n            break\n          }\n          if (s.condition) {\n            error('Guards are only currently allowed on a single selector.')\n          }\n          parserInput.commentStore.length = 0\n        }\n\n        if (selectors && (rules = this.block())) {\n          parserInput.forget()\n          const ruleset = new tree.Ruleset(\n            selectors,\n            rules,\n            context.strictImports\n          )\n          if (context.dumpLineNumbers) {\n            ruleset.debugInfo = debugInfo\n          }\n          return ruleset\n        } else {\n          parserInput.restore()\n        }\n      },\n      rule(tryAnonymous) {\n        let name\n        let value\n        const startOfRule = parserInput.i\n        const c = parserInput.currentChar()\n        let important\n        let merge\n        let isVariable\n\n        if (c === '.' || c === '#' || c === '&' || c === ':') {\n          return\n        }\n\n        parserInput.save()\n\n        name = this.variable() || this.ruleProperty()\n        if (name) {\n          isVariable = typeof name === 'string'\n\n          if (isVariable) {\n            value = this.detachedRuleset()\n          }\n\n          parserInput.commentStore.length = 0\n          if (!value) {\n            // a name returned by this.ruleProperty() is always an array of the form:\n            // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n            // where each item is a tree.Keyword or tree.Variable\n            merge = !isVariable && name.length > 1 && name.pop().value\n\n            // prefer to try to parse first if its a variable or we are compressing\n            // but always fallback on the other one\n            const tryValueFirst =\n              !tryAnonymous && (context.compress || isVariable)\n\n            if (tryValueFirst) {\n              value = this.value()\n            }\n            if (!value) {\n              value = this.anonymousValue()\n              if (value) {\n                parserInput.forget()\n                // anonymous values absorb the end ';' which is required for them to work\n                return new tree.Rule(\n                  name,\n                  value,\n                  false,\n                  merge,\n                  startOfRule,\n                  fileInfo\n                )\n              }\n            }\n            if (!tryValueFirst && !value) {\n              value = this.value()\n            }\n\n            important = this.important()\n          }\n\n          if (value && this.end()) {\n            parserInput.forget()\n            return new tree.Rule(\n              name,\n              value,\n              important,\n              merge,\n              startOfRule,\n              fileInfo\n            )\n          } else {\n            parserInput.restore()\n            if (value && !tryAnonymous) {\n              return this.rule(true)\n            }\n          }\n        } else {\n          parserInput.forget()\n        }\n      },\n      anonymousValue() {\n        const match = parserInput.$re(/^([^@+\\/'\"*`(;{}-]*);/)\n        if (match) {\n          return new tree.Anonymous(match[1])\n        }\n      },\n\n      //\n      // An @import directive\n      //\n      //     @import \"lib\";\n      //\n      // Depending on our environment, importing is done differently:\n      // In the browser, it's an XHR request, in Node, it would be a\n      // file-system operation. The function used for importing is\n      // stored in `import`, which we pass to the Import constructor.\n      //\n      import: function() {\n        let path\n        let features\n        const index = parserInput.i\n\n        const dir = parserInput.$re(/^@import?\\s+/)\n\n        if (dir) {\n          const options = (dir ? this.importOptions() : null) || {}\n\n          if ((path = this.entities.quoted() || this.entities.url())) {\n            features = this.mediaFeatures()\n\n            if (!parserInput.$char(';')) {\n              parserInput.i = index\n              error(\n                'missing semi-colon or unrecognised media features on import'\n              )\n            }\n            features = features && new tree.Value(features)\n            return new tree.Import(path, features, options, index, fileInfo)\n          } else {\n            parserInput.i = index\n            error('malformed import statement')\n          }\n        }\n      },\n\n      importOptions() {\n        let o\n        const options = {}\n        let optionName\n        let value\n\n        // list of options, surrounded by parens\n        if (!parserInput.$char('(')) {\n          return null\n        }\n        do {\n          o = this.importOption()\n          if (o) {\n            optionName = o\n            value = true\n            switch (optionName) {\n              case 'css':\n                optionName = 'less'\n                value = false\n                break\n              case 'once':\n                optionName = 'multiple'\n                value = false\n                break\n            }\n            options[optionName] = value\n            if (!parserInput.$char(',')) {\n              break\n            }\n          }\n        } while (o)\n        expectChar(')')\n        return options\n      },\n\n      importOption() {\n        const opt = parserInput.$re(\n          /^(less|css|multiple|once|inline|reference|optional)/\n        )\n        if (opt) {\n          return opt[1]\n        }\n      },\n\n      mediaFeature() {\n        const entities = this.entities\n        const nodes = []\n        let e\n        let p\n        parserInput.save()\n        do {\n          e = entities.keyword() || entities.variable()\n          if (e) {\n            nodes.push(e)\n          } else if (parserInput.$char('(')) {\n            p = this.property()\n            e = this.value()\n            if (parserInput.$char(')')) {\n              if (p && e) {\n                nodes.push(\n                  new tree.Paren(\n                    new tree.Rule(\n                      p,\n                      e,\n                      null,\n                      null,\n                      parserInput.i,\n                      fileInfo,\n                      true\n                    )\n                  )\n                )\n              } else if (e) {\n                nodes.push(new tree.Paren(e))\n              } else {\n                error('badly formed media feature definition')\n              }\n            } else {\n              error(\"Missing closing ')'\", 'Parse')\n            }\n          }\n        } while (e)\n\n        parserInput.forget()\n        if (nodes.length > 0) {\n          return new tree.Expression(nodes)\n        }\n      },\n\n      mediaFeatures() {\n        const entities = this.entities\n        const features = []\n        let e\n        do {\n          e = this.mediaFeature()\n          if (e) {\n            features.push(e)\n            if (!parserInput.$char(',')) {\n              break\n            }\n          } else {\n            e = entities.variable()\n            if (e) {\n              features.push(e)\n              if (!parserInput.$char(',')) {\n                break\n              }\n            }\n          }\n        } while (e)\n\n        return features.length > 0 ? features : null\n      },\n\n      media() {\n        let features\n        let rules\n        let media\n        let debugInfo\n        const index = parserInput.i\n\n        if (context.dumpLineNumbers) {\n          debugInfo = getDebugInfo(index)\n        }\n\n        parserInput.save()\n\n        if (parserInput.$str('@media')) {\n          features = this.mediaFeatures()\n\n          rules = this.block()\n\n          if (!rules) {\n            error(\n              'media definitions require block statements after any features'\n            )\n          }\n\n          parserInput.forget()\n\n          media = new tree.Media(rules, features, index, fileInfo)\n          if (context.dumpLineNumbers) {\n            media.debugInfo = debugInfo\n          }\n\n          return media\n        }\n\n        parserInput.restore()\n      },\n\n      //\n      // A @plugin directive, used to import compiler extensions dynamically.\n      //\n      //     @plugin \"lib\";\n      //\n      // Depending on our environment, importing is done differently:\n      // In the browser, it's an XHR request, in Node, it would be a\n      // file-system operation. The function used for importing is\n      // stored in `import`, which we pass to the Import constructor.\n      //\n      plugin() {\n        let path\n        const index = parserInput.i\n        const dir = parserInput.$re(/^@plugin?\\s+/)\n\n        if (dir) {\n          const options = { plugin: true }\n\n          if ((path = this.entities.quoted() || this.entities.url())) {\n            if (!parserInput.$char(';')) {\n              parserInput.i = index\n              error('missing semi-colon on plugin')\n            }\n\n            return new tree.Import(path, null, options, index, fileInfo)\n          } else {\n            parserInput.i = index\n            error('malformed plugin statement')\n          }\n        }\n      },\n\n      //\n      // A CSS Directive\n      //\n      //     @charset \"utf-8\";\n      //\n      directive() {\n        const index = parserInput.i\n        let name\n        let value\n        let rules\n        let nonVendorSpecificName\n        let hasIdentifier\n        let hasExpression\n        let hasUnknown\n        let hasBlock = true\n        let isRooted = true\n\n        if (parserInput.currentChar() !== '@') {\n          return\n        }\n\n        value = this['import']() || this.plugin() || this.media()\n        if (value) {\n          return value\n        }\n\n        parserInput.save()\n\n        name = parserInput.$re(/^@[a-z-]+/)\n\n        if (!name) {\n          return\n        }\n\n        nonVendorSpecificName = name\n        if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n          nonVendorSpecificName = `@${name.slice(name.indexOf('-', 2) + 1)}`\n        }\n\n        switch (nonVendorSpecificName) {\n          case '@charset':\n            hasIdentifier = true\n            hasBlock = false\n            break\n          case '@namespace':\n            hasExpression = true\n            hasBlock = false\n            break\n          case '@keyframes':\n          case '@counter-style':\n            hasIdentifier = true\n            break\n          case '@document':\n          case '@supports':\n            hasUnknown = true\n            isRooted = false\n            break\n          default:\n            hasUnknown = true\n            break\n        }\n\n        parserInput.commentStore.length = 0\n\n        if (hasIdentifier) {\n          value = this.entity()\n          if (!value) {\n            error(`expected ${name} identifier`)\n          }\n        } else if (hasExpression) {\n          value = this.expression()\n          if (!value) {\n            error(`expected ${name} expression`)\n          }\n        } else if (hasUnknown) {\n          value = (parserInput.$re(/^[^{;]+/) || '').trim()\n          hasBlock = parserInput.currentChar() == '{'\n          if (value) {\n            value = new tree.Anonymous(value)\n          }\n        }\n\n        if (hasBlock) {\n          rules = this.blockRuleset()\n        }\n\n        if (rules || (!hasBlock && value && parserInput.$char(';'))) {\n          parserInput.forget()\n          return new tree.Directive(\n            name,\n            value,\n            rules,\n            index,\n            fileInfo,\n            context.dumpLineNumbers ? getDebugInfo(index) : null,\n            isRooted\n          )\n        }\n\n        parserInput.restore('directive options not recognised')\n      },\n\n      //\n      // A Value is a comma-delimited list of Expressions\n      //\n      //     font-family: Baskerville, Georgia, serif;\n      //\n      // In a Rule, a Value represents everything after the `:`,\n      // and before the `;`.\n      //\n      value() {\n        let e\n        const expressions = []\n\n        do {\n          e = this.expression()\n          if (e) {\n            expressions.push(e)\n            if (!parserInput.$char(',')) {\n              break\n            }\n          }\n        } while (e)\n\n        if (expressions.length > 0) {\n          return new tree.Value(expressions)\n        }\n      },\n      important() {\n        if (parserInput.currentChar() === '!') {\n          return parserInput.$re(/^! *important/)\n        }\n      },\n      sub() {\n        let a\n        let e\n\n        parserInput.save()\n        if (parserInput.$char('(')) {\n          a = this.addition()\n          if (a && parserInput.$char(')')) {\n            parserInput.forget()\n            e = new tree.Expression([a])\n            e.parens = true\n            return e\n          }\n          parserInput.restore(\"Expected ')'\")\n          return\n        }\n        parserInput.restore()\n      },\n      multiplication() {\n        let m\n        let a\n        let op\n        let operation\n        let isSpaced\n        m = this.operand()\n        if (m) {\n          isSpaced = parserInput.isWhitespace(-1)\n          while (true) {\n            if (parserInput.peek(/^\\/[*\\/]/)) {\n              break\n            }\n\n            parserInput.save()\n\n            op = parserInput.$char('/') || parserInput.$char('*')\n\n            if (!op) {\n              parserInput.forget()\n              break\n            }\n\n            a = this.operand()\n\n            if (!a) {\n              parserInput.restore()\n              break\n            }\n            parserInput.forget()\n\n            m.parensInOp = true\n            a.parensInOp = true\n            operation = new tree.Operation(op, [operation || m, a], isSpaced)\n            isSpaced = parserInput.isWhitespace(-1)\n          }\n          return operation || m\n        }\n      },\n      addition() {\n        let m\n        let a\n        let op\n        let operation\n        let isSpaced\n        m = this.multiplication()\n        if (m) {\n          isSpaced = parserInput.isWhitespace(-1)\n          while (true) {\n            op =\n              parserInput.$re(/^[-+]\\s+/) ||\n              (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')))\n            if (!op) {\n              break\n            }\n            a = this.multiplication()\n            if (!a) {\n              break\n            }\n\n            m.parensInOp = true\n            a.parensInOp = true\n            operation = new tree.Operation(op, [operation || m, a], isSpaced)\n            isSpaced = parserInput.isWhitespace(-1)\n          }\n          return operation || m\n        }\n      },\n      conditions() {\n        let a\n        let b\n        const index = parserInput.i\n        let condition\n\n        a = this.condition()\n        if (a) {\n          while (true) {\n            if (\n              !parserInput.peek(/^,\\s*(not\\s*)?\\(/) ||\n              !parserInput.$char(',')\n            ) {\n              break\n            }\n            b = this.condition()\n            if (!b) {\n              break\n            }\n            condition = new tree.Condition('or', condition || a, b, index)\n          }\n          return condition || a\n        }\n      },\n      condition() {\n        let result\n        let logical\n        let next\n        function or() {\n          return parserInput.$str('or')\n        }\n\n        result = this.conditionAnd(this)\n        if (!result) {\n          return\n        }\n        logical = or()\n        if (logical) {\n          next = this.condition()\n          if (next) {\n            result = new tree.Condition(logical, result, next)\n          } else {\n            return\n          }\n        }\n        return result\n      },\n      conditionAnd() {\n        let result\n        let logical\n        let next\n        function insideCondition(me) {\n          return me.negatedCondition() || me.parenthesisCondition()\n        }\n        function and() {\n          return parserInput.$str('and')\n        }\n\n        result = insideCondition(this)\n        if (!result) {\n          return\n        }\n        logical = and()\n        if (logical) {\n          next = this.conditionAnd()\n          if (next) {\n            result = new tree.Condition(logical, result, next)\n          } else {\n            return\n          }\n        }\n        return result\n      },\n      negatedCondition() {\n        if (parserInput.$str('not')) {\n          const result = this.parenthesisCondition()\n          if (result) {\n            result.negate = !result.negate\n          }\n          return result\n        }\n      },\n      parenthesisCondition() {\n        function tryConditionFollowedByParenthesis(me) {\n          let body\n          parserInput.save()\n          body = me.condition()\n          if (!body) {\n            parserInput.restore()\n            return\n          }\n          if (!parserInput.$char(')')) {\n            parserInput.restore()\n            return\n          }\n          parserInput.forget()\n          return body\n        }\n\n        let body\n        parserInput.save()\n        if (!parserInput.$str('(')) {\n          parserInput.restore()\n          return\n        }\n        body = tryConditionFollowedByParenthesis(this)\n        if (body) {\n          parserInput.forget()\n          return body\n        }\n\n        body = this.atomicCondition()\n        if (!body) {\n          parserInput.restore()\n          return\n        }\n        if (!parserInput.$char(')')) {\n          parserInput.restore(`expected ')' got '${parserInput.currentChar()}'`)\n          return\n        }\n        parserInput.forget()\n        return body\n      },\n      atomicCondition() {\n        const entities = this.entities\n        const index = parserInput.i\n        let a\n        let b\n        let c\n        let op\n\n        a = this.addition() || entities.keyword() || entities.quoted()\n        if (a) {\n          if (parserInput.$char('>')) {\n            if (parserInput.$char('=')) {\n              op = '>='\n            } else {\n              op = '>'\n            }\n          } else if (parserInput.$char('<')) {\n            if (parserInput.$char('=')) {\n              op = '<='\n            } else {\n              op = '<'\n            }\n          } else if (parserInput.$char('=')) {\n            if (parserInput.$char('>')) {\n              op = '=>'\n            } else if (parserInput.$char('<')) {\n              op = '=<'\n            } else {\n              op = '='\n            }\n          }\n          if (op) {\n            b = this.addition() || entities.keyword() || entities.quoted()\n            if (b) {\n              c = new tree.Condition(op, a, b, index, false)\n            } else {\n              error('expected expression')\n            }\n          } else {\n            c = new tree.Condition(\n              '=',\n              a,\n              new tree.Keyword('true'),\n              index,\n              false\n            )\n          }\n          return c\n        }\n      },\n\n      //\n      // An operand is anything that can be part of an operation,\n      // such as a Color, or a Variable\n      //\n      operand() {\n        const entities = this.entities\n        let negate\n\n        if (parserInput.peek(/^-[@\\(]/)) {\n          negate = parserInput.$char('-')\n        }\n\n        let o =\n          this.sub() ||\n          entities.dimension() ||\n          entities.color() ||\n          entities.variable() ||\n          entities.call() ||\n          entities.colorKeyword()\n\n        if (negate) {\n          o.parensInOp = true\n          o = new tree.Negative(o)\n        }\n\n        return o\n      },\n\n      //\n      // Expressions either represent mathematical operations,\n      // or white-space delimited Entities.\n      //\n      //     1px solid black\n      //     @var * 2\n      //\n      expression() {\n        const entities = []\n        let e\n        let delim\n\n        do {\n          e = this.comment()\n          if (e) {\n            entities.push(e)\n            continue\n          }\n          e = this.addition() || this.entity()\n          if (e) {\n            entities.push(e)\n            // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n            if (!parserInput.peek(/^\\/[\\/*]/)) {\n              delim = parserInput.$char('/')\n              if (delim) {\n                entities.push(new tree.Anonymous(delim))\n              }\n            }\n          }\n        } while (e)\n        if (entities.length > 0) {\n          return new tree.Expression(entities)\n        }\n      },\n      property() {\n        const name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/)\n        if (name) {\n          return name[1]\n        }\n      },\n      ruleProperty() {\n        let name = []\n        const index = []\n        let s\n        let k\n\n        parserInput.save()\n\n        const simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/)\n        if (simpleProperty) {\n          name = [new tree.Keyword(simpleProperty[1])]\n          parserInput.forget()\n          return name\n        }\n\n        function match(re) {\n          const i = parserInput.i\n          const chunk = parserInput.$re(re)\n          if (chunk) {\n            index.push(i)\n            return name.push(chunk[1])\n          }\n        }\n\n        match(/^(\\*?)/)\n        while (true) {\n          if (!match(/^((?:[\\w-]+)|(?:@\\{[\\w-]+\\}))/)) {\n            break\n          }\n        }\n\n        if (name.length > 1 && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n          parserInput.forget()\n\n          // at last, we have the complete match now. move forward,\n          // convert name particles to tree objects and return:\n          if (name[0] === '') {\n            name.shift()\n            index.shift()\n          }\n          for (k = 0; k < name.length; k++) {\n            s = name[k]\n            name[k] =\n              s.charAt(0) !== '@'\n                ? new tree.Keyword(s)\n                : new tree.Variable(`@${s.slice(2, -1)}`, index[k], fileInfo)\n          }\n          return name\n        }\n        parserInput.restore()\n      },\n    }),\n  }\n}\nParser.serializeVars = vars => {\n  let s = ''\n\n  for (const name in vars) {\n    if (Object.hasOwnProperty.call(vars, name)) {\n      const value = vars[name]\n      s += `${(name[0] === '@' ? '' : '@') + name}: ${value}${String(\n        value\n      ).slice(-1) === ';'\n        ? ''\n        : ';'}`\n    }\n  }\n\n  return s\n}\n\nmodule.exports = Parser\n","const LessError = require('../less-error')\nconst tree = require('../tree')\n\nconst FunctionImporter = (module.exports = function FunctionImporter(\n  context,\n  fileInfo\n) {\n  this.fileInfo = fileInfo\n})\n\nFunctionImporter.prototype.eval = function(contents, callback) {\n  const loaded = {}\n  let loader\n  let registry\n\n  registry = {\n    add(name, func) {\n      loaded[name] = func\n    },\n    addMultiple(functions) {\n      Object.keys(functions).forEach(name => {\n        loaded[name] = functions[name]\n      })\n    },\n  }\n\n  try {\n    loader = new Function('functions', 'tree', 'fileInfo', contents)\n    loader(registry, tree, this.fileInfo)\n  } catch (e) {\n    callback(\n      new LessError({\n        message: `Plugin evaluation error: '${e.name}: ${e.message.replace(\n          /[\"]/g,\n          \"'\"\n        )}'`,\n        filename: this.fileInfo.filename,\n      }),\n      null\n    )\n  }\n\n  callback(null, { functions: loaded })\n}\n","const contexts = require('./contexts')\nconst Parser = require('./parser/parser')\nconst FunctionImporter = require('./plugins/function-importer')\n\nmodule.exports = environment => {\n  // FileInfo = {\n  //  'relativeUrls' - option - whether to adjust URL's to be relative\n  //  'filename' - full resolved filename of current file\n  //  'rootpath' - path to append to normal URLs for this node\n  //  'currentDirectory' - path to the current file, absolute\n  //  'rootFilename' - filename of the base file\n  //  'entryPath' - absolute path to the entry file\n  //  'reference' - whether the file should not be output and only output parts that are referenced\n\n  class ImportManager {\n    constructor(context, rootFileInfo) {\n      this.rootFilename = rootFileInfo.filename\n      this.paths = context.paths || [] // Search paths, when importing\n      this.contents = {} // map - filename to contents of all the files\n      this.contentsIgnoredChars = {} // map - filename to lines at the beginning of each file to ignore\n      this.mime = context.mime\n      this.error = null\n      this.context = context\n      // Deprecated? Unused outside of here, could be useful.\n      this.queue = [] // Files which haven't been imported yet\n      this.files = {} // Holds the imported parse trees.\n    }\n\n    /**\n         * Add an import to be imported\n         * @param path - the raw path\n         * @param tryAppendLessExtension - whether to try appending the less extension (if the path has no extension)\n         * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n         * @param importOptions - import options\n         * @param callback - callback for when it is imported\n         */\n    push(\n      path,\n      tryAppendLessExtension,\n      currentFileInfo,\n      importOptions,\n      callback\n    ) {\n      const importManager = this\n      this.queue.push(path)\n\n      const fileParsedFunc = (e, root, fullPath) => {\n        importManager.queue.splice(importManager.queue.indexOf(path), 1) // Remove the path from the queue\n\n        const importedEqualsRoot = fullPath === importManager.rootFilename\n        if (importOptions.optional && e) {\n          callback(null, { rules: [] }, false, null)\n        } else {\n          importManager.files[fullPath] = root\n          if (e && !importManager.error) {\n            importManager.error = e\n          }\n          callback(e, root, importedEqualsRoot, fullPath)\n        }\n      }\n\n      const newFileInfo = {\n        relativeUrls: this.context.relativeUrls,\n        entryPath: currentFileInfo.entryPath,\n        rootpath: currentFileInfo.rootpath,\n        rootFilename: currentFileInfo.rootFilename,\n      }\n\n      const fileManager = environment.getFileManager(\n        path,\n        currentFileInfo.currentDirectory,\n        this.context,\n        environment\n      )\n\n      if (!fileManager) {\n        fileParsedFunc({ message: `Could not find a file-manager for ${path}` })\n        return\n      }\n\n      if (tryAppendLessExtension) {\n        path = fileManager.tryAppendExtension(\n          path,\n          importOptions.plugin ? '.js' : '.less'\n        )\n      }\n\n      const loadFileCallback = loadedFile => {\n        const resolvedFilename = loadedFile.filename\n        const contents = loadedFile.contents.replace(/^\\uFEFF/, '')\n\n        // Pass on an updated rootpath if path of imported file is relative and file\n        // is in a (sub|sup) directory\n        //\n        // Examples:\n        // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n        //   then rootpath should become 'less/module/nav/'\n        // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n        //   then rootpath should become 'less/../'\n        newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename)\n        if (newFileInfo.relativeUrls) {\n          newFileInfo.rootpath = fileManager.join(\n            importManager.context.rootpath || '',\n            fileManager.pathDiff(\n              newFileInfo.currentDirectory,\n              newFileInfo.entryPath\n            )\n          )\n\n          if (\n            !fileManager.isPathAbsolute(newFileInfo.rootpath) &&\n            fileManager.alwaysMakePathsAbsolute()\n          ) {\n            newFileInfo.rootpath = fileManager.join(\n              newFileInfo.entryPath,\n              newFileInfo.rootpath\n            )\n          }\n        }\n        newFileInfo.filename = resolvedFilename\n\n        const newEnv = new contexts.Parse(importManager.context)\n\n        newEnv.processImports = false\n        importManager.contents[resolvedFilename] = contents\n\n        if (currentFileInfo.reference || importOptions.reference) {\n          newFileInfo.reference = true\n        }\n\n        if (importOptions.plugin) {\n          new FunctionImporter(\n            newEnv,\n            newFileInfo\n          ).eval(contents, (e, root) => {\n            fileParsedFunc(e, root, resolvedFilename)\n          })\n        } else if (importOptions.inline) {\n          fileParsedFunc(null, contents, resolvedFilename)\n        } else {\n          new Parser(\n            newEnv,\n            importManager,\n            newFileInfo\n          ).parse(contents, (e, root) => {\n            fileParsedFunc(e, root, resolvedFilename)\n          })\n        }\n      }\n\n      const promise = fileManager.loadFile(\n        path,\n        currentFileInfo.currentDirectory,\n        this.context,\n        environment,\n        (err, loadedFile) => {\n          if (err) {\n            fileParsedFunc(err)\n          } else {\n            loadFileCallback(loadedFile)\n          }\n        }\n      )\n      if (promise) {\n        promise.then(loadFileCallback, fileParsedFunc)\n      }\n    }\n  }\n\n  return ImportManager\n}\n","module.exports = {\n  colors: require('./colors'),\n  unitConversions: require('./unit-conversions'),\n}\n","class abstractFileManager {\n  getPath(filename) {\n    let j = filename.lastIndexOf('?')\n    if (j > 0) {\n      filename = filename.slice(0, j)\n    }\n    j = filename.lastIndexOf('/')\n    if (j < 0) {\n      j = filename.lastIndexOf('\\\\')\n    }\n    if (j < 0) {\n      return ''\n    }\n    return filename.slice(0, j + 1)\n  }\n\n  tryAppendExtension(path, ext) {\n    return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext\n  }\n\n  tryAppendLessExtension(path) {\n    return this.tryAppendExtension(path, '.less')\n  }\n\n  supportsSync() {\n    return false\n  }\n\n  alwaysMakePathsAbsolute() {\n    return false\n  }\n\n  isPathAbsolute(filename) {\n    return /^(?:[a-z-]+:|\\/|\\\\|#)/i.test(filename)\n  }\n\n  join(basePath, laterPath) {\n    if (!basePath) {\n      return laterPath\n    }\n    return basePath + laterPath\n  }\n\n  pathDiff(url, baseUrl) {\n    // diff between two paths to create a relative path\n\n    const urlParts = this.extractUrlParts(url)\n\n    const baseUrlParts = this.extractUrlParts(baseUrl)\n    let i\n    let max\n    let urlDirectories\n    let baseUrlDirectories\n    let diff = ''\n    if (urlParts.hostPart !== baseUrlParts.hostPart) {\n      return ''\n    }\n    max = Math.max(baseUrlParts.directories.length, urlParts.directories.length)\n    for (i = 0; i < max; i++) {\n      if (baseUrlParts.directories[i] !== urlParts.directories[i]) {\n        break\n      }\n    }\n    baseUrlDirectories = baseUrlParts.directories.slice(i)\n    urlDirectories = urlParts.directories.slice(i)\n    for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n      diff += '../'\n    }\n    for (i = 0; i < urlDirectories.length - 1; i++) {\n      diff += `${urlDirectories[i]}/`\n    }\n    return diff\n  }\n\n  // helper function, not part of API\n  extractUrlParts(url, baseUrl) {\n    // urlParts[1] = protocol://hostname/ OR /\n    // urlParts[2] = / if path relative to host base\n    // urlParts[3] = directories\n    // urlParts[4] = filename\n    // urlParts[5] = parameters\n\n    const urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i\n\n    const urlParts = url.match(urlPartsRegex)\n    const returner = {}\n    let directories = []\n    let i\n    let baseUrlParts\n\n    if (!urlParts) {\n      throw new Error(`Could not parse sheet href - '${url}'`)\n    }\n\n    // Stylesheets in IE don't always return the full path\n    if (baseUrl && (!urlParts[1] || urlParts[2])) {\n      baseUrlParts = baseUrl.match(urlPartsRegex)\n      if (!baseUrlParts) {\n        throw new Error(`Could not parse page url - '${baseUrl}'`)\n      }\n      urlParts[1] = urlParts[1] || baseUrlParts[1] || ''\n      if (!urlParts[2]) {\n        urlParts[3] = baseUrlParts[3] + urlParts[3]\n      }\n    }\n\n    if (urlParts[3]) {\n      directories = urlParts[3].replace(/\\\\/g, '/').split('/')\n\n      // extract out . before .. so .. doesn't absorb a non-directory\n      for (i = 0; i < directories.length; i++) {\n        if (directories[i] === '.') {\n          directories.splice(i, 1)\n          i -= 1\n        }\n      }\n\n      for (i = 0; i < directories.length; i++) {\n        if (directories[i] === '..' && i > 0) {\n          directories.splice(i - 1, 2)\n          i -= 2\n        }\n      }\n    }\n\n    returner.hostPart = urlParts[1]\n    returner.directories = directories\n    returner.path = (urlParts[1] || '') + directories.join('/')\n    returner.fileUrl = returner.path + (urlParts[4] || '')\n    returner.url = returner.fileUrl + (urlParts[5] || '')\n    return returner\n  }\n}\n\nmodule.exports = abstractFileManager\n","module.exports = environment => {\n  const Quoted = require('../tree/quoted')\n  const URL = require('../tree/url')\n  const functionRegistry = require('./function-registry')\n  const fallback = (functionThis, node) =>\n    new URL(node, functionThis.index, functionThis.currentFileInfo).eval(\n      functionThis.context\n    )\n  const logger = require('../logger')\n\n  functionRegistry.add('data-uri', function(mimetypeNode, filePathNode) {\n    if (!filePathNode) {\n      filePathNode = mimetypeNode\n      mimetypeNode = null\n    }\n\n    let mimetype = mimetypeNode && mimetypeNode.value\n    let filePath = filePathNode.value\n    const currentFileInfo = this.currentFileInfo\n    const currentDirectory = currentFileInfo.relativeUrls\n      ? currentFileInfo.currentDirectory\n      : currentFileInfo.entryPath\n\n    const fragmentStart = filePath.indexOf('#')\n    let fragment = ''\n    if (fragmentStart !== -1) {\n      fragment = filePath.slice(fragmentStart)\n      filePath = filePath.slice(0, fragmentStart)\n    }\n\n    const fileManager = environment.getFileManager(\n      filePath,\n      currentDirectory,\n      this.context,\n      environment,\n      true\n    )\n\n    if (!fileManager) {\n      return fallback(this, filePathNode)\n    }\n\n    let useBase64 = false\n\n    // detect the mimetype if not given\n    if (!mimetypeNode) {\n      mimetype = environment.mimeLookup(filePath)\n\n      if (mimetype === 'image/svg+xml') {\n        useBase64 = false\n      } else {\n        // use base 64 unless it's an ASCII or UTF-8 format\n        const charset = environment.charsetLookup(mimetype)\n        useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0\n      }\n      if (useBase64) {\n        mimetype += ';base64'\n      }\n    } else {\n      useBase64 = /;base64$/.test(mimetype)\n    }\n\n    const fileSync = fileManager.loadFileSync(\n      filePath,\n      currentDirectory,\n      this.context,\n      environment\n    )\n    if (!fileSync.contents) {\n      logger.warn(\n        `Skipped data-uri embedding of ${filePath} because file not found`\n      )\n      return fallback(this, filePathNode || mimetypeNode)\n    }\n    let buf = fileSync.contents\n    if (useBase64 && !environment.encodeBase64) {\n      return fallback(this, filePathNode)\n    }\n\n    buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf)\n\n    const uri = `data:${mimetype},${buf}${fragment}`\n\n    // IE8 cannot handle a data-uri larger than 32,768 characters. If this is exceeded\n    // and the --ieCompat flag is enabled, return a normal url() instead.\n    const DATA_URI_MAX = 32768\n    if (uri.length >= DATA_URI_MAX) {\n      if (this.context.ieCompat !== false) {\n        logger.warn(\n          `Skipped data-uri embedding of ${filePath} because its size (${uri.length} characters) exceeds IE8-safe ${DATA_URI_MAX} characters!`\n        )\n\n        return fallback(this, filePathNode || mimetypeNode)\n      }\n    }\n\n    return new URL(\n      new Quoted(`\"${uri}\"`, uri, false, this.index, this.currentFileInfo),\n      this.index,\n      this.currentFileInfo\n    )\n  })\n}\n","const Dimension = require('../tree/dimension')\n\nconst MathHelper = () => {}\nMathHelper._math = (fn, unit, n) => {\n  if (!(n instanceof Dimension)) {\n    throw { type: 'Argument', message: 'argument must be a number' }\n  }\n  if (unit == null) {\n    unit = n.unit\n  } else {\n    n = n.unify()\n  }\n  return new Dimension(fn(parseFloat(n.value)), unit)\n}\nmodule.exports = MathHelper\n","const functionRegistry = require('./function-registry')\nconst mathHelper = require('./math-helper.js')\n\nconst mathFunctions = {\n  // name,  unit\n  ceil: null,\n  floor: null,\n  sqrt: null,\n  abs: null,\n  tan: '',\n  sin: '',\n  cos: '',\n  atan: 'rad',\n  asin: 'rad',\n  acos: 'rad',\n}\n\nfor (const f in mathFunctions) {\n  if (mathFunctions.hasOwnProperty(f)) {\n    mathFunctions[f] = mathHelper._math.bind(null, Math[f], mathFunctions[f])\n  }\n}\n\nmathFunctions.round = (n, f) => {\n  const fraction = typeof f === 'undefined' ? 0 : f.value\n  return mathHelper._math(num => num.toFixed(fraction), null, n)\n}\n\nfunctionRegistry.addMultiple(mathFunctions)\n","const Dimension = require('../tree/dimension')\nconst Anonymous = require('../tree/anonymous')\nconst functionRegistry = require('./function-registry')\nconst mathHelper = require('./math-helper.js')\n\nconst minMax = function(isMin, args) {\n  args = Array.prototype.slice.call(args)\n  switch (args.length) {\n    case 0:\n      throw { type: 'Argument', message: 'one or more arguments required' }\n  }\n  let i // key is the unit.toString() for unified Dimension values,\n  let j\n  let current\n  let currentUnified\n  let referenceUnified\n  let unit\n  let unitStatic\n  let unitClone\n\n  const // elems only contains original argument values.\n  order = []\n\n  const values = {}\n  // value is the index into the order array.\n  for (i = 0; i < args.length; i++) {\n    current = args[i]\n    if (!(current instanceof Dimension)) {\n      if (Array.isArray(args[i].value)) {\n        Array.prototype.push.apply(\n          args,\n          Array.prototype.slice.call(args[i].value)\n        )\n      }\n      continue\n    }\n    currentUnified =\n      current.unit.toString() === '' && unitClone !== undefined\n        ? new Dimension(current.value, unitClone).unify()\n        : current.unify()\n    unit =\n      currentUnified.unit.toString() === '' && unitStatic !== undefined\n        ? unitStatic\n        : currentUnified.unit.toString()\n    unitStatic =\n      (unit !== '' && unitStatic === undefined) ||\n      (unit !== '' && order[0].unify().unit.toString() === '')\n        ? unit\n        : unitStatic\n    unitClone =\n      unit !== '' && unitClone === undefined\n        ? current.unit.toString()\n        : unitClone\n    j =\n      values[''] !== undefined && unit !== '' && unit === unitStatic\n        ? values['']\n        : values[unit]\n    if (j === undefined) {\n      if (unitStatic !== undefined && unit !== unitStatic) {\n        throw { type: 'Argument', message: 'incompatible types' }\n      }\n      values[unit] = order.length\n      order.push(current)\n      continue\n    }\n    referenceUnified =\n      order[j].unit.toString() === '' && unitClone !== undefined\n        ? new Dimension(order[j].value, unitClone).unify()\n        : order[j].unify()\n    if (\n      (isMin && currentUnified.value < referenceUnified.value) ||\n      (!isMin && currentUnified.value > referenceUnified.value)\n    ) {\n      order[j] = current\n    }\n  }\n  if (order.length == 1) {\n    return order[0]\n  }\n  args = order\n    .map(function(a) {\n      return a.toCSS(this.context)\n    })\n    .join(this.context.compress ? ',' : ', ')\n  return new Anonymous(`${isMin ? 'min' : 'max'}(${args})`)\n}\nfunctionRegistry.addMultiple({\n  min(...args) {\n    return minMax(true, args)\n  },\n  max(...args) {\n    return minMax(false, args)\n  },\n  convert(val, unit) {\n    return val.convertTo(unit.value)\n  },\n  pi() {\n    return new Dimension(Math.PI)\n  },\n  mod(a, b) {\n    return new Dimension(a.value % b.value, a.unit)\n  },\n  pow(x, y) {\n    if (typeof x === 'number' && typeof y === 'number') {\n      x = new Dimension(x)\n      y = new Dimension(y)\n    } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n      throw { type: 'Argument', message: 'arguments must be numbers' }\n    }\n\n    return new Dimension(Math.pow(x.value, y.value), x.unit)\n  },\n  percentage(n) {\n    const result = mathHelper._math(num => num * 100, '%', n)\n\n    return result\n  },\n})\n","const Quoted = require('../tree/quoted')\nconst Anonymous = require('../tree/anonymous')\nconst JavaScript = require('../tree/javascript')\nconst functionRegistry = require('./function-registry')\n\nfunctionRegistry.addMultiple({\n  e(str) {\n    return new Anonymous(str instanceof JavaScript ? str.evaluated : str.value)\n  },\n  escape(str) {\n    return new Anonymous(\n      encodeURI(str.value)\n        .replace(/=/g, '%3D')\n        .replace(/:/g, '%3A')\n        .replace(/#/g, '%23')\n        .replace(/;/g, '%3B')\n        .replace(/\\(/g, '%28')\n        .replace(/\\)/g, '%29')\n    )\n  },\n  replace(string, pattern, replacement, flags) {\n    let result = string.value\n    replacement =\n      replacement.type === 'Quoted' ? replacement.value : replacement.toCSS()\n    result = result.replace(\n      new RegExp(pattern.value, flags ? flags.value : ''),\n      replacement\n    )\n    return new Quoted(string.quote || '', result, string.escaped)\n  },\n  '%': function(string /* arg, arg, ...*/) {\n    const args = Array.prototype.slice.call(arguments, 1)\n    let result = string.value\n\n    for (let i = 0; i < args.length; i++) {\n      /*jshint loopfunc:true */\n      result = result.replace(/%[sda]/i, token => {\n        const value =\n          args[i].type === 'Quoted' && token.match(/s/i)\n            ? args[i].value\n            : args[i].toCSS()\n        return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value\n      })\n    }\n    result = result.replace(/%%/g, '%')\n    return new Quoted(string.quote || '', result, string.escaped)\n  },\n})\n","module.exports = environment => {\n  const Dimension = require('../tree/dimension')\n  const Color = require('../tree/color')\n  const Expression = require('../tree/expression')\n  const Quoted = require('../tree/quoted')\n  const URL = require('../tree/url')\n  const functionRegistry = require('./function-registry')\n\n  functionRegistry.add('svg-gradient', function(direction) {\n    let stops\n    let gradientDirectionSvg\n    let gradientType = 'linear'\n    let rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"'\n    const renderEnv = { compress: false }\n    let returner\n    const directionValue = direction.toCSS(renderEnv)\n    let i\n    let color\n    let position\n    let positionValue\n    let alpha\n\n    function throwArgumentDescriptor() {\n      throw {\n        type: 'Argument',\n        message:\n          'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\n          ' end_color [end_position] or direction, color list',\n      }\n    }\n\n    if (arguments.length == 2) {\n      if (arguments[1].value.length < 2) {\n        throwArgumentDescriptor()\n      }\n      stops = arguments[1].value\n    } else if (arguments.length < 3) {\n      throwArgumentDescriptor()\n    } else {\n      stops = Array.prototype.slice.call(arguments, 1)\n    }\n\n    switch (directionValue) {\n      case 'to bottom':\n        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"'\n        break\n      case 'to right':\n        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"'\n        break\n      case 'to bottom right':\n        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"'\n        break\n      case 'to top right':\n        gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"'\n        break\n      case 'ellipse':\n      case 'ellipse at center':\n        gradientType = 'radial'\n        gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"'\n        rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"'\n        break\n      default:\n        throw {\n          type: 'Argument',\n          message:\n            \"svg-gradient direction must be 'to bottom', 'to right',\" +\n            \" 'to bottom right', 'to top right' or 'ellipse at center'\",\n        }\n    }\n    returner = `<?xml version=\"1.0\" ?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"100%\" height=\"100%\" viewBox=\"0 0 1 1\" preserveAspectRatio=\"none\"><${gradientType}Gradient id=\"gradient\" gradientUnits=\"userSpaceOnUse\" ${gradientDirectionSvg}>`\n\n    for (i = 0; i < stops.length; i += 1) {\n      if (stops[i] instanceof Expression) {\n        color = stops[i].value[0]\n        position = stops[i].value[1]\n      } else {\n        color = stops[i]\n        position = undefined\n      }\n\n      if (\n        !(color instanceof Color) ||\n        (!((i === 0 || i + 1 === stops.length) && position === undefined) &&\n          !(position instanceof Dimension))\n      ) {\n        throwArgumentDescriptor()\n      }\n      positionValue = position\n        ? position.toCSS(renderEnv)\n        : i === 0 ? '0%' : '100%'\n      alpha = color.alpha\n      returner += `<stop offset=\"${positionValue}\" stop-color=\"${color.toRGB()}\"${alpha <\n      1\n        ? ' stop-opacity=\"' + alpha + '\"'\n        : ''}/>`\n    }\n    returner += `</${gradientType}Gradient><rect ${rectangleDimension} fill=\"url(#gradient)\" /></svg>`\n\n    returner = encodeURIComponent(returner)\n\n    returner = `data:image/svg+xml,${returner}`\n    return new URL(\n      new Quoted(\n        `'${returner}'`,\n        returner,\n        false,\n        this.index,\n        this.currentFileInfo\n      ),\n      this.index,\n      this.currentFileInfo\n    )\n  })\n}\n","const Keyword = require('../tree/keyword')\nconst DetachedRuleset = require('../tree/detached-ruleset')\nconst Dimension = require('../tree/dimension')\nconst Color = require('../tree/color')\nconst Quoted = require('../tree/quoted')\nconst Anonymous = require('../tree/anonymous')\nconst URL = require('../tree/url')\nconst Operation = require('../tree/operation')\nconst functionRegistry = require('./function-registry')\nconst isa = (n, Type) => (n instanceof Type ? Keyword.True : Keyword.False)\n\nconst isunit = (n, unit) => {\n  if (unit === undefined) {\n    throw {\n      type: 'Argument',\n      message: 'missing the required second argument to isunit.',\n    }\n  }\n  unit = typeof unit.value === 'string' ? unit.value : unit\n  if (typeof unit !== 'string') {\n    throw {\n      type: 'Argument',\n      message: 'Second argument to isunit should be a unit or a string.',\n    }\n  }\n  return n instanceof Dimension && n.unit.is(unit)\n    ? Keyword.True\n    : Keyword.False\n}\n\nconst getItemsFromNode = node => {\n  // handle non-array values as an array of length 1\n  // return 'undefined' if index is invalid\n  const items = Array.isArray(node.value) ? node.value : Array(node)\n\n  return items\n}\n\nfunctionRegistry.addMultiple({\n  isruleset(n) {\n    return isa(n, DetachedRuleset)\n  },\n  iscolor(n) {\n    return isa(n, Color)\n  },\n  isnumber(n) {\n    return isa(n, Dimension)\n  },\n  isstring(n) {\n    return isa(n, Quoted)\n  },\n  iskeyword(n) {\n    return isa(n, Keyword)\n  },\n  isurl(n) {\n    return isa(n, URL)\n  },\n  ispixel(n) {\n    return isunit(n, 'px')\n  },\n  ispercentage(n) {\n    return isunit(n, '%')\n  },\n  isem(n) {\n    return isunit(n, 'em')\n  },\n  isunit,\n  unit(val, unit) {\n    if (!(val instanceof Dimension)) {\n      throw {\n        type: 'Argument',\n        message: `the first argument to unit must be a number${val instanceof\n        Operation\n          ? '. Have you forgotten parenthesis?'\n          : ''}`,\n      }\n    }\n    if (unit) {\n      if (unit instanceof Keyword) {\n        unit = unit.value\n      } else {\n        unit = unit.toCSS()\n      }\n    } else {\n      unit = ''\n    }\n    return new Dimension(val.value, unit)\n  },\n  'get-unit': function(n) {\n    return new Anonymous(n.unit)\n  },\n  extract(values, index) {\n    index = index.value - 1 // (1-based index)\n\n    return getItemsFromNode(values)[index]\n  },\n  length(values) {\n    return new Dimension(getItemsFromNode(values).length)\n  },\n})\n","module.exports = environment => {\n  const functions = {\n    functionRegistry: require('./function-registry'),\n    functionCaller: require('./function-caller'),\n  }\n\n  //register functions\n  require('./default')\n  require('./color')\n  require('./color-blending')\n  require('./data-uri')(environment)\n  require('./math')\n  require('./number')\n  require('./string')\n  require('./svg')(environment)\n  require('./types')\n\n  return functions\n}\n","module.exports = (environment, ParseTree) => {\n  const render = function(input, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    if (!callback) {\n      const self = this\n      return new Promise((resolve, reject) => {\n        render.call(self, input, options, (err, output) => {\n          if (err) {\n            reject(err)\n          } else {\n            resolve(output)\n          }\n        })\n      })\n    } else {\n      this.parse(input, options, (err, root, imports, options) => {\n        if (err) {\n          return callback(err)\n        }\n\n        let result\n        try {\n          const parseTree = new ParseTree(root, imports)\n          result = parseTree.toCSS(options)\n        } catch (err) {\n          return callback(err)\n        }\n\n        callback(null, result)\n      })\n    }\n  }\n\n  return render\n}\n","/**\n * Plugin Manager\n */\nclass PluginManager {\n  constructor(less) {\n    this.less = less\n    this.visitors = []\n    this.preProcessors = []\n    this.postProcessors = []\n    this.installedPlugins = []\n    this.fileManagers = []\n  }\n\n  /**\n     * Adds all the plugins in the array\n     * @param {Array} plugins\n     */\n  addPlugins(plugins) {\n    if (plugins) {\n      for (let i = 0; i < plugins.length; i++) {\n        this.addPlugin(plugins[i])\n      }\n    }\n  }\n\n  /**\n     *\n     * @param plugin\n     */\n  addPlugin(plugin) {\n    this.installedPlugins.push(plugin)\n    plugin.install(this.less, this)\n  }\n\n  /**\n     * Adds a visitor. The visitor object has options on itself to determine\n     * when it should run.\n     * @param visitor\n     */\n  addVisitor(visitor) {\n    this.visitors.push(visitor)\n  }\n\n  /**\n     * Adds a pre processor object\n     * @param {object} preProcessor\n     * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n     */\n  addPreProcessor(preProcessor, priority) {\n    let indexToInsertAt\n    for (\n      indexToInsertAt = 0;\n      indexToInsertAt < this.preProcessors.length;\n      indexToInsertAt++\n    ) {\n      if (this.preProcessors[indexToInsertAt].priority >= priority) {\n        break\n      }\n    }\n    this.preProcessors.splice(indexToInsertAt, 0, { preProcessor, priority })\n  }\n\n  /**\n     * Adds a post processor object\n     * @param {object} postProcessor\n     * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n     */\n  addPostProcessor(postProcessor, priority) {\n    let indexToInsertAt\n    for (\n      indexToInsertAt = 0;\n      indexToInsertAt < this.postProcessors.length;\n      indexToInsertAt++\n    ) {\n      if (this.postProcessors[indexToInsertAt].priority >= priority) {\n        break\n      }\n    }\n    this.postProcessors.splice(indexToInsertAt, 0, { postProcessor, priority })\n  }\n\n  /**\n     *\n     * @param manager\n     */\n  addFileManager(manager) {\n    this.fileManagers.push(manager)\n  }\n\n  /**\n     *\n     * @returns {Array}\n     * @private\n     */\n  getPreProcessors() {\n    const preProcessors = []\n    for (let i = 0; i < this.preProcessors.length; i++) {\n      preProcessors.push(this.preProcessors[i].preProcessor)\n    }\n    return preProcessors\n  }\n\n  /**\n     *\n     * @returns {Array}\n     * @private\n     */\n  getPostProcessors() {\n    const postProcessors = []\n    for (let i = 0; i < this.postProcessors.length; i++) {\n      postProcessors.push(this.postProcessors[i].postProcessor)\n    }\n    return postProcessors\n  }\n\n  /**\n     *\n     * @returns {Array}\n     * @private\n     */\n  getVisitors() {\n    return this.visitors\n  }\n\n  /**\n     *\n     * @returns {Array}\n     * @private\n     */\n  getFileManagers() {\n    return this.fileManagers\n  }\n}\n\nmodule.exports = PluginManager\n","let PromiseConstructor\nconst contexts = require('./contexts')\nconst Parser = require('./parser/parser')\nconst PluginManager = require('./plugin-manager')\n\nmodule.exports = (environment, ParseTree, ImportManager) => {\n  const parse = function(input, options = {}, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    if (!callback) {\n      const self = this\n      return new Promise((resolve, reject) => {\n        parse.call(self, input, options, (err, output) => {\n          if (err) {\n            reject(err)\n          } else {\n            resolve(output)\n          }\n        })\n      })\n    } else {\n      let context\n      let rootFileInfo\n      const pluginManager = new PluginManager(this)\n\n      pluginManager.addPlugins(options.plugins)\n      options.pluginManager = pluginManager\n\n      context = new contexts.Parse(options)\n\n      if (options.rootFileInfo) {\n        rootFileInfo = options.rootFileInfo\n      } else {\n        const filename = options.filename || 'input'\n        const entryPath = filename.replace(/[^\\/\\\\]*$/, '')\n        rootFileInfo = {\n          filename,\n          relativeUrls: context.relativeUrls,\n          rootpath: context.rootpath || '',\n          currentDirectory: entryPath,\n          entryPath,\n          rootFilename: filename,\n        }\n        // add in a missing trailing slash\n        if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n          rootFileInfo.rootpath += '/'\n        }\n      }\n\n      const imports = new ImportManager(context, rootFileInfo)\n\n      new Parser(context, imports, rootFileInfo).parse(\n        input,\n        (e, root) => {\n          if (e) {\n            return callback(e)\n          }\n          callback(null, root, imports, options)\n        },\n        options\n      )\n    }\n  }\n  return parse\n}\n","const createFromEnvironment = require('../less')\nconst AbstractFileManager = require('../less/environment/abstract-file-manager.js')\n\nclass NotSupportedFileManager extends AbstractFileManager {\n  supports() {\n    return true\n  }\n\n  supportsSync() {\n    return true\n  }\n\n  loadFile() {\n    return Promise.reject(new Error('loading is not supported'))\n  }\n\n  loadFileSync() {\n    new Error('loading is not supported')\n  }\n}\n\nconst less = createFromEnvironment({}, [new NotSupportedFileManager()])\nless.FileManager = NotSupportedFileManager\n\nmodule.exports = less\n","module.exports = (environment, fileManagers) => {\n  const Environment = require('./environment/environment')\n  environment = new Environment(environment, fileManagers)\n\n  const SourceMapOutput = require('./source-map-output')(environment)\n  const SourceMapBuilder = require('./source-map-builder')(\n    SourceMapOutput,\n    environment\n  )\n  const ParseTree = require('./parse-tree')(SourceMapBuilder)\n  const ImportManager = require('./import-manager')(environment)\n\n  return {\n    version: [2, 7, 2],\n    data: require('./data'),\n    tree: require('./tree'),\n    Environment,\n    environment,\n    AbstractFileManager: require('./environment/abstract-file-manager'),\n    visitors: require('./visitors'),\n    Parser: require('./parser/parser'),\n    functions: require('./functions')(environment),\n    contexts: require('./contexts'),\n    SourceMapOutput,\n    SourceMapBuilder,\n    ParseTree,\n    ImportManager: ImportManager,\n    render: require('./render')(environment, ParseTree, ImportManager),\n    parse: require('./parse')(environment, ParseTree, ImportManager),\n    LessError: require('./less-error'),\n    transformTree: require('./transform-tree'),\n    utils: require('./utils'),\n    PluginManager: require('./plugin-manager'),\n    logger: require('./logger'),\n    writeError(ctx, options) {\n      options = options || {}\n      if (options.silent) {\n        return\n      }\n      console.error(this.formatError(ctx, options))\n    },\n    formatError(ctx) {\n      let message = ''\n      let extract = ctx.extract\n      let error = []\n\n      // only output a stack if it isn't a less error\n      if (ctx.stack && !ctx.type) {\n        return ctx.stack\n      }\n\n      if (!ctx.hasOwnProperty('index') || !extract) {\n        return ctx.stack || ctx.message\n      }\n\n      if (typeof extract[0] === 'string') {\n        error.push(`${ctx.line - 1} ${extract[0]}`)\n      }\n\n      if (typeof extract[1] === 'string') {\n        let errorTxt = `${ctx.line} `\n        if (extract[1]) {\n          errorTxt +=\n            extract[1].slice(0, ctx.column) +\n            extract[1].substr(ctx.column, 1) +\n            extract[1].slice(ctx.column + 1)\n        }\n        error.push(errorTxt)\n      }\n\n      if (typeof extract[2] === 'string') {\n        error.push(`${ctx.line + 1} ${extract[2]}`)\n      }\n      error = `${error.join('\\n')}\\n`\n\n      message += `${ctx.type}Error: ${ctx.message}`\n      if (ctx.filename) {\n        message += ` in ${ctx.filename} on line ${ctx.line}, column ${ctx.column +\n          1}:`\n      }\n\n      message += `\\n${error}`\n\n      if (ctx.callLine) {\n        message += `from ${ctx.filename || ''}/n`\n        message += `${ctx.callLine} ${ctx.callExtract}/n`\n      }\n      return message\n    },\n  }\n}\n"]}