{"version":3,"sources":["../lib/less/tree/color.js","../lib/less/tree/rule.js","../lib/less/functions/function-registry.js","../lib/less/visitors/visitor.js","../lib/less/functions/color.js","../lib/less/functions/color-blending.js","../lib/less/logger.js","../lib/less/environment/environment.js","../lib/less/source-map-output.js","../lib/less/source-map-builder.js","../lib/less/utils.js","../lib/less/less-error.js","../lib/less/contexts.js","../lib/less/tree/node.js","../lib/less/tree/alpha.js","../lib/less/data/colors.js","../lib/less/tree/paren.js","../lib/less/tree/combinator.js","../lib/less/tree/element.js","../lib/less/tree/selector.js","../lib/less/tree/value.js","../lib/less/tree/keyword.js","../lib/less/functions/default.js","../lib/less/tree/debug-info.js","../lib/less/tree/ruleset.js","../lib/less/tree/directive.js","../lib/less/tree/detached-ruleset.js","../lib/less/data/unit-conversions.js","../lib/less/tree/unit.js","../lib/less/tree/dimension.js","../lib/less/tree/operation.js","../lib/less/tree/variable.js","../lib/less/tree/attribute.js","../lib/less/tree/js-eval-node.js","../lib/less/tree/quoted.js","../lib/less/tree/comment.js","../lib/less/tree/expression.js","../lib/less/functions/function-caller.js","../lib/less/tree/call.js","../lib/less/tree/url.js","../lib/less/tree/anonymous.js","../lib/less/tree/media.js","../lib/less/tree/import.js","../lib/less/tree/mixin-definition.js","../lib/less/tree/mixin-call.js","../lib/less/tree/javascript.js","../lib/less/tree/assignment.js","../lib/less/tree/condition.js","../lib/less/tree/unicode-descriptor.js","../lib/less/tree/negative.js","../lib/less/tree/extend.js","../lib/less/tree/ruleset-call.js","../lib/less/tree/index.js","../lib/less/visitors/import-sequencer.js","../lib/less/visitors/import-visitor.js","../lib/less/visitors/set-tree-visibility-visitor.js","../lib/less/visitors/extend-visitor.js","../lib/less/visitors/join-selector-visitor.js","../lib/less/visitors/to-css-visitor.js","../lib/less/visitors/index.js","../lib/less/transform-tree.js","../lib/less/parse-tree.js","../lib/less/parser/chunker.js","../lib/less/parser/parser-input.js","../lib/less/parser/parser.js","../lib/less/plugins/function-importer.js","../lib/less/import-manager.js","../lib/less/data/index.js","../lib/less/environment/abstract-file-manager.js","../lib/less/functions/data-uri.js","../lib/less/functions/math-helper.js","../lib/less/functions/math.js","../lib/less/functions/number.js","../lib/less/functions/string.js","../lib/less/functions/svg.js","../lib/less/functions/types.js","../lib/less/functions/index.js","../lib/less/render.js","../lib/less/plugin-manager.js","../lib/less/parse.js","../lib/less-browser/index.js","../lib/less/index.js"],"names":["clamp","v","max","Math","min","toHex","map","c","round","toString","join","evalName","context","name","value","i","n","length","output","s","eval","genCSS","makeRegistry","base","func","toLowerCase","this","_data","hasOwnProperty","functions","keys","forEach","add","get","_noop","node","indexNodeTypes","parent","ticker","key","child","_typeof","prototype","type","typeIndex","val","hsla","color","colorFunctions","h","l","a","number","Dimension","parseFloat","unit","is","scaled","size","colorBlend","mode","color1","color2","ab","alpha","as","ar","cr","r","rgb","cb","cs","Color","logger","msg","_fireEvent","listener","_listeners","push","splice","logFunction","Environment","externalEnvironment","fileManagers","optionalFunctions","requiredFunctions","concat","propName","environmentFunc","bind","warn","getFileManager","filename","currentDirectory","options","environment","isSync","pluginManager","getFileManagers","fileManager","addFileManager","clearFileManagers","sourceMapOutput","_css","_rootNode","rootNode","_contentsMap","contentsMap","_contentsIgnoredCharsMap","contentsIgnoredCharsMap","sourceMapFilename","_sourceMapFilename","replace","_outputFilename","outputFilename","sourceMapURL","sourceMapBasepath","_sourceMapBasepath","sourceMapRootpath","_sourceMapRootpath","charAt","_outputSourceFiles","outputSourceFiles","_sourceMapGeneratorConstructor","getSourceMapGenerator","_lineNumber","_column","normalizeFilename","indexOf","substring","chunk","fileInfo","index","mapLines","lines","sourceLines","columns","sourceColumns","inputSource","slice","split","_sourceMapGenerator","addMapping","line","column","isEmpty","toCSS","source","setSourceContent","sourceMapContent","JSON","stringify","toJSON","sourceMap","sourceMapBuilder","SourceMapOutput","imports","contentsIgnoredChars","contents","sourceMapOutputFilename","sourceMapGenerator","sourceMapFileInline","css","sourceMapInputFilename","getCSSAppendage","undefined","encodeBase64","getExternalSourceMap","setExternalSourceMap","isInline","getSourceMapURL","getOutputFilename","getInputFilename","utils","inputStream","match","LessError","module","e","importManager","currentFilename","call","input","loc","getLocation","col","callLine","callExtract","extract","message","stack","Object","create","F","Error","constructor","contexts","contexts_1","copyFromOriginal","original","destination","propertiesToCopy","parseCopyProperties","Parse","paths","evalCopyProperties","Eval","frames","importantScope","inParenthesis","parensStack","outOfParenthesis","pop","isInParens","isMathOn","disableMath","strictMath","isPathRelative","path","test","normalizePath","segments","reverse","segment","Node","strs","accept","visitor","visit","_operate","op","b","fround","precision","numPrecision","toFixed","blocksVisibility","visibilityBlocks","addVisibilityBlock","removeVisibilityBlock","ensureVisibility","nodeVisible","ensureInvisibility","isVisible","visibilityInfo","copyVisibilityInfo","info","compare","Array","isArray","numericCompare","Alpha","_Node","colors","originalForm","parseInt","luma","g","pow","doNotCompress","compress","toRGB","splitcolor","operate","other","toHSL","d","toHSV","toARGB","x","fromKeyword","keyword","Paren","paren","Combinator","emptyOrWhitespace","trim","_this","spaceOrEmpty","_noSpaceCombinators","combinator","Element","currentFileInfo","clone","arguments","firstSelector","element","Selector","elements","extendList","condition","evaldCondition","visitArray","createDerived","newSelector","mediaEmpty","createEmptySelectors","el","sels","len","olen","CacheElements","_elements","shift","isJustParentSelector","extend","getIsOutput","selector","Value","Keyword","True","False","Rule","important","merge","inline","variable","allowRoot","lastRule","strictMathBypass","evaldValue","importantResult","makeImportant","rule","functionRegistry","defaultFunc","value_","error_","_default","debugInfo","ctx","lineSeparator","result","dumpLineNumbers","asComment","asMediaQuery","lineNumber","fileName","filenameWithProtocol","debugInfo_1","Ruleset","selectors","rules","strictImports","_lookups","thisSelectors","selCnt","hasOnePassingSelector","error","reset","ruleset","subRule","originalRuleset","root","firstRoot","allowImports","found","globalFunctionRegistry","inherit","ctxFrames","unshift","ctxSelectors","evalImports","rsRules","rsRuleCnt","evalFirst","mediaBlockCount","mediaBlocks","filter","apply","resetCache","j","bubbleSelectors","importRules","matchArgs","args","matchCondition","lastSelector","_rulesets","_variables","variables","reduce","hash","vars","rulesets","filtRules","cnt","isRuleset","prependRule","find","self","foundMixins","rule$$1","charsetRuleNodes","ruleNodes","tabLevel","tabRuleStr","tabSetStr","sep","charsetNodeIndex","importNodeIndex","isCharset","getDebugInfo","pathCnt","pathSubCnt","currentLastRule","isRulesetLike","joinSelectors","joinSelector","createParenthesis","elementsToPak","originalElement","replacementParen","insideParent","createSelector","containedElement","addReplacementIntoPath","beginningPath","addPath","replacedElement","originalSelector","newSelectorPath","newJoinedSelector","parentEl","restOfPath","selector$$1","addAllReplacementsIntoPath","addPaths","mergeElementsOnToSelectors","sel","replaceParentSelector","inSelector","k","currentElements","newSelectors","selectorsMultiplied","hadParentSelector","nestedSelector","maybeSelector","nestedPaths","replaced","replacedNewSelectors","replacementSelector","deriveSelector","deriveFrom","newPaths","concatenated","Directive","isRooted","outputRuleset","mediaPathBackup","mediaBlocksBackup","mediaPath","_len","_key","ruleCnt","directive","DetachedRuleset","callEval","detachedRuleset","unitConversions","PI","Unit","numerator","denominator","backupUnit","sort","strictUnits","returnStr","unitString","toUpperCase","isLength","isSingular","callback","usedUnits","group","mapUnit","groupName","atomicUnit","cancel","counter","count","toColor","strValue","String","substr","convertTo","unify","duration","angle","conversions","targetUnit","derivedConversions","applyUnit","dimension","Operation","operands","isSpaced","isRootVariable","simplify","cloneOp","parensInOp","operation","Variable","evaluating","current","frame","simplifyFilter","obj","fun","Attribute","attribute","JsEvalNode","evaluateJavaScript","expression","that","evalContext","javascriptEnabled","_","jsify","Function","jsEvalNode","Quoted","str","content","escaped","_JsEvalNode","quote","containsVariables","iterativeReplace","regexp","replacementFnc","evaluatedValue","javascriptReplacement","exp","interpolationReplacement","quoted","Comment","isLineComment","isSilent","isCompressed","comment","Expression","returnValue","parens","doubleParen","throwAwayComments","functionCaller","isValid","item","subNodes","functionCaller_1","Call","funcCaller","FunctionCaller","_isArray","_iterator","_i","Symbol","iterator","_ref","URL","isEvald","rootpath","urlArgs","delimiter","url","Anonymous","rulesetLike","anonymous","Media","features","_Directive","media","evalTop","evalNested","multiMedia","permute","fragment","arr","rest","Import","less","pathValue","getPath","plugin","reference","isVariableImport","evalForImport","evalPath","doEval","node$$1","registry","addMultiple","skip","importedFilename","newImport","_import","Definition","params","variadic","_Ruleset","arity","optionalParameters","required","p","evalParams","mixinEnv","evaldArguments","varargs","arg","isNamedFound","argIndex","argsLength","evalCall","_arguments","mixinFrames","allArgsCnt","requiredArgsCnt","mixinDefinition","MixinCall","mixins","mixin","mixinPath","argValue","m","f","isRecursive","isOneFound","candidates","candidate","conditionResult","defaultResult","defFalseEitherCase","defNone","defTrue","defFalse","noArgumentsFilter","expand","MixinDefinition","namespace","format","newRules","_setVisibilityToReplacement","replacement","mixinCall","JavaScript","string","javascript","Assignment","assignment","Condition","negate","lvalue","rvalue","UnicodeDescriptor","unicodeDescriptor","Negative","negative","Extend","option","object_id","next_id","parent_ids","allowBefore","allowAfter","findSelfSelectors","selfElements","selectorElements","selfSelectors","RulesetCall","rulesetCall","tree","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","require$$24","require$$25","require$$26","require$$27","require$$28","require$$29","require$$30","require$$31","require$$32","require$$33","require$$34","index$6","_visitArgs","visitDeeper","_hasIndexed","Visitor","implementation","_implementation","_visitFnCache","nodeTypeIndex","visitFnCache","impl","aryIndx","outAryIndex","funcOut","visitArgs","fnName","newNode","isReplacing","nodes","nonReplacing","out","evald","flatten","nestedCnt","nestedItem","ImportSequencer","onSequencerEmpty","variableImports","_onSequencerEmpty","_currentDepth","addImport","importSequencer","importItem","isReady","tryRun","addVariableImport","variableImport","ImportVisitor","importer","finish","_visitor","_importer","_finish","importCount","onceFileDetectionMap","recursionDetector","_sequencer","isFinished","importNode","inlineCSS","importParent","processImportNode","evaldImportNode","multiple","importMultiple","tryAppendLessExtension","onImported","sequencedOnImported","importedAtRoot","fullPath","importVisitor","isPlugin","isOptional","optional","duplicateImport","oldContext","ruleNode","directiveNode","mixinDefinitionNode","rulesetNode","mediaNode","SetTreeVisibilityVisitor","visible","run","setTreeVisibilityVisitor","ExtendFinderVisitor","allExtendsStack","allExtends","visitRule","visitMixinDefinition","visitRuleset","allSelectorsExtendList","extendOnEveryPath","selectorPath","selExtendList","allSelectorsExtend","foundExtends","firstExtendOnThisSelectorPath","visitRulesetOut","visitMedia","visitMediaOut","visitDirective","visitDirectiveOut","ProcessExtendsVisitor","extendFinder","extendIndices","doExtendChaining","newRoot","checkExtendsForNonMatched","indices","hasFoundMatches","extendsList","extendsListTarget","iterationCount","extendIndex","targetExtendIndex","matches","extendsToAdd","extendVisitor","targetExtend","newExtend","findMatch","selfSelector","extendSelector","extendChainCount","selectorOne","selectorTwo","visitSelector","selectorNode","pathIndex","selectorsToAdd","extendedSelectors","haystackSelectorPath","haystackSelectorIndex","hackstackSelector","hackstackElementIndex","haystackElement","targetCombinator","needleElements","potentialMatches","potentialMatch","isElementValuesEqual","matched","finished","endPathIndex","endPathElementIndex","elementValue1","elementValue2","currentSelectorPathIndex","currentSelectorPathElementIndex","matchIndex","firstElement","newElements","initialCombinator","currentValue","derived","newAllExtends","JoinSelectorVisitor","joinSelectorVisitor","CSSVisitorUtils","_context","containsSilentNonBlockedChild","bodyRules","keepOnlyVisibleChilds","owner","thing","hasVisibleSelector","resolveVisibility","originalRules","compiledRulesBody","isVisibleRuleset","ToCSSVisitor","_level","simplifyLevel","mixinNode","commentNode","visitDirectiveWithBody","visitDirectiveWithoutBody","hasFakeRuleset","nodeRules","_mergeRules","charset","isRoot","checkValidNodes","_compileRulesetPaths","nodeRuleCnt","_removeDuplicateRules","ruleCache","ruleList","ruleCSS","groups","parts","toExpression","values","spacedGroups","lastSpacedGroup","anonymousNode","toCssVisitor","visitors","index$4","transformTree","evaldRoot","evalEnv","preEvalVisitors","MarkVisibleSelectorsVisitor","ExtendVisitor","pluginVisitors","getVisitors","pluginVisitor","isPreEvalVisitor","isPreVisitor","parseTree","SourceMapBuilder","toCSSOptions","postProcessors","getPostProcessors","process","file","files","rootFilename","chunker","fail","emitChunk","force","chunkerCurrentIndex","emitFrom","level","parenLevel","lastOpening","lastOpeningParen","lastMultiComment","lastMultiCommentEndBrace","chunks","currentChunkStartIndex","cc","cc2","charCodeAt","fromCharCode","parserInput","skipWhitespace","oldi","oldj","curr","currentPos","endIndex","mem","inp","nextChar","autoCommentAbsorb","CHARCODE_FORWARD_SLASH","nextNewLine","text","commentStore","nextStarSlash","CHARCODE_SPACE","CHARCODE_LF","CHARCODE_TAB","CHARCODE_CR","save","restore","possibleErrorMessage","furthest","furthestPossibleErrorMessage","state","saveStack","forget","isWhitespace","offset","pos","code","$re","tok","exec","$char","$str","tokLength","$quoted","startChar","currentPosition","peek","peekChar","currentChar","getInput","peekNotNumeric","start","chunkInput","failFunction","end","Parser","expect","parsers","expectChar","getParserInput","additionalData","globalVars","modifyVars","ignored","preText","serializeVars","preProcessors","getPreProcessors","banner","primary","endInfo","furthestChar","furthestReachedEnd","processImports","extendRule","definition","entities","foundSemiColon","isEscaped","argsSemiColon","argsComma","expressions","isSemiColonSeparated","entity","curly","colorCandidateString","ud","js","escape","isRule","elemIndex","elem","isCall","returner","expressionContainsNamed","nameLoop","literal","cond","argInfo","conditions","block","variableCurly","slashedCombinator","isLess","when","blockRuleset","lessSelector","tryAnonymous","startOfRule","isVariable","ruleProperty","tryValueFirst","anonymousValue","dir","importOptions","mediaFeatures","o","optionName","importOption","opt","property","mediaFeature","nonVendorSpecificName","hasIdentifier","hasExpression","hasUnknown","hasBlock","addition","operand","multiplication","logical","next","conditionAnd","me","negatedCondition","parenthesisCondition","body","atomicCondition","sub","colorKeyword","delim","re","simpleProperty","parser","loaded","rootFileInfo","mime","queue","fileParsedFunc","importedEqualsRoot","newFileInfo","relativeUrls","entryPath","tryAppendExtension","loadFileCallback","loadedFile","resolvedFilename","pathDiff","isPathAbsolute","alwaysMakePathsAbsolute","newEnv","FunctionImporter","parse","promise","loadFile","err","then","index$8","abstractFileManager","lastIndexOf","ext","supportsSync","basePath","laterPath","baseUrl","urlParts","extractUrlParts","baseUrlParts","urlDirectories","baseUrlDirectories","diff","hostPart","directories","urlPartsRegex","fileUrl","abstractFileManager_1","rgba","hue","m1","m2","hsva","floor","vs","perm","amount","method","hsl","weight","log","w","w1","w2","desaturate","dark","light","threshold","t","mix","colorBlendModeFunctions","multiply","screen","sqrt","overlay","abs","dataUri","fallback","functionThis","mimetypeNode","filePathNode","mimetype","filePath","fragmentStart","useBase64","mimeLookup","charsetLookup","fileSync","loadFileSync","buf","encodeURIComponent","uri","ieCompat","MathHelper","_math","fn","mathHelper","mathFunctions","fraction","num","minMax","isMin","currentUnified","referenceUnified","unitStatic","unitClone","order","_len2","_key2","y","evaluated","encodeURI","pattern","flags","RegExp","token","svg","direction","throwArgumentDescriptor","stops","gradientDirectionSvg","gradientType","rectangleDimension","renderEnv","directionValue","position","positionValue","isa","Type","isunit","getItemsFromNode","index$10","render","ParseTree","Promise","resolve","reject","PluginManager","installedPlugins","addPlugins","plugins","addPlugin","install","addVisitor","addPreProcessor","preProcessor","priority","indexToInsertAt","addPostProcessor","postProcessor","manager","ImportManager","NotSupportedFileManager","supports","AbstractFileManager","silent","formatError","errorTxt","FileManager"],"mappings":"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","file":"less.min.js","sourcesContent":["const Node = require('./node')\nconst colors = require('../data/colors')\n\n//\n// RGB Colors - #ff0014, #eee\n//\nclass Color extends Node {\n  constructor(rgb, a, originalForm) {\n    super()\n    //\n    // The end goal here, is to parse the arguments\n    // into an integer triplet, such as `128, 255, 0`\n    //\n    // This facilitates operations and conversions.\n    //\n    if (Array.isArray(rgb)) {\n      this.rgb = rgb\n    } else if (rgb.length == 6) {\n      this.rgb = rgb.match(/.{2}/g).map(c => parseInt(c, 16))\n    } else {\n      this.rgb = rgb.split('').map(c => parseInt(c + c, 16))\n    }\n    this.alpha = typeof a === 'number' ? a : 1\n    if (typeof originalForm !== 'undefined') {\n      this.value = originalForm\n    }\n  }\n\n  luma() {\n    let r = this.rgb[0] / 255\n    let g = this.rgb[1] / 255\n    let b = this.rgb[2] / 255\n\n    r = r <= 0.03928 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4)\n    g = g <= 0.03928 ? g / 12.92 : Math.pow((g + 0.055) / 1.055, 2.4)\n    b = b <= 0.03928 ? b / 12.92 : Math.pow((b + 0.055) / 1.055, 2.4)\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b\n  }\n\n  genCSS(context, output) {\n    output.add(this.toCSS(context))\n  }\n\n  toCSS(context, doNotCompress) {\n    const compress = context && context.compress && !doNotCompress\n    let color\n    let alpha\n\n    // `value` is set if this color was originally\n    // converted from a named color string so we need\n    // to respect this and try to output named color too.\n    if (this.value) {\n      return this.value\n    }\n\n    // If we have some transparency, the only way to represent it\n    // is via `rgba`. Otherwise, we use the hex representation,\n    // which has better compatibility with older browsers.\n    // Values are capped between `0` and `255`, rounded and zero-padded.\n    alpha = this.fround(context, this.alpha)\n    if (alpha < 1) {\n      return `rgba(${this.rgb\n        .map(c => clamp(Math.round(c), 255))\n        .concat(clamp(alpha, 1))\n        .join(',' + (compress ? '' : ' '))})`\n    }\n\n    color = this.toRGB()\n\n    if (compress) {\n      const splitcolor = color.split('')\n\n      // Convert color to short format\n      if (\n        splitcolor[1] === splitcolor[2] &&\n        splitcolor[3] === splitcolor[4] &&\n        splitcolor[5] === splitcolor[6]\n      ) {\n        color = `#${splitcolor[1]}${splitcolor[3]}${splitcolor[5]}`\n      }\n    }\n\n    return color\n  }\n\n  //\n  // Operations have to be done per-channel, if not,\n  // channels will spill onto each other. Once we have\n  // our result, in the form of an integer triplet,\n  // we create a new Color node to hold the result.\n  //\n  operate(context, op, other) {\n    const rgb = []\n    const alpha = this.alpha * (1 - other.alpha) + other.alpha\n    for (let c = 0; c < 3; c++) {\n      rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c])\n    }\n    return new Color(rgb, alpha)\n  }\n\n  toRGB() {\n    return toHex(this.rgb)\n  }\n\n  toHSL() {\n    const r = this.rgb[0] / 255\n    const g = this.rgb[1] / 255\n    const b = this.rgb[2] / 255\n    const a = this.alpha\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    let h\n    let s\n    const l = (max + min) / 2\n    const d = max - min\n\n    if (max === min) {\n      h = s = 0\n    } else {\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0)\n          break\n        case g:\n          h = (b - r) / d + 2\n          break\n        case b:\n          h = (r - g) / d + 4\n          break\n      }\n      h /= 6\n    }\n    return { h: h * 360, s, l, a }\n  }\n\n  //Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n  toHSV() {\n    const r = this.rgb[0] / 255\n    const g = this.rgb[1] / 255\n    const b = this.rgb[2] / 255\n    const a = this.alpha\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    let h\n    let s\n    const v = max\n\n    const d = max - min\n    if (max === 0) {\n      s = 0\n    } else {\n      s = d / max\n    }\n\n    if (max === min) {\n      h = 0\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0)\n          break\n        case g:\n          h = (b - r) / d + 2\n          break\n        case b:\n          h = (r - g) / d + 4\n          break\n      }\n      h /= 6\n    }\n    return { h: h * 360, s, v, a }\n  }\n\n  toARGB() {\n    return toHex([this.alpha * 255].concat(this.rgb))\n  }\n\n  compare(x) {\n    return x.rgb &&\n    x.rgb[0] === this.rgb[0] &&\n    x.rgb[1] === this.rgb[1] &&\n    x.rgb[2] === this.rgb[2] &&\n    x.alpha === this.alpha\n      ? 0\n      : undefined\n  }\n}\n\nColor.prototype.type = 'Color'\n\nfunction clamp(v, max) {\n  return Math.min(Math.max(v, 0), max)\n}\n\nfunction toHex(v) {\n  return `#${v\n    .map(c => {\n      c = clamp(Math.round(c), 255)\n      return (c < 16 ? '0' : '') + c.toString(16)\n    })\n    .join('')}`\n}\n\nColor.fromKeyword = keyword => {\n  let c\n  const key = keyword.toLowerCase()\n  if (colors.hasOwnProperty(key)) {\n    c = new Color(colors[key].slice(1))\n  } else if (key === 'transparent') {\n    c = new Color([0, 0, 0], 0)\n  }\n\n  if (c) {\n    c.value = keyword\n    return c\n  }\n}\nmodule.exports = Color\n","const Node = require('./node')\nconst Value = require('./value')\nconst Keyword = require('./keyword')\n\nclass Rule extends Node {\n  constructor(\n    name,\n    value,\n    important,\n    merge,\n    index,\n    currentFileInfo,\n    inline,\n    variable\n  ) {\n    super()\n    this.name = name\n    this.value = value instanceof Node ? value : new Value([value]) //value instanceof tree.Value || value instanceof tree.Ruleset ??\n    this.important = important ? ` ${important.trim()}` : ''\n    this.merge = merge\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.inline = inline || false\n    this.variable =\n      variable !== undefined ? variable : name.charAt && name.charAt(0) === '@'\n    this.allowRoot = true\n  }\n\n  genCSS(context, output) {\n    output.add(\n      this.name + (context.compress ? ':' : ': '),\n      this.currentFileInfo,\n      this.index\n    )\n    try {\n      this.value.genCSS(context, output)\n    } catch (e) {\n      e.index = this.index\n      e.filename = this.currentFileInfo.filename\n      throw e\n    }\n    output.add(\n      this.important +\n        (this.inline || (context.lastRule && context.compress) ? '' : ';'),\n      this.currentFileInfo,\n      this.index\n    )\n  }\n\n  eval(context) {\n    let strictMathBypass = false\n    let name = this.name\n    let evaldValue\n    let variable = this.variable\n    if (typeof name !== 'string') {\n      // expand 'primitive' name directly to get\n      // things faster (~10% for benchmark.less):\n      name =\n        name.length === 1 && name[0] instanceof Keyword\n          ? name[0].value\n          : evalName(context, name)\n      variable = false // never treat expanded interpolation as new variable name\n    }\n    if (name === 'font' && !context.strictMath) {\n      strictMathBypass = true\n      context.strictMath = true\n    }\n    try {\n      context.importantScope.push({})\n      evaldValue = this.value.eval(context)\n\n      if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n        throw {\n          message: 'Rulesets cannot be evaluated on a property.',\n          index: this.index,\n          filename: this.currentFileInfo.filename,\n        }\n      }\n      let important = this.important\n      const importantResult = context.importantScope.pop()\n      if (!important && importantResult.important) {\n        important = importantResult.important\n      }\n\n      return new Rule(\n        name,\n        evaldValue,\n        important,\n        this.merge,\n        this.index,\n        this.currentFileInfo,\n        this.inline,\n        variable\n      )\n    } catch (e) {\n      if (typeof e.index !== 'number') {\n        e.index = this.index\n        e.filename = this.currentFileInfo.filename\n      }\n      throw e\n    } finally {\n      if (strictMathBypass) {\n        context.strictMath = false\n      }\n    }\n  }\n\n  makeImportant() {\n    return new Rule(\n      this.name,\n      this.value,\n      '!important',\n      this.merge,\n      this.index,\n      this.currentFileInfo,\n      this.inline\n    )\n  }\n}\n\nfunction evalName(context, name) {\n  let value = ''\n  let i\n  const n = name.length\n  const output = {\n    add(s) {\n      value += s\n    },\n  }\n  for (i = 0; i < n; i++) {\n    name[i].eval(context).genCSS(context, output)\n  }\n  return value\n}\n\nRule.prototype.type = 'Rule'\n\nmodule.exports = Rule\n","function makeRegistry(base) {\n  return {\n    _data: {},\n    add(name, func) {\n      // precautionary case conversion, as later querying of\n      // the registry by function-caller uses lower case as well.\n      name = name.toLowerCase()\n\n      if (this._data.hasOwnProperty(name)) {\n        //TODO warn\n      }\n      this._data[name] = func\n    },\n    addMultiple(functions) {\n      Object.keys(functions).forEach(name => {\n        this.add(name, functions[name])\n      })\n    },\n    get(name) {\n      return this._data[name] || (base && base.get(name))\n    },\n    inherit() {\n      return makeRegistry(this)\n    },\n  }\n}\n\nmodule.exports = makeRegistry(null)\n","const tree = require('../tree')\n\nconst _visitArgs = { visitDeeper: true }\nlet _hasIndexed = false\n\nfunction _noop(node) {\n  return node\n}\n\nfunction indexNodeTypes(parent, ticker) {\n  // add .typeIndex to tree node types for lookup table\n  let key\n\n  let child\n  for (key in parent) {\n    if (parent.hasOwnProperty(key)) {\n      child = parent[key]\n      switch (typeof child) {\n        case 'function':\n          // ignore bound functions directly on tree which do not have a prototype\n          // or aren't nodes\n          if (child.prototype && child.prototype.type) {\n            child.prototype.typeIndex = ticker++\n          }\n          break\n        case 'object':\n          ticker = indexNodeTypes(child, ticker)\n          break\n      }\n    }\n  }\n  return ticker\n}\n\nclass Visitor {\n  constructor(implementation) {\n    this._implementation = implementation\n    this._visitFnCache = []\n\n    if (!_hasIndexed) {\n      indexNodeTypes(tree, 1)\n      _hasIndexed = true\n    }\n  }\n\n  visit(node) {\n    if (!node) {\n      return node\n    }\n\n    const nodeTypeIndex = node.typeIndex\n    if (!nodeTypeIndex) {\n      return node\n    }\n\n    const visitFnCache = this._visitFnCache\n    const impl = this._implementation\n    const aryIndx = nodeTypeIndex << 1\n    const outAryIndex = aryIndx | 1\n    let func = visitFnCache[aryIndx]\n    let funcOut = visitFnCache[outAryIndex]\n    const visitArgs = _visitArgs\n    let fnName\n\n    visitArgs.visitDeeper = true\n\n    if (!func) {\n      fnName = `visit${node.type}`\n      func = impl[fnName] || _noop\n      funcOut = impl[`${fnName}Out`] || _noop\n      visitFnCache[aryIndx] = func\n      visitFnCache[outAryIndex] = funcOut\n    }\n\n    if (func !== _noop) {\n      const newNode = func.call(impl, node, visitArgs)\n      if (impl.isReplacing) {\n        node = newNode\n      }\n    }\n\n    if (visitArgs.visitDeeper && node && node.accept) {\n      node.accept(this)\n    }\n\n    if (funcOut != _noop) {\n      funcOut.call(impl, node)\n    }\n\n    return node\n  }\n\n  visitArray(nodes, nonReplacing) {\n    if (!nodes) {\n      return nodes\n    }\n\n    const cnt = nodes.length\n    let i\n\n    // Non-replacing\n    if (nonReplacing || !this._implementation.isReplacing) {\n      for (i = 0; i < cnt; i++) {\n        this.visit(nodes[i])\n      }\n      return nodes\n    }\n\n    // Replacing\n    const out = []\n    for (i = 0; i < cnt; i++) {\n      const evald = this.visit(nodes[i])\n      if (evald === undefined) {\n        continue\n      }\n      if (!evald.splice) {\n        out.push(evald)\n      } else if (evald.length) {\n        this.flatten(evald, out)\n      }\n    }\n    return out\n  }\n\n  flatten(arr, out) {\n    if (!out) {\n      out = []\n    }\n\n    let cnt\n    let i\n    let item\n    let nestedCnt\n    let j\n    let nestedItem\n\n    for (i = 0, cnt = arr.length; i < cnt; i++) {\n      item = arr[i]\n      if (item === undefined) {\n        continue\n      }\n      if (!item.splice) {\n        out.push(item)\n        continue\n      }\n\n      for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n        nestedItem = item[j]\n        if (nestedItem === undefined) {\n          continue\n        }\n        if (!nestedItem.splice) {\n          out.push(nestedItem)\n        } else if (nestedItem.length) {\n          this.flatten(nestedItem, out)\n        }\n      }\n    }\n\n    return out\n  }\n}\n\nmodule.exports = Visitor\n","const Dimension = require('../tree/dimension')\nconst Color = require('../tree/color')\nconst Quoted = require('../tree/quoted')\nconst Anonymous = require('../tree/anonymous')\nconst functionRegistry = require('./function-registry')\nlet colorFunctions\n\nfunction clamp(val) {\n  return Math.min(1, Math.max(0, val))\n}\nfunction hsla(color) {\n  return colorFunctions.hsla(color.h, color.s, color.l, color.a)\n}\nfunction number(n) {\n  if (n instanceof Dimension) {\n    return parseFloat(n.unit.is('%') ? n.value / 100 : n.value)\n  } else if (typeof n === 'number') {\n    return n\n  } else {\n    throw {\n      type: 'Argument',\n      message: 'color functions take numbers as parameters',\n    }\n  }\n}\nfunction scaled(n, size) {\n  if (n instanceof Dimension && n.unit.is('%')) {\n    return parseFloat(n.value * size / 100)\n  } else {\n    return number(n)\n  }\n}\ncolorFunctions = {\n  rgb(r, g, b) {\n    return colorFunctions.rgba(r, g, b, 1.0)\n  },\n  rgba(r, g, b, a) {\n    const rgb = [r, g, b].map(c => scaled(c, 255))\n    a = number(a)\n    return new Color(rgb, a)\n  },\n  hsl(h, s, l) {\n    return colorFunctions.hsla(h, s, l, 1.0)\n  },\n  hsla(h, s, l, a) {\n    let m1\n    let m2\n\n    function hue(h) {\n      h = h < 0 ? h + 1 : h > 1 ? h - 1 : h\n      if (h * 6 < 1) {\n        return m1 + (m2 - m1) * h * 6\n      } else if (h * 2 < 1) {\n        return m2\n      } else if (h * 3 < 2) {\n        return m1 + (m2 - m1) * (2 / 3 - h) * 6\n      } else {\n        return m1\n      }\n    }\n\n    h = number(h) % 360 / 360\n    s = clamp(number(s))\n    l = clamp(number(l))\n    a = clamp(number(a))\n\n    m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s\n    m1 = l * 2 - m2\n\n    return colorFunctions.rgba(\n      hue(h + 1 / 3) * 255,\n      hue(h) * 255,\n      hue(h - 1 / 3) * 255,\n      a\n    )\n  },\n\n  hsv(h, s, v) {\n    return colorFunctions.hsva(h, s, v, 1.0)\n  },\n\n  hsva(h, s, v, a) {\n    h = number(h) % 360 / 360 * 360\n    s = number(s)\n    v = number(v)\n    a = number(a)\n\n    let i\n    let f\n    i = Math.floor(h / 60 % 6)\n    f = h / 60 - i\n\n    const vs = [v, v * (1 - s), v * (1 - f * s), v * (1 - (1 - f) * s)]\n    const perm = [\n      [0, 3, 1],\n      [2, 0, 1],\n      [1, 0, 3],\n      [1, 2, 0],\n      [3, 1, 0],\n      [0, 1, 2],\n    ]\n\n    return colorFunctions.rgba(\n      vs[perm[i][0]] * 255,\n      vs[perm[i][1]] * 255,\n      vs[perm[i][2]] * 255,\n      a\n    )\n  },\n\n  hue(color) {\n    return new Dimension(color.toHSL().h)\n  },\n  saturation(color) {\n    return new Dimension(color.toHSL().s * 100, '%')\n  },\n  lightness(color) {\n    return new Dimension(color.toHSL().l * 100, '%')\n  },\n  hsvhue(color) {\n    return new Dimension(color.toHSV().h)\n  },\n  hsvsaturation(color) {\n    return new Dimension(color.toHSV().s * 100, '%')\n  },\n  hsvvalue(color) {\n    return new Dimension(color.toHSV().v * 100, '%')\n  },\n  red(color) {\n    return new Dimension(color.rgb[0])\n  },\n  green(color) {\n    return new Dimension(color.rgb[1])\n  },\n  blue(color) {\n    return new Dimension(color.rgb[2])\n  },\n  alpha(color) {\n    return new Dimension(color.toHSL().a)\n  },\n  luma(color) {\n    return new Dimension(color.luma() * color.alpha * 100, '%')\n  },\n  luminance(color) {\n    const luminance =\n      0.2126 * color.rgb[0] / 255 +\n      0.7152 * color.rgb[1] / 255 +\n      0.0722 * color.rgb[2] / 255\n\n    return new Dimension(luminance * color.alpha * 100, '%')\n  },\n  saturate(color, amount, method) {\n    // filter: saturate(3.2);\n    // should be kept as is, so check for color\n    if (!color.rgb) {\n      return null\n    }\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.s += hsl.s * amount.value / 100\n    } else {\n      hsl.s += amount.value / 100\n    }\n    hsl.s = clamp(hsl.s)\n    return hsla(hsl)\n  },\n  desaturate(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.s -= hsl.s * amount.value / 100\n    } else {\n      hsl.s -= amount.value / 100\n    }\n    hsl.s = clamp(hsl.s)\n    return hsla(hsl)\n  },\n  lighten(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.l += hsl.l * amount.value / 100\n    } else {\n      hsl.l += amount.value / 100\n    }\n    hsl.l = clamp(hsl.l)\n    return hsla(hsl)\n  },\n  darken(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.l -= hsl.l * amount.value / 100\n    } else {\n      hsl.l -= amount.value / 100\n    }\n    hsl.l = clamp(hsl.l)\n    return hsla(hsl)\n  },\n  fadein(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.a += hsl.a * amount.value / 100\n    } else {\n      hsl.a += amount.value / 100\n    }\n    hsl.a = clamp(hsl.a)\n    return hsla(hsl)\n  },\n  fadeout(color, amount, method) {\n    const hsl = color.toHSL()\n\n    if (typeof method !== 'undefined' && method.value === 'relative') {\n      hsl.a -= hsl.a * amount.value / 100\n    } else {\n      hsl.a -= amount.value / 100\n    }\n    hsl.a = clamp(hsl.a)\n    return hsla(hsl)\n  },\n  fade(color, amount) {\n    const hsl = color.toHSL()\n\n    hsl.a = amount.value / 100\n    hsl.a = clamp(hsl.a)\n    return hsla(hsl)\n  },\n  spin(color, amount) {\n    const hsl = color.toHSL()\n    const hue = (hsl.h + amount.value) % 360\n\n    hsl.h = hue < 0 ? 360 + hue : hue\n\n    return hsla(hsl)\n  },\n  //\n  // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n  // http://sass-lang.com\n  //\n  mix(color1, color2, weight) {\n    if (!color1.toHSL || !color2.toHSL) {\n      console.log(color2.type)\n      console.dir(color2)\n    }\n    if (!weight) {\n      weight = new Dimension(50)\n    }\n    const p = weight.value / 100.0\n    const w = p * 2 - 1\n    const a = color1.toHSL().a - color2.toHSL().a\n\n    const w1 = ((w * a == -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0\n    const w2 = 1 - w1\n\n    const rgb = [\n      color1.rgb[0] * w1 + color2.rgb[0] * w2,\n      color1.rgb[1] * w1 + color2.rgb[1] * w2,\n      color1.rgb[2] * w1 + color2.rgb[2] * w2,\n    ]\n\n    const alpha = color1.alpha * p + color2.alpha * (1 - p)\n\n    return new Color(rgb, alpha)\n  },\n  greyscale(color) {\n    return colorFunctions.desaturate(color, new Dimension(100))\n  },\n  contrast(color, dark, light, threshold) {\n    // filter: contrast(3.2);\n    // should be kept as is, so check for color\n    if (!color.rgb) {\n      return null\n    }\n    if (typeof light === 'undefined') {\n      light = colorFunctions.rgba(255, 255, 255, 1.0)\n    }\n    if (typeof dark === 'undefined') {\n      dark = colorFunctions.rgba(0, 0, 0, 1.0)\n    }\n    //Figure out which is actually light and dark!\n    if (dark.luma() > light.luma()) {\n      const t = light\n      light = dark\n      dark = t\n    }\n    if (typeof threshold === 'undefined') {\n      threshold = 0.43\n    } else {\n      threshold = number(threshold)\n    }\n    if (color.luma() < threshold) {\n      return light\n    } else {\n      return dark\n    }\n  },\n  argb(color) {\n    return new Anonymous(color.toARGB())\n  },\n  color(c) {\n    if (c instanceof Quoted && /^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(c.value)) {\n      return new Color(c.value.slice(1))\n    }\n    if (c instanceof Color || (c = Color.fromKeyword(c.value))) {\n      c.value = undefined\n      return c\n    }\n    throw {\n      type: 'Argument',\n      message: 'argument must be a color keyword or 3/6 digit hex e.g. #FFF',\n    }\n  },\n  tint(color, amount) {\n    return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount)\n  },\n  shade(color, amount) {\n    return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount)\n  },\n}\nfunctionRegistry.addMultiple(colorFunctions)\n","const Color = require('../tree/color')\nconst functionRegistry = require('./function-registry')\n\n// Color Blending\n// ref: http://www.w3.org/TR/compositing-1\n\nfunction colorBlend(mode, color1, color2) {\n  const ab = color1.alpha // result\n\n  let // backdrop\n  cb\n\n  const as = color2.alpha\n\n  let // source\n  cs\n\n  let ar\n  let cr\n  const r = []\n\n  ar = as + ab * (1 - as)\n  for (let i = 0; i < 3; i++) {\n    cb = color1.rgb[i] / 255\n    cs = color2.rgb[i] / 255\n    cr = mode(cb, cs)\n    if (ar) {\n      cr = (as * cs + ab * (cb - as * (cb + cs - cr))) / ar\n    }\n    r[i] = cr * 255\n  }\n\n  return new Color(r, ar)\n}\n\nconst colorBlendModeFunctions = {\n  multiply(cb, cs) {\n    return cb * cs\n  },\n  screen(cb, cs) {\n    return cb + cs - cb * cs\n  },\n  overlay(cb, cs) {\n    cb *= 2\n    return cb <= 1\n      ? colorBlendModeFunctions.multiply(cb, cs)\n      : colorBlendModeFunctions.screen(cb - 1, cs)\n  },\n  softlight(cb, cs) {\n    let d = 1\n    let e = cb\n    if (cs > 0.5) {\n      e = 1\n      d = cb > 0.25 ? Math.sqrt(cb) : ((16 * cb - 12) * cb + 4) * cb\n    }\n    return cb - (1 - 2 * cs) * e * (d - cb)\n  },\n  hardlight(cb, cs) {\n    return colorBlendModeFunctions.overlay(cs, cb)\n  },\n  difference(cb, cs) {\n    return Math.abs(cb - cs)\n  },\n  exclusion(cb, cs) {\n    return cb + cs - 2 * cb * cs\n  },\n\n  // non-w3c functions:\n  average(cb, cs) {\n    return (cb + cs) / 2\n  },\n  negation(cb, cs) {\n    return 1 - Math.abs(cb + cs - 1)\n  },\n}\n\nfor (const f in colorBlendModeFunctions) {\n  if (colorBlendModeFunctions.hasOwnProperty(f)) {\n    colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f])\n  }\n}\n\nfunctionRegistry.addMultiple(colorBlend)\n","module.exports = {\n  error(msg) {\n    this._fireEvent('error', msg)\n  },\n  warn(msg) {\n    this._fireEvent('warn', msg)\n  },\n  info(msg) {\n    this._fireEvent('info', msg)\n  },\n  debug(msg) {\n    this._fireEvent('debug', msg)\n  },\n  addListener(listener) {\n    this._listeners.push(listener)\n  },\n  removeListener(listener) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      if (this._listeners[i] === listener) {\n        this._listeners.splice(i, 1)\n        return\n      }\n    }\n  },\n  _fireEvent(type, msg) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      const logFunction = this._listeners[i][type]\n      if (logFunction) {\n        logFunction(msg)\n      }\n    }\n  },\n  _listeners: [],\n}\n","const logger = require('../logger')\n\nclass Environment {\n  constructor(externalEnvironment, fileManagers) {\n    this.fileManagers = fileManagers || []\n    externalEnvironment = externalEnvironment || {}\n\n    const optionalFunctions = [\n      'encodeBase64',\n      'mimeLookup',\n      'charsetLookup',\n      'getSourceMapGenerator',\n    ]\n    const requiredFunctions = []\n    const functions = requiredFunctions.concat(optionalFunctions)\n\n    for (let i = 0; i < functions.length; i++) {\n      const propName = functions[i]\n      const environmentFunc = externalEnvironment[propName]\n      if (environmentFunc) {\n        this[propName] = environmentFunc.bind(externalEnvironment)\n      } else if (i < requiredFunctions.length) {\n        this.warn(`missing required function in environment - ${propName}`)\n      }\n    }\n  }\n\n  getFileManager(filename, currentDirectory, options, environment, isSync) {\n    if (!filename) {\n      logger.warn(\n        'getFileManager called with no filename.. Please report this issue. continuing.'\n      )\n    }\n    if (!currentDirectory) {\n      logger.warn(\n        'getFileManager called with null directory.. Please report this issue. continuing.'\n      )\n    }\n\n    let fileManagers = this.fileManagers\n    if (options.pluginManager) {\n      fileManagers = []\n        .concat(fileManagers)\n        .concat(options.pluginManager.getFileManagers())\n    }\n    for (let i = fileManagers.length - 1; i >= 0; i--) {\n      const fileManager = fileManagers[i]\n      if (\n        fileManager[isSync ? 'supportsSync' : 'supports'](\n          filename,\n          currentDirectory,\n          options,\n          environment\n        )\n      ) {\n        return fileManager\n      }\n    }\n    return null\n  }\n\n  addFileManager(fileManager) {\n    this.fileManagers.push(fileManager)\n  }\n\n  clearFileManagers() {\n    this.fileManagers = []\n  }\n}\n\nmodule.exports = Environment\n","module.exports = environment => {\n  class SourceMapOutput {\n    constructor(options) {\n      this._css = []\n      this._rootNode = options.rootNode\n      this._contentsMap = options.contentsMap\n      this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap\n      if (options.sourceMapFilename) {\n        this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/')\n      }\n      this._outputFilename = options.outputFilename\n      this.sourceMapURL = options.sourceMapURL\n      if (options.sourceMapBasepath) {\n        this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/')\n      }\n      if (options.sourceMapRootpath) {\n        this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/')\n        if (\n          this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !==\n          '/'\n        ) {\n          this._sourceMapRootpath += '/'\n        }\n      } else {\n        this._sourceMapRootpath = ''\n      }\n      this._outputSourceFiles = options.outputSourceFiles\n      this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator()\n\n      this._lineNumber = 0\n      this._column = 0\n    }\n\n    normalizeFilename(filename) {\n      filename = filename.replace(/\\\\/g, '/')\n\n      if (\n        this._sourceMapBasepath &&\n        filename.indexOf(this._sourceMapBasepath) === 0\n      ) {\n        filename = filename.substring(this._sourceMapBasepath.length)\n        if (filename.charAt(0) === '\\\\' || filename.charAt(0) === '/') {\n          filename = filename.substring(1)\n        }\n      }\n      return (this._sourceMapRootpath || '') + filename\n    }\n\n    add(chunk, fileInfo, index, mapLines) {\n      //ignore adding empty strings\n      if (!chunk) {\n        return\n      }\n\n      let lines\n      let sourceLines\n      let columns\n      let sourceColumns\n      let i\n\n      if (fileInfo) {\n        let inputSource = this._contentsMap[fileInfo.filename]\n\n        // remove vars/banner added to the top of the file\n        if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n          // adjust the index\n          index -= this._contentsIgnoredCharsMap[fileInfo.filename]\n          if (index < 0) {\n            index = 0\n          }\n          // adjust the source\n          inputSource = inputSource.slice(\n            this._contentsIgnoredCharsMap[fileInfo.filename]\n          )\n        }\n        inputSource = inputSource.substring(0, index)\n        sourceLines = inputSource.split('\\n')\n        sourceColumns = sourceLines[sourceLines.length - 1]\n      }\n\n      lines = chunk.split('\\n')\n      columns = lines[lines.length - 1]\n\n      if (fileInfo) {\n        if (!mapLines) {\n          this._sourceMapGenerator.addMapping({\n            generated: { line: this._lineNumber + 1, column: this._column },\n            original: {\n              line: sourceLines.length,\n              column: sourceColumns.length,\n            },\n            source: this.normalizeFilename(fileInfo.filename),\n          })\n        } else {\n          for (i = 0; i < lines.length; i++) {\n            this._sourceMapGenerator.addMapping({\n              generated: {\n                line: this._lineNumber + i + 1,\n                column: i === 0 ? this._column : 0,\n              },\n              original: {\n                line: sourceLines.length + i,\n                column: i === 0 ? sourceColumns.length : 0,\n              },\n              source: this.normalizeFilename(fileInfo.filename),\n            })\n          }\n        }\n      }\n\n      if (lines.length === 1) {\n        this._column += columns.length\n      } else {\n        this._lineNumber += lines.length - 1\n        this._column = columns.length\n      }\n\n      this._css.push(chunk)\n    }\n\n    isEmpty() {\n      return this._css.length === 0\n    }\n\n    toCSS(context) {\n      this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({\n        file: this._outputFilename,\n        sourceRoot: null,\n      })\n\n      if (this._outputSourceFiles) {\n        for (const filename in this._contentsMap) {\n          if (this._contentsMap.hasOwnProperty(filename)) {\n            let source = this._contentsMap[filename]\n            if (this._contentsIgnoredCharsMap[filename]) {\n              source = source.slice(this._contentsIgnoredCharsMap[filename])\n            }\n            this._sourceMapGenerator.setSourceContent(\n              this.normalizeFilename(filename),\n              source\n            )\n          }\n        }\n      }\n\n      this._rootNode.genCSS(context, this)\n\n      if (this._css.length > 0) {\n        let sourceMapURL\n        const sourceMapContent = JSON.stringify(\n          this._sourceMapGenerator.toJSON()\n        )\n\n        if (this.sourceMapURL) {\n          sourceMapURL = this.sourceMapURL\n        } else if (this._sourceMapFilename) {\n          sourceMapURL = this._sourceMapFilename\n        }\n        this.sourceMapURL = sourceMapURL\n\n        this.sourceMap = sourceMapContent\n      }\n\n      return this._css.join('')\n    }\n  }\n\n  return SourceMapOutput\n}\n","module.exports = (SourceMapOutput, environment) => {\n  class SourceMapBuilder {\n    constructor(options) {\n      this.options = options\n    }\n\n    toCSS(rootNode, options, imports) {\n      const sourceMapOutput = new SourceMapOutput({\n        contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n        rootNode,\n        contentsMap: imports.contents,\n        sourceMapFilename: this.options.sourceMapFilename,\n        sourceMapURL: this.options.sourceMapURL,\n        outputFilename: this.options.sourceMapOutputFilename,\n        sourceMapBasepath: this.options.sourceMapBasepath,\n        sourceMapRootpath: this.options.sourceMapRootpath,\n        outputSourceFiles: this.options.outputSourceFiles,\n        sourceMapGenerator: this.options.sourceMapGenerator,\n        sourceMapFileInline: this.options.sourceMapFileInline,\n      })\n\n      const css = sourceMapOutput.toCSS(options)\n      this.sourceMap = sourceMapOutput.sourceMap\n      this.sourceMapURL = sourceMapOutput.sourceMapURL\n      if (this.options.sourceMapInputFilename) {\n        this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(\n          this.options.sourceMapInputFilename\n        )\n      }\n      return css + this.getCSSAppendage()\n    }\n\n    getCSSAppendage() {\n      let sourceMapURL = this.sourceMapURL\n      if (this.options.sourceMapFileInline) {\n        if (this.sourceMap === undefined) {\n          return ''\n        }\n        sourceMapURL = `data:application/json;base64,${environment.encodeBase64(\n          this.sourceMap\n        )}`\n      }\n\n      if (sourceMapURL) {\n        return `/*# sourceMappingURL=${sourceMapURL} */`\n      }\n      return ''\n    }\n\n    getExternalSourceMap() {\n      return this.sourceMap\n    }\n\n    setExternalSourceMap(sourceMap) {\n      this.sourceMap = sourceMap\n    }\n\n    isInline() {\n      return this.options.sourceMapFileInline\n    }\n\n    getSourceMapURL() {\n      return this.sourceMapURL\n    }\n\n    getOutputFilename() {\n      return this.options.sourceMapOutputFilename\n    }\n\n    getInputFilename() {\n      return this.sourceMapInputFilename\n    }\n  }\n\n  return SourceMapBuilder\n}\n","module.exports = {\n  getLocation(index, inputStream) {\n    let n = index + 1\n    let line = null\n    let column = -1\n\n    while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n      column++\n    }\n\n    if (typeof index === 'number') {\n      line = (inputStream.slice(0, index).match(/\\n/g) || '').length\n    }\n\n    return {\n      line,\n      column,\n    }\n  },\n}\n","const utils = require('./utils')\n\nconst LessError = (module.exports = function LessError(\n  e,\n  importManager,\n  currentFilename\n) {\n  Error.call(this)\n\n  const filename = e.filename || currentFilename\n\n  if (importManager && filename) {\n    const input = importManager.contents[filename]\n    const loc = utils.getLocation(e.index, input)\n    const line = loc.line\n    const col = loc.column\n    const callLine = e.call && utils.getLocation(e.call, input).line\n    const lines = input.split('\\n')\n\n    this.type = e.type || 'Syntax'\n    this.filename = filename\n    this.index = e.index\n    this.line = typeof line === 'number' ? line + 1 : null\n    this.callLine = callLine + 1\n    this.callExtract = lines[callLine]\n    this.column = col\n    this.extract = [lines[line - 1], lines[line], lines[line + 1]]\n  }\n  this.message = e.message\n  this.stack = e.stack\n})\n\nif (typeof Object.create === 'undefined') {\n  const F = () => {}\n  F.prototype = Error.prototype\n  LessError.prototype = new F()\n} else {\n  LessError.prototype = Object.create(Error.prototype)\n}\n\nLessError.prototype.constructor = LessError\n","const contexts = {}\nmodule.exports = contexts\n\nconst copyFromOriginal = function copyFromOriginal(\n  original,\n  destination,\n  propertiesToCopy\n) {\n  if (!original) {\n    return\n  }\n\n  for (let i = 0; i < propertiesToCopy.length; i++) {\n    if (original.hasOwnProperty(propertiesToCopy[i])) {\n      destination[propertiesToCopy[i]] = original[propertiesToCopy[i]]\n    }\n  }\n}\n\n/*\n parse is used whilst parsing\n */\nconst parseCopyProperties = [\n  // options\n  'paths', // option - unmodified - paths to search for imports on\n  'relativeUrls', // option - whether to adjust URL's to be relative\n  'rootpath', // option - rootpath to append to URL's\n  'strictImports', // option -\n  'insecure', // option - whether to allow imports from insecure ssl hosts\n  'dumpLineNumbers', // option - whether to dump line numbers\n  'compress', // option - whether to compress\n  'syncImport', // option - whether to import synchronously\n  'chunkInput', // option - whether to chunk input. more performant but causes parse issues.\n  'mime', // browser only - mime type for sheet import\n  'useFileCache', // browser only - whether to use the per file session cache\n  // context\n  'processImports', // option & context - whether to process imports. if false then imports will not be imported.\n  // Used by the import manager to stop multiple import visitors being created.\n  'pluginManager', // Used as the plugin manager for the session\n]\n\ncontexts.Parse = function(options) {\n  copyFromOriginal(options, this, parseCopyProperties)\n\n  if (typeof this.paths === 'string') {\n    this.paths = [this.paths]\n  }\n}\n\nconst evalCopyProperties = [\n  'paths', // additional include paths\n  'compress', // whether to compress\n  'ieCompat', // whether to enforce IE compatibility (IE8 data-uri)\n  'disableMath', // whether math enabled\n  'strictMath', // whether math has to be within parenthesis\n  'strictUnits', // whether units need to evaluate correctly\n  'sourceMap', // whether to output a source map\n  'importMultiple', // whether we are currently importing multiple copies\n  'urlArgs', // whether to add args into url tokens\n  'javascriptEnabled', // option - whether JavaScript is enabled. if undefined, defaults to true\n  'pluginManager', // Used as the plugin manager for the session\n  'importantScope', // used to bubble up !important statements,\n  'simplify', //Simplify less\n  'simplifyFilter', //Simplify variable filter\n]\n\ncontexts.Eval = function(options, frames) {\n  copyFromOriginal(options, this, evalCopyProperties)\n\n  if (typeof this.paths === 'string') {\n    this.paths = [this.paths]\n  }\n\n  this.frames = frames || []\n  this.importantScope = this.importantScope || []\n}\n\ncontexts.Eval.prototype.inParenthesis = function() {\n  if (!this.parensStack) {\n    this.parensStack = []\n  }\n  this.parensStack.push(true)\n}\n\ncontexts.Eval.prototype.outOfParenthesis = function() {\n  this.parensStack.pop()\n}\n\ncontexts.Eval.prototype.isInParens = function() {\n  return !!(this.parensStack && this.parensStack.length > 0)\n}\n\ncontexts.Eval.prototype.isMathOn = function() {\n  return !this.disableMath && (this.strictMath ? this.isInParens() : true)\n}\n\ncontexts.Eval.prototype.isPathRelative = path =>\n  !/^(?:[a-z-]+:|\\/|#)/i.test(path)\n\ncontexts.Eval.prototype.normalizePath = path => {\n  const segments = path.split('/').reverse()\n  let segment\n\n  path = []\n  while (segments.length !== 0) {\n    segment = segments.pop()\n    switch (segment) {\n      case '.':\n        break\n      case '..':\n        if (path.length === 0 || path[path.length - 1] === '..') {\n          path.push(segment)\n        } else {\n          path.pop()\n        }\n        break\n      default:\n        path.push(segment)\n        break\n    }\n  }\n\n  return path.join('/')\n}\n\n//todo - do the same for the toCSS ?\n","class Node {\n  toCSS(context) {\n    const strs = []\n    this.genCSS(context, {\n      add(chunk, fileInfo, index) {\n        strs.push(chunk)\n      },\n      isEmpty() {\n        return strs.length === 0\n      },\n    })\n    return strs.join('')\n  }\n\n  genCSS(context, output) {\n    output.add(this.value)\n  }\n\n  accept(visitor) {\n    this.value = visitor.visit(this.value)\n  }\n\n  eval() {\n    return this\n  }\n\n  _operate(context, op, a, b) {\n    switch (op) {\n      case '+':\n        return a + b\n      case '-':\n        return a - b\n      case '*':\n        return a * b\n      case '/':\n        return a / b\n    }\n  }\n\n  fround(context, value) {\n    const precision = context && context.numPrecision\n    //add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999....) are properly rounded...\n    return precision == null\n      ? value\n      : Number((value + 2e-16).toFixed(precision))\n  }\n\n  // Returns true if this node represents root of ast imported by reference\n  blocksVisibility() {\n    if (this.visibilityBlocks == null) {\n      this.visibilityBlocks = 0\n    }\n    return this.visibilityBlocks !== 0\n  }\n\n  addVisibilityBlock() {\n    if (this.visibilityBlocks == null) {\n      this.visibilityBlocks = 0\n    }\n    this.visibilityBlocks = this.visibilityBlocks + 1\n  }\n\n  removeVisibilityBlock() {\n    if (this.visibilityBlocks == null) {\n      this.visibilityBlocks = 0\n    }\n    this.visibilityBlocks = this.visibilityBlocks - 1\n  }\n\n  //Turns on node visibility - if called node will be shown in output regardless\n  //of whether it comes from import by reference or not\n  ensureVisibility() {\n    this.nodeVisible = true\n  }\n\n  //Turns off node visibility - if called node will NOT be shown in output regardless\n  //of whether it comes from import by reference or not\n  ensureInvisibility() {\n    this.nodeVisible = false\n  }\n\n  // return values:\n  // false - the node must not be visible\n  // true - the node must be visible\n  // undefined or null - the node has the same visibility as its parent\n  isVisible() {\n    return this.nodeVisible\n  }\n\n  visibilityInfo() {\n    return {\n      visibilityBlocks: this.visibilityBlocks,\n      nodeVisible: this.nodeVisible,\n    }\n  }\n\n  copyVisibilityInfo(info) {\n    if (!info) {\n      return\n    }\n    this.visibilityBlocks = info.visibilityBlocks\n    this.nodeVisible = info.nodeVisible\n  }\n}\n\nNode.compare = (a, b) => {\n  /* returns:\n     -1: a < b\n     0: a = b\n     1: a > b\n     and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n\n  if (\n    a.compare &&\n    // for \"symmetric results\" force toCSS-based comparison\n    // of Quoted or Anonymous if either value is one of those\n    !(b.type === 'Quoted' || b.type === 'Anonymous')\n  ) {\n    return a.compare(b)\n  } else if (b.compare) {\n    return -b.compare(a)\n  } else if (a.type !== b.type) {\n    return undefined\n  }\n\n  a = a.value\n  b = b.value\n  if (!Array.isArray(a)) {\n    return a === b ? 0 : undefined\n  }\n  if (a.length !== b.length) {\n    return undefined\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (Node.compare(a[i], b[i]) !== 0) {\n      return undefined\n    }\n  }\n  return 0\n}\n\nNode.numericCompare = (a, b) =>\n  a < b ? -1 : a === b ? 0 : a > b ? 1 : undefined\nmodule.exports = Node\n","const Node = require('./node')\n\nclass Alpha extends Node {\n  constructor(val) {\n    super()\n    this.value = val\n  }\n\n  accept(visitor) {\n    this.value = visitor.visit(this.value)\n  }\n\n  eval(context) {\n    if (this.value.eval) {\n      return new Alpha(this.value.eval(context))\n    }\n    return this\n  }\n\n  genCSS(context, output) {\n    output.add('alpha(opacity=')\n\n    if (this.value.genCSS) {\n      this.value.genCSS(context, output)\n    } else {\n      output.add(this.value)\n    }\n\n    output.add(')')\n  }\n}\n\nAlpha.prototype.type = 'Alpha'\n\nmodule.exports = Alpha\n","module.exports = {\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faebd7',\n  aqua: '#00ffff',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffe4c4',\n  black: '#000000',\n  blanchedalmond: '#ffebcd',\n  blue: '#0000ff',\n  blueviolet: '#8a2be2',\n  brown: '#a52a2a',\n  burlywood: '#deb887',\n  cadetblue: '#5f9ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691e',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  cyan: '#00ffff',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgrey: '#a9a9a9',\n  darkgreen: '#006400',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#e9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkslategrey: '#2f4f4f',\n  darkturquoise: '#00ced1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1e90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  fuchsia: '#ff00ff',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  gold: '#ffd700',\n  goldenrod: '#daa520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#adff2f',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  indianred: '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0e68c',\n  lavender: '#e6e6fa',\n  lavenderblush: '#fff0f5',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8e6',\n  lightcoral: '#f08080',\n  lightcyan: '#e0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgray: '#d3d3d3',\n  lightgrey: '#d3d3d3',\n  lightgreen: '#90ee90',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cefa',\n  lightslategray: '#778899',\n  lightslategrey: '#778899',\n  lightsteelblue: '#b0c4de',\n  lightyellow: '#ffffe0',\n  lime: '#00ff00',\n  limegreen: '#32cd32',\n  linen: '#faf0e6',\n  magenta: '#ff00ff',\n  maroon: '#800000',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370d8',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68ee',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffe4e1',\n  moccasin: '#ffe4b5',\n  navajowhite: '#ffdead',\n  navy: '#000080',\n  oldlace: '#fdf5e6',\n  olive: '#808000',\n  olivedrab: '#6b8e23',\n  orange: '#ffa500',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#eee8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afeeee',\n  palevioletred: '#d87093',\n  papayawhip: '#ffefd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0e0e6',\n  purple: '#800080',\n  rebeccapurple: '#663399',\n  red: '#ff0000',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169e1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2e8b57',\n  seashell: '#fff5ee',\n  sienna: '#a0522d',\n  silver: '#c0c0c0',\n  skyblue: '#87ceeb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  teal: '#008080',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40e0d0',\n  violet: '#ee82ee',\n  wheat: '#f5deb3',\n  white: '#ffffff',\n  whitesmoke: '#f5f5f5',\n  yellow: '#ffff00',\n  yellowgreen: '#9acd32',\n}\n","const Node = require('./node')\n\nclass Paren extends Node {\n  constructor(node) {\n    super()\n    this.value = node\n  }\n\n  genCSS(context, output) {\n    output.add('(')\n    this.value.genCSS(context, output)\n    output.add(')')\n  }\n\n  eval(context) {\n    return new Paren(this.value.eval(context))\n  }\n}\n\nParen.prototype.type = 'Paren'\nmodule.exports = Paren\n","const Node = require('./node')\n\nclass Combinator extends Node {\n  constructor(value) {\n    super()\n    if (value === ' ') {\n      this.value = ' '\n      this.emptyOrWhitespace = true\n    } else {\n      this.value = value ? value.trim() : ''\n      this.emptyOrWhitespace = this.value === ''\n    }\n  }\n\n  genCSS(context, output) {\n    const spaceOrEmpty =\n      context.compress || _noSpaceCombinators[this.value] ? '' : ' '\n    output.add(spaceOrEmpty + this.value + spaceOrEmpty)\n  }\n}\n\nCombinator.prototype.type = 'Combinator'\nconst _noSpaceCombinators = {\n  '': true,\n  ' ': true,\n  '|': true,\n}\nmodule.exports = Combinator\n","const Node = require('./node')\nconst Paren = require('./paren')\nconst Combinator = require('./combinator')\n\nclass Element extends Node {\n  constructor(combinator, value, index, currentFileInfo, info) {\n    super()\n    this.combinator =\n      combinator instanceof Combinator ? combinator : new Combinator(combinator)\n\n    if (typeof value === 'string') {\n      this.value = value.trim()\n    } else if (value) {\n      this.value = value\n    } else {\n      this.value = ''\n    }\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.copyVisibilityInfo(info)\n  }\n\n  accept(visitor) {\n    const value = this.value\n    this.combinator = visitor.visit(this.combinator)\n    if (typeof value === 'object') {\n      this.value = visitor.visit(value)\n    }\n  }\n\n  eval(context) {\n    return new Element(\n      this.combinator,\n      this.value.eval ? this.value.eval(context) : this.value,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  clone() {\n    return new Element(\n      this.combinator,\n      this.value,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  genCSS(context, output) {\n    output.add(this.toCSS(context), this.currentFileInfo, this.index)\n  }\n\n  toCSS(context = {}) {\n    let value = this.value\n    const firstSelector = context.firstSelector\n    if (value instanceof Paren) {\n      // selector in parens should not be affected by outer selector\n      // flags (breaks only interpolated selectors - see #1973)\n      context.firstSelector = true\n    }\n    value = value.toCSS ? value.toCSS(context) : value\n    context.firstSelector = firstSelector\n    if (value === '' && this.combinator.value.charAt(0) === '&') {\n      return ''\n    } else {\n      return this.combinator.toCSS(context) + value\n    }\n  }\n}\n\nElement.prototype.type = 'Element'\nmodule.exports = Element\n","const Node = require('./node')\nconst Element = require('./element')\n\nclass Selector extends Node {\n  constructor(\n    elements,\n    extendList,\n    condition,\n    index,\n    currentFileInfo,\n    visibilityInfo\n  ) {\n    super()\n    this.elements = elements\n    this.extendList = extendList\n    this.condition = condition\n    this.currentFileInfo = currentFileInfo || {}\n    if (!condition) {\n      this.evaldCondition = true\n    }\n    this.copyVisibilityInfo(visibilityInfo)\n  }\n\n  accept(visitor) {\n    if (this.elements) {\n      this.elements = visitor.visitArray(this.elements)\n    }\n    if (this.extendList) {\n      this.extendList = visitor.visitArray(this.extendList)\n    }\n    if (this.condition) {\n      this.condition = visitor.visit(this.condition)\n    }\n  }\n\n  createDerived(elements, extendList, evaldCondition) {\n    const info = this.visibilityInfo()\n    evaldCondition =\n      evaldCondition != null ? evaldCondition : this.evaldCondition\n    const newSelector = new Selector(\n      elements,\n      extendList || this.extendList,\n      null,\n      this.index,\n      this.currentFileInfo,\n      info\n    )\n    newSelector.evaldCondition = evaldCondition\n    newSelector.mediaEmpty = this.mediaEmpty\n    return newSelector\n  }\n\n  createEmptySelectors() {\n    const el = new Element('', '&', this.index, this.currentFileInfo)\n    const sels = [\n      new Selector([el], null, null, this.index, this.currentFileInfo),\n    ]\n    sels[0].mediaEmpty = true\n    return sels\n  }\n\n  match(other) {\n    const elements = this.elements\n    const len = elements.length\n    let olen\n    let i\n\n    other.CacheElements()\n\n    olen = other._elements.length\n    if (olen === 0 || len < olen) {\n      return 0\n    } else {\n      for (i = 0; i < olen; i++) {\n        if (elements[i].value !== other._elements[i]) {\n          return 0\n        }\n      }\n    }\n\n    return olen // return number of matched elements\n  }\n\n  CacheElements() {\n    if (this._elements) {\n      return\n    }\n\n    let elements = this.elements\n      .map(v => v.combinator.value + (v.value.value || v.value))\n      .join('')\n      .match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g)\n\n    if (elements) {\n      if (elements[0] === '&') {\n        elements.shift()\n      }\n    } else {\n      elements = []\n    }\n\n    this._elements = elements\n  }\n\n  isJustParentSelector() {\n    return (\n      !this.mediaEmpty &&\n      this.elements.length === 1 &&\n      this.elements[0].value === '&' &&\n      (this.elements[0].combinator.value === ' ' ||\n        this.elements[0].combinator.value === '')\n    )\n  }\n\n  eval(context) {\n    const evaldCondition = this.condition && this.condition.eval(context)\n    let elements = this.elements\n    let extendList = this.extendList\n\n    elements = elements && elements.map(e => e.eval(context))\n    extendList = extendList && extendList.map(extend => extend.eval(context))\n\n    return this.createDerived(elements, extendList, evaldCondition)\n  }\n\n  genCSS(context, output) {\n    let i\n    let element\n    if (\n      (!context || !context.firstSelector) &&\n      this.elements[0].combinator.value === ''\n    ) {\n      output.add(' ', this.currentFileInfo, this.index)\n    }\n    if (!this._css) {\n      //TODO caching? speed comparison?\n      for (i = 0; i < this.elements.length; i++) {\n        element = this.elements[i]\n        element.genCSS(context, output)\n      }\n    }\n  }\n\n  getIsOutput() {\n    return this.evaldCondition\n  }\n}\n\nSelector.prototype.type = 'Selector'\nmodule.exports = Selector\n","const Node = require('./node')\n\nclass Value extends Node {\n  constructor(value) {\n    super()\n    this.value = value\n    if (!value) {\n      throw new Error('Value requires an array argument')\n    }\n  }\n\n  accept(visitor) {\n    if (this.value) {\n      this.value = visitor.visitArray(this.value)\n    }\n  }\n\n  eval(context) {\n    if (this.value.length === 1) {\n      return this.value[0].eval(context)\n    } else {\n      return new Value(this.value.map(v => v.eval(context)))\n    }\n  }\n\n  genCSS(context, output) {\n    let i\n    for (i = 0; i < this.value.length; i++) {\n      this.value[i].genCSS(context, output)\n      if (i + 1 < this.value.length) {\n        output.add(context && context.compress ? ',' : ', ')\n      }\n    }\n  }\n}\n\nValue.prototype.type = 'Value'\nmodule.exports = Value\n","const Node = require('./node')\n\nclass Keyword extends Node {\n  constructor(value) {\n    super()\n    this.value = value\n  }\n\n  genCSS(context, output) {\n    if (this.value === '%') {\n      throw { type: 'Syntax', message: 'Invalid % without number' }\n    }\n    output.add(this.value)\n  }\n}\n\nKeyword.prototype.type = 'Keyword'\n\nKeyword.True = new Keyword('true')\nKeyword.False = new Keyword('false')\n\nmodule.exports = Keyword\n","const Keyword = require('../tree/keyword')\nconst functionRegistry = require('./function-registry')\n\nconst defaultFunc = {\n  eval() {\n    const v = this.value_\n    const e = this.error_\n    if (e) {\n      throw e\n    }\n    if (v != null) {\n      return v ? Keyword.True : Keyword.False\n    }\n  },\n  value(v) {\n    this.value_ = v\n  },\n  error(e) {\n    this.error_ = e\n  },\n  reset() {\n    this.value_ = this.error_ = null\n  },\n}\n\nfunctionRegistry.add('default', defaultFunc.eval.bind(defaultFunc))\n\nmodule.exports = defaultFunc\n","const debugInfo = (context, ctx, lineSeparator) => {\n  let result = ''\n  if (context.dumpLineNumbers && !context.compress) {\n    switch (context.dumpLineNumbers) {\n      case 'comments':\n        result = debugInfo.asComment(ctx)\n        break\n      case 'mediaquery':\n        result = debugInfo.asMediaQuery(ctx)\n        break\n      case 'all':\n        result =\n          debugInfo.asComment(ctx) +\n          (lineSeparator || '') +\n          debugInfo.asMediaQuery(ctx)\n        break\n    }\n  }\n  return result\n}\n\ndebugInfo.asComment = ctx =>\n  `/* line ${ctx.debugInfo.lineNumber}, ${ctx.debugInfo.fileName} */\\n`\n\ndebugInfo.asMediaQuery = ctx => {\n  let filenameWithProtocol = ctx.debugInfo.fileName\n  if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n    filenameWithProtocol = `file://${filenameWithProtocol}`\n  }\n  return `@media -sass-debug-info{filename{font-family:${filenameWithProtocol.replace(\n    /([.:\\/\\\\])/g,\n    a => {\n      if (a == '\\\\') {\n        a = '/'\n      }\n      return '\\\\' + a\n    }\n  )}}line{font-family:\\\\00003${ctx.debugInfo.lineNumber}}}\\n`\n}\n\nmodule.exports = debugInfo\n","const Node = require('./node')\nconst Rule = require('./rule')\nconst Selector = require('./selector')\nconst Element = require('./element')\nconst Paren = require('./paren')\nconst contexts = require('../contexts')\nconst globalFunctionRegistry = require('../functions/function-registry')\nconst defaultFunc = require('../functions/default')\nconst getDebugInfo = require('./debug-info')\n\nclass Ruleset extends Node {\n  constructor(selectors, rules, strictImports, visibilityInfo) {\n    super()\n    this.selectors = selectors\n    this.rules = rules\n    this._lookups = {}\n    this.strictImports = strictImports\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    if (this.paths) {\n      this.paths = visitor.visitArray(this.paths, true)\n    } else if (this.selectors) {\n      this.selectors = visitor.visitArray(this.selectors)\n    }\n    if (this.rules && this.rules.length) {\n      this.rules = visitor.visitArray(this.rules)\n    }\n  }\n\n  eval(context) {\n    const thisSelectors = this.selectors\n    let selectors\n    let selCnt\n    let selector\n    let i\n    let hasOnePassingSelector = false\n\n    if (thisSelectors && (selCnt = thisSelectors.length)) {\n      selectors = []\n      defaultFunc.error({\n        type: 'Syntax',\n        message: 'it is currently only allowed in parametric mixin guards,',\n      })\n      for (i = 0; i < selCnt; i++) {\n        selector = thisSelectors[i].eval(context)\n        selectors.push(selector)\n        if (selector.evaldCondition) {\n          hasOnePassingSelector = true\n        }\n      }\n      defaultFunc.reset()\n    } else {\n      hasOnePassingSelector = true\n    }\n\n    let rules = this.rules ? this.rules.slice(0) : null\n    const ruleset = new Ruleset(\n      selectors,\n      rules,\n      this.strictImports,\n      this.visibilityInfo()\n    )\n    let rule\n    let subRule\n\n    ruleset.originalRuleset = this\n    ruleset.root = this.root\n    ruleset.firstRoot = this.firstRoot\n    ruleset.allowImports = this.allowImports\n\n    if (this.debugInfo) {\n      ruleset.debugInfo = this.debugInfo\n    }\n\n    if (!hasOnePassingSelector) {\n      rules.length = 0\n    }\n\n    // inherit a function registry from the frames stack when possible;\n    // otherwise from the global registry\n    ruleset.functionRegistry = (frames => {\n      let i = 0\n      const n = frames.length\n      let found\n      for (; i !== n; ++i) {\n        found = frames[i].functionRegistry\n        if (found) {\n          return found\n        }\n      }\n      return globalFunctionRegistry\n    })(context.frames).inherit()\n\n    // push the current ruleset to the frames stack\n    const ctxFrames = context.frames\n    ctxFrames.unshift(ruleset)\n\n    // currrent selectors\n    let ctxSelectors = context.selectors\n    if (!ctxSelectors) {\n      context.selectors = ctxSelectors = []\n    }\n    ctxSelectors.unshift(this.selectors)\n\n    // Evaluate imports\n    if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n      ruleset.evalImports(context)\n    }\n\n    // Store the frames around mixin definitions,\n    // so they can be evaluated like closures when the time comes.\n    const rsRules = ruleset.rules\n\n    let rsRuleCnt = rsRules ? rsRules.length : 0\n    for (i = 0; i < rsRuleCnt; i++) {\n      if (rsRules[i].evalFirst) {\n        rsRules[i] = rsRules[i].eval(context)\n      }\n    }\n\n    const mediaBlockCount =\n      (context.mediaBlocks && context.mediaBlocks.length) || 0\n\n    // Evaluate mixin calls.\n    for (i = 0; i < rsRuleCnt; i++) {\n      if (rsRules[i].type === 'MixinCall') {\n        /*jshint loopfunc:true */\n        rules = rsRules[i].eval(context).filter(r => {\n          if (r instanceof Rule && r.variable) {\n            // do not pollute the scope if the variable is\n            // already there. consider returning false here\n            // but we need a way to \"return\" variable from mixins\n            return !ruleset.variable(r.name)\n          }\n          return true\n        })\n        rsRules.splice(...[i, 1].concat(rules))\n        rsRuleCnt += rules.length - 1\n        i += rules.length - 1\n        ruleset.resetCache()\n      } else if (rsRules[i].type === 'RulesetCall') {\n        /*jshint loopfunc:true */\n        rules = rsRules[i].eval(context).rules.filter(r => {\n          if (r instanceof Rule && r.variable) {\n            // do not pollute the scope at all\n            return false\n          }\n          return true\n        })\n        rsRules.splice(...[i, 1].concat(rules))\n        rsRuleCnt += rules.length - 1\n        i += rules.length - 1\n        ruleset.resetCache()\n      }\n    }\n\n    // Evaluate everything else\n    for (i = 0; i < rsRules.length; i++) {\n      rule = rsRules[i]\n      if (!rule.evalFirst) {\n        rsRules[i] = rule = rule.eval ? rule.eval(context) : rule\n      }\n    }\n\n    // Evaluate everything else\n    for (i = 0; i < rsRules.length; i++) {\n      rule = rsRules[i]\n      // for rulesets, check if it is a css guard and can be removed\n      if (\n        rule instanceof Ruleset &&\n        rule.selectors &&\n        rule.selectors.length === 1\n      ) {\n        // check if it can be folded in (e.g. & where)\n        if (rule.selectors[0].isJustParentSelector()) {\n          rsRules.splice(i--, 1)\n\n          for (let j = 0; j < rule.rules.length; j++) {\n            subRule = rule.rules[j]\n            subRule.copyVisibilityInfo(rule.visibilityInfo())\n            if (!(subRule instanceof Rule) || !subRule.variable) {\n              rsRules.splice(++i, 0, subRule)\n            }\n          }\n        }\n      }\n    }\n\n    // Pop the stack\n    ctxFrames.shift()\n    ctxSelectors.shift()\n\n    if (context.mediaBlocks) {\n      for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n        context.mediaBlocks[i].bubbleSelectors(selectors)\n      }\n    }\n\n    return ruleset\n  }\n\n  evalImports(context) {\n    const rules = this.rules\n    let i\n    let importRules\n    if (!rules) {\n      return\n    }\n\n    for (i = 0; i < rules.length; i++) {\n      if (rules[i].type === 'Import') {\n        importRules = rules[i].eval(context)\n        if (importRules && (importRules.length || importRules.length === 0)) {\n          rules.splice(...[i, 1].concat(importRules))\n          i += importRules.length - 1\n        } else {\n          rules.splice(i, 1, importRules)\n        }\n        this.resetCache()\n      }\n    }\n  }\n\n  makeImportant() {\n    const result = new Ruleset(\n      this.selectors,\n      this.rules.map(r => {\n        if (r.makeImportant) {\n          return r.makeImportant()\n        } else {\n          return r\n        }\n      }),\n      this.strictImports,\n      this.visibilityInfo()\n    )\n\n    return result\n  }\n\n  matchArgs(args) {\n    return !args || args.length === 0\n  }\n\n  // lets you call a css selector with a guard\n  matchCondition(args, context) {\n    const lastSelector = this.selectors[this.selectors.length - 1]\n    if (!lastSelector.evaldCondition) {\n      return false\n    }\n    if (\n      lastSelector.condition &&\n      !lastSelector.condition.eval(new contexts.Eval(context, context.frames))\n    ) {\n      return false\n    }\n    return true\n  }\n\n  resetCache() {\n    this._rulesets = null\n    this._variables = null\n    this._lookups = {}\n  }\n\n  variables() {\n    if (!this._variables) {\n      this._variables = !this.rules\n        ? {}\n        : this.rules.reduce((hash, r) => {\n            if (r instanceof Rule && r.variable === true) {\n              hash[r.name] = r\n            }\n            // when evaluating variables in an import statement, imports have not been eval'd\n            // so we need to go inside import statements.\n            // guard against root being a string (in the case of inlined less)\n            if (r.type === 'Import' && r.root && r.root.variables) {\n              const vars = r.root.variables()\n              for (const name in vars) {\n                if (vars.hasOwnProperty(name)) {\n                  hash[name] = vars[name]\n                }\n              }\n            }\n            return hash\n          }, {})\n    }\n    return this._variables\n  }\n\n  variable(name) {\n    return this.variables()[name]\n  }\n\n  rulesets() {\n    if (!this.rules) {\n      return []\n    }\n\n    const filtRules = []\n    const rules = this.rules\n    const cnt = rules.length\n    let i\n    let rule\n\n    for (i = 0; i < cnt; i++) {\n      rule = rules[i]\n      if (rule.isRuleset) {\n        filtRules.push(rule)\n      }\n    }\n\n    return filtRules\n  }\n\n  prependRule(rule) {\n    const rules = this.rules\n    if (rules) {\n      rules.unshift(rule)\n    } else {\n      this.rules = [rule]\n    }\n  }\n\n  find(selector, self = this, filter) {\n    const rules = []\n    let match\n    let foundMixins\n    const key = selector.toCSS()\n\n    if (key in this._lookups) {\n      return this._lookups[key]\n    }\n\n    this.rulesets().forEach(rule => {\n      if (rule !== self) {\n        for (let j = 0; j < rule.selectors.length; j++) {\n          match = selector.match(rule.selectors[j])\n          if (match) {\n            if (selector.elements.length > match) {\n              if (!filter || filter(rule)) {\n                foundMixins = rule.find(\n                  new Selector(selector.elements.slice(match)),\n                  self,\n                  filter\n                )\n                for (let i = 0; i < foundMixins.length; ++i) {\n                  foundMixins[i].path.push(rule)\n                }\n                Array.prototype.push.apply(rules, foundMixins)\n              }\n            } else {\n              rules.push({ rule, path: [] })\n            }\n            break\n          }\n        }\n      }\n    })\n    this._lookups[key] = rules\n    return rules\n  }\n\n  genCSS(context, output) {\n    let i\n    let j\n    const charsetRuleNodes = []\n    let ruleNodes = []\n\n    let // Line number debugging\n    debugInfo\n\n    let rule\n    let path\n\n    context.tabLevel = context.tabLevel || 0\n\n    if (!this.root) {\n      context.tabLevel++\n    }\n\n    const tabRuleStr = context.compress\n      ? ''\n      : Array(context.tabLevel + 1).join('  ')\n    const tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ')\n    let sep\n\n    function isRulesetLikeNode(rule) {\n      // if it has nested rules, then it should be treated like a ruleset\n      // medias and comments do not have nested rules, but should be treated like rulesets anyway\n      // some directives and anonymous nodes are ruleset like, others are not\n      if (typeof rule.isRulesetLike === 'boolean') {\n        return rule.isRulesetLike\n      } else if (typeof rule.isRulesetLike === 'function') {\n        return rule.isRulesetLike()\n      }\n\n      //anything else is assumed to be a rule\n      return false\n    }\n\n    let charsetNodeIndex = 0\n    let importNodeIndex = 0\n    for (i = 0; i < this.rules.length; i++) {\n      rule = this.rules[i]\n      if (rule.type === 'Comment') {\n        if (importNodeIndex === i) {\n          importNodeIndex++\n        }\n        ruleNodes.push(rule)\n      } else if (rule.isCharset && rule.isCharset()) {\n        ruleNodes.splice(charsetNodeIndex, 0, rule)\n        charsetNodeIndex++\n        importNodeIndex++\n      } else if (rule.type === 'Import') {\n        ruleNodes.splice(importNodeIndex, 0, rule)\n        importNodeIndex++\n      } else {\n        ruleNodes.push(rule)\n      }\n    }\n    ruleNodes = charsetRuleNodes.concat(ruleNodes)\n\n    // If this is the root node, we don't render\n    // a selector, or {}.\n    if (!this.root) {\n      debugInfo = getDebugInfo(context, this, tabSetStr)\n\n      if (debugInfo) {\n        output.add(debugInfo)\n        output.add(tabSetStr)\n      }\n\n      const paths = this.paths\n      const pathCnt = paths.length\n      let pathSubCnt\n\n      sep = context.compress ? ',' : `,\\n${tabSetStr}`\n\n      for (i = 0; i < pathCnt; i++) {\n        path = paths[i]\n        if (!(pathSubCnt = path.length)) {\n          continue\n        }\n        if (i > 0) {\n          output.add(sep)\n        }\n\n        context.firstSelector = true\n        path[0].genCSS(context, output)\n\n        context.firstSelector = false\n        for (j = 1; j < pathSubCnt; j++) {\n          path[j].genCSS(context, output)\n        }\n      }\n\n      output.add((context.compress ? '{' : ' {\\n') + tabRuleStr)\n    }\n\n    // Compile rules and rulesets\n    for (i = 0; i < ruleNodes.length; i++) {\n      rule = ruleNodes[i]\n\n      if (i + 1 === ruleNodes.length) {\n        context.lastRule = true\n      }\n\n      const currentLastRule = context.lastRule\n      if (isRulesetLikeNode(rule)) {\n        context.lastRule = false\n      }\n\n      if (rule.genCSS) {\n        rule.genCSS(context, output)\n      } else if (rule.value) {\n        output.add(rule.value.toString())\n      }\n\n      context.lastRule = currentLastRule\n\n      if (!context.lastRule) {\n        output.add(context.compress ? '' : `\\n${tabRuleStr}`)\n      } else {\n        context.lastRule = false\n      }\n    }\n\n    if (!this.root) {\n      output.add(context.compress ? '}' : `\\n${tabSetStr}}`)\n      context.tabLevel--\n    }\n\n    if (!output.isEmpty() && !context.compress && this.firstRoot) {\n      output.add('\\n')\n    }\n  }\n\n  joinSelectors(paths, context, selectors) {\n    for (let s = 0; s < selectors.length; s++) {\n      this.joinSelector(paths, context, selectors[s])\n    }\n  }\n\n  joinSelector(paths, context, selector) {\n    function createParenthesis(elementsToPak, originalElement) {\n      let replacementParen\n      let j\n      if (elementsToPak.length === 0) {\n        replacementParen = new Paren(elementsToPak[0])\n      } else {\n        const insideParent = []\n        for (j = 0; j < elementsToPak.length; j++) {\n          insideParent.push(\n            new Element(\n              null,\n              elementsToPak[j],\n              originalElement.index,\n              originalElement.currentFileInfo\n            )\n          )\n        }\n        replacementParen = new Paren(new Selector(insideParent))\n      }\n      return replacementParen\n    }\n\n    function createSelector(containedElement, originalElement) {\n      let element\n      let selector\n      element = new Element(\n        null,\n        containedElement,\n        originalElement.index,\n        originalElement.currentFileInfo\n      )\n      selector = new Selector([element])\n      return selector\n    }\n\n    // joins selector path from `beginningPath` with selector path in `addPath`\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns concatenated path\n    function addReplacementIntoPath(\n      beginningPath,\n      addPath,\n      replacedElement,\n      originalSelector\n    ) {\n      let newSelectorPath\n      let lastSelector\n      let newJoinedSelector\n      // our new selector path\n      newSelectorPath = []\n\n      //construct the joined selector - if & is the first thing this will be empty,\n      // if not newJoinedSelector will be the last set of elements in the selector\n      if (beginningPath.length > 0) {\n        newSelectorPath = beginningPath.slice(0)\n        lastSelector = newSelectorPath.pop()\n        newJoinedSelector = originalSelector.createDerived(\n          lastSelector.elements.slice(0)\n        )\n      } else {\n        newJoinedSelector = originalSelector.createDerived([])\n      }\n\n      if (addPath.length > 0) {\n        // /deep/ is a combinator that is valid without anything in front of it\n        // so if the & does not have a combinator that is \"\" or \" \" then\n        // and there is a combinator on the parent, then grab that.\n        // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n        let combinator = replacedElement.combinator\n\n        const parentEl = addPath[0].elements[0]\n        if (\n          combinator.emptyOrWhitespace &&\n          !parentEl.combinator.emptyOrWhitespace\n        ) {\n          combinator = parentEl.combinator\n        }\n        // join the elements so far with the first part of the parent\n        newJoinedSelector.elements.push(\n          new Element(\n            combinator,\n            parentEl.value,\n            replacedElement.index,\n            replacedElement.currentFileInfo\n          )\n        )\n        newJoinedSelector.elements = newJoinedSelector.elements.concat(\n          addPath[0].elements.slice(1)\n        )\n      }\n\n      // now add the joined selector - but only if it is not empty\n      if (newJoinedSelector.elements.length !== 0) {\n        newSelectorPath.push(newJoinedSelector)\n      }\n\n      //put together the parent selectors after the join (e.g. the rest of the parent)\n      if (addPath.length > 1) {\n        let restOfPath = addPath.slice(1)\n        restOfPath = restOfPath.map(selector =>\n          selector.createDerived(selector.elements, [])\n        )\n        newSelectorPath = newSelectorPath.concat(restOfPath)\n      }\n      return newSelectorPath\n    }\n\n    // joins selector path from `beginningPath` with every selector path in `addPaths` array\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns array with all concatenated paths\n    function addAllReplacementsIntoPath(\n      beginningPath,\n      addPaths,\n      replacedElement,\n      originalSelector,\n      result\n    ) {\n      let j\n      for (j = 0; j < beginningPath.length; j++) {\n        const newSelectorPath = addReplacementIntoPath(\n          beginningPath[j],\n          addPaths,\n          replacedElement,\n          originalSelector\n        )\n        result.push(newSelectorPath)\n      }\n      return result\n    }\n\n    function mergeElementsOnToSelectors(elements, selectors) {\n      let i\n      let sel\n\n      if (elements.length === 0) {\n        return\n      }\n      if (selectors.length === 0) {\n        selectors.push([new Selector(elements)])\n        return\n      }\n\n      for (i = 0; i < selectors.length; i++) {\n        sel = selectors[i]\n\n        // if the previous thing in sel is a parent this needs to join on to it\n        if (sel.length > 0) {\n          sel[sel.length - 1] = sel[sel.length - 1].createDerived(\n            sel[sel.length - 1].elements.concat(elements)\n          )\n        } else {\n          sel.push(new Selector(elements))\n        }\n      }\n    }\n\n    // replace all parent selectors inside `inSelector` by content of `context` array\n    // resulting selectors are returned inside `paths` array\n    // returns true if `inSelector` contained at least one parent selector\n    function replaceParentSelector(paths, context, inSelector) {\n      // The paths are [[Selector]]\n      // The first list is a list of comma separated selectors\n      // The inner list is a list of inheritance separated selectors\n      // e.g.\n      // .a, .b {\n      //   .c {\n      //   }\n      // }\n      // == [[.a] [.c]] [[.b] [.c]]\n      //\n      let i\n\n      let j\n      let k\n      let currentElements\n      let newSelectors\n      let selectorsMultiplied\n      let sel\n      let el\n      let hadParentSelector = false\n      let length\n      let lastSelector\n      function findNestedSelector(element) {\n        let maybeSelector\n        if (element.value.type !== 'Paren') {\n          return null\n        }\n\n        maybeSelector = element.value.value\n        if (maybeSelector.type !== 'Selector') {\n          return null\n        }\n\n        return maybeSelector\n      }\n\n      // the elements from the current selector so far\n      currentElements = []\n      // the current list of new selectors to add to the path.\n      // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n      // by the parents\n      newSelectors = [[]]\n\n      for (i = 0; i < inSelector.elements.length; i++) {\n        el = inSelector.elements[i]\n        // non parent reference elements just get added\n        if (el.value !== '&') {\n          const nestedSelector = findNestedSelector(el)\n          if (nestedSelector != null) {\n            // merge the current list of non parent selector elements\n            // on to the current list of selectors to add\n            mergeElementsOnToSelectors(currentElements, newSelectors)\n\n            const nestedPaths = []\n            let replaced\n            const replacedNewSelectors = []\n            replaced = replaceParentSelector(\n              nestedPaths,\n              context,\n              nestedSelector\n            )\n            hadParentSelector = hadParentSelector || replaced\n            //the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n            for (k = 0; k < nestedPaths.length; k++) {\n              const replacementSelector = createSelector(\n                createParenthesis(nestedPaths[k], el),\n                el\n              )\n              addAllReplacementsIntoPath(\n                newSelectors,\n                [replacementSelector],\n                el,\n                inSelector,\n                replacedNewSelectors\n              )\n            }\n            newSelectors = replacedNewSelectors\n            currentElements = []\n          } else {\n            currentElements.push(el)\n          }\n        } else {\n          hadParentSelector = true\n          // the new list of selectors to add\n          selectorsMultiplied = []\n\n          // merge the current list of non parent selector elements\n          // on to the current list of selectors to add\n          mergeElementsOnToSelectors(currentElements, newSelectors)\n\n          // loop through our current selectors\n          for (j = 0; j < newSelectors.length; j++) {\n            sel = newSelectors[j]\n            // if we don't have any parent paths, the & might be in a mixin so that it can be used\n            // whether there are parents or not\n            if (context.length === 0) {\n              // the combinator used on el should now be applied to the next element instead so that\n              // it is not lost\n              if (sel.length > 0) {\n                sel[0].elements.push(\n                  new Element(el.combinator, '', el.index, el.currentFileInfo)\n                )\n              }\n              selectorsMultiplied.push(sel)\n            } else {\n              // and the parent selectors\n              for (k = 0; k < context.length; k++) {\n                // We need to put the current selectors\n                // then join the last selector's elements on to the parents selectors\n                const newSelectorPath = addReplacementIntoPath(\n                  sel,\n                  context[k],\n                  el,\n                  inSelector\n                )\n                // add that to our new set of selectors\n                selectorsMultiplied.push(newSelectorPath)\n              }\n            }\n          }\n\n          // our new selectors has been multiplied, so reset the state\n          newSelectors = selectorsMultiplied\n          currentElements = []\n        }\n      }\n\n      // if we have any elements left over (e.g. .a& .b == .b)\n      // add them on to all the current selectors\n      mergeElementsOnToSelectors(currentElements, newSelectors)\n\n      for (i = 0; i < newSelectors.length; i++) {\n        length = newSelectors[i].length\n        if (length > 0) {\n          paths.push(newSelectors[i])\n          lastSelector = newSelectors[i][length - 1]\n          newSelectors[i][length - 1] = lastSelector.createDerived(\n            lastSelector.elements,\n            inSelector.extendList\n          )\n          //newSelectors[i][length - 1].copyVisibilityInfo(inSelector.visibilityInfo());\n        }\n      }\n\n      return hadParentSelector\n    }\n\n    function deriveSelector(visibilityInfo, deriveFrom) {\n      const newSelector = deriveFrom.createDerived(\n        deriveFrom.elements,\n        deriveFrom.extendList,\n        deriveFrom.evaldCondition\n      )\n      newSelector.copyVisibilityInfo(visibilityInfo)\n      return newSelector\n    }\n\n    // joinSelector code follows\n    let i\n\n    let newPaths\n    let hadParentSelector\n\n    newPaths = []\n    hadParentSelector = replaceParentSelector(newPaths, context, selector)\n\n    if (!hadParentSelector) {\n      if (context.length > 0) {\n        newPaths = []\n        for (i = 0; i < context.length; i++) {\n          //var concatenated = [];\n          //context[i].forEach(function(entry) {\n          //    var newEntry = entry.createDerived(entry.elements, entry.extendList, entry.evaldCondition);\n          //    newEntry.copyVisibilityInfo(selector.visibilityInfo());\n          //    concatenated.push(newEntry);\n          //}, this);\n          const concatenated = context[i].map(\n            deriveSelector.bind(this, selector.visibilityInfo())\n          )\n\n          concatenated.push(selector)\n          newPaths.push(concatenated)\n        }\n      } else {\n        newPaths = [[selector]]\n      }\n    }\n\n    for (i = 0; i < newPaths.length; i++) {\n      paths.push(newPaths[i])\n    }\n  }\n}\n\nRuleset.prototype.type = 'Ruleset'\nRuleset.prototype.isRuleset = true\nRuleset.prototype.isRulesetLike = true\nmodule.exports = Ruleset\n","const Node = require('./node')\nconst Selector = require('./selector')\nconst Ruleset = require('./ruleset')\n\nclass Directive extends Node {\n  constructor(\n    name,\n    value,\n    rules,\n    index,\n    currentFileInfo,\n    debugInfo,\n    isRooted,\n    visibilityInfo\n  ) {\n    super()\n    let i\n\n    this.name = name\n    this.value = value\n    if (rules) {\n      if (Array.isArray(rules)) {\n        this.rules = rules\n      } else {\n        this.rules = [rules]\n        this.rules[0].selectors = new Selector(\n          [],\n          null,\n          null,\n          this.index,\n          currentFileInfo\n        ).createEmptySelectors()\n      }\n      for (i = 0; i < this.rules.length; i++) {\n        this.rules[i].allowImports = true\n      }\n    }\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.debugInfo = debugInfo\n    this.isRooted = isRooted || false\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    const value = this.value\n    const rules = this.rules\n    if (rules) {\n      this.rules = visitor.visitArray(rules)\n    }\n    if (value) {\n      this.value = visitor.visit(value)\n    }\n  }\n\n  isRulesetLike() {\n    return this.rules || !this.isCharset()\n  }\n\n  isCharset() {\n    return '@charset' === this.name\n  }\n\n  genCSS(context, output) {\n    const value = this.value\n    const rules = this.rules\n    output.add(this.name, this.currentFileInfo, this.index)\n    if (value) {\n      output.add(' ')\n      value.genCSS(context, output)\n    }\n    if (rules) {\n      this.outputRuleset(context, output, rules)\n    } else {\n      output.add(';')\n    }\n  }\n\n  eval(context) {\n    let mediaPathBackup\n    let mediaBlocksBackup\n    let value = this.value\n    let rules = this.rules\n\n    //media stored inside other directive should not bubble over it\n    //backpup media bubbling information\n    mediaPathBackup = context.mediaPath\n    mediaBlocksBackup = context.mediaBlocks\n    //deleted media bubbling information\n    context.mediaPath = []\n    context.mediaBlocks = []\n\n    if (value) {\n      value = value.eval(context)\n    }\n    if (rules) {\n      // assuming that there is only one rule at this point - that is how parser constructs the rule\n      rules = [rules[0].eval(context)]\n      rules[0].root = true\n    }\n    //restore media bubbling information\n    context.mediaPath = mediaPathBackup\n    context.mediaBlocks = mediaBlocksBackup\n\n    return new Directive(\n      this.name,\n      value,\n      rules,\n      this.index,\n      this.currentFileInfo,\n      this.debugInfo,\n      this.isRooted,\n      this.visibilityInfo()\n    )\n  }\n\n  variable(name) {\n    if (this.rules) {\n      // assuming that there is only one rule at this point - that is how parser constructs the rule\n      return Ruleset.prototype.variable.call(this.rules[0], name)\n    }\n  }\n\n  find(...args) {\n    if (this.rules) {\n      // assuming that there is only one rule at this point - that is how parser constructs the rule\n      return Ruleset.prototype.find.apply(this.rules[0], args)\n    }\n  }\n\n  rulesets() {\n    if (this.rules) {\n      // assuming that there is only one rule at this point - that is how parser constructs the rule\n      return Ruleset.prototype.rulesets.apply(this.rules[0])\n    }\n  }\n\n  outputRuleset(context, output, rules) {\n    const ruleCnt = rules.length\n    let i\n    context.tabLevel = (context.tabLevel | 0) + 1\n\n    // Compressed\n    if (context.compress) {\n      output.add('{')\n      for (i = 0; i < ruleCnt; i++) {\n        rules[i].genCSS(context, output)\n      }\n      output.add('}')\n      context.tabLevel--\n      return\n    }\n\n    // Non-compressed\n    const tabSetStr = `\\n${Array(context.tabLevel).join('  ')}`\n\n    const tabRuleStr = `${tabSetStr}  `\n    if (!ruleCnt) {\n      output.add(` {${tabSetStr}}`)\n    } else {\n      output.add(` {${tabRuleStr}`)\n      rules[0].genCSS(context, output)\n      for (i = 1; i < ruleCnt; i++) {\n        output.add(tabRuleStr)\n        rules[i].genCSS(context, output)\n      }\n      output.add(`${tabSetStr}}`)\n    }\n\n    context.tabLevel--\n  }\n}\n\nDirective.prototype.type = 'Directive'\nmodule.exports = Directive\n","const Node = require('./node')\nconst contexts = require('../contexts')\n\nclass DetachedRuleset extends Node {\n  constructor(ruleset, frames) {\n    super()\n    this.ruleset = ruleset\n    this.frames = frames\n  }\n\n  accept(visitor) {\n    this.ruleset = visitor.visit(this.ruleset)\n  }\n\n  eval(context) {\n    const frames = this.frames || context.frames.slice(0)\n    return new DetachedRuleset(this.ruleset, frames)\n  }\n\n  callEval(context) {\n    return this.ruleset.eval(\n      this.frames\n        ? new contexts.Eval(context, this.frames.concat(context.frames))\n        : context\n    )\n  }\n}\n\nDetachedRuleset.prototype.type = 'DetachedRuleset'\nDetachedRuleset.prototype.evalFirst = true\nmodule.exports = DetachedRuleset\n","module.exports = {\n  length: {\n    m: 1,\n    cm: 0.01,\n    mm: 0.001,\n    in: 0.0254,\n    px: 0.0254 / 96,\n    pt: 0.0254 / 72,\n    pc: 0.0254 / 72 * 12,\n  },\n  duration: {\n    s: 1,\n    ms: 0.001,\n  },\n  angle: {\n    rad: 1 / (2 * Math.PI),\n    deg: 1 / 360,\n    grad: 1 / 400,\n    turn: 1,\n  },\n}\n","const Node = require('./node')\nconst unitConversions = require('../data/unit-conversions')\n\nclass Unit extends Node {\n  constructor(numerator, denominator, backupUnit) {\n    super()\n    this.numerator = numerator ? numerator.slice(0).sort() : []\n    this.denominator = denominator ? denominator.slice(0).sort() : []\n    if (backupUnit) {\n      this.backupUnit = backupUnit\n    } else if (numerator && numerator.length) {\n      this.backupUnit = numerator[0]\n    }\n  }\n\n  clone() {\n    return new Unit(\n      this.numerator.slice(0),\n      this.denominator.slice(0),\n      this.backupUnit\n    )\n  }\n\n  genCSS(context, output) {\n    // Dimension checks the unit is singular and throws an error if in strict math mode.\n    const strictUnits = context && context.strictUnits\n    if (this.numerator.length === 1) {\n      output.add(this.numerator[0]) // the ideal situation\n    } else if (!strictUnits && this.backupUnit) {\n      output.add(this.backupUnit)\n    } else if (!strictUnits && this.denominator.length) {\n      output.add(this.denominator[0])\n    }\n  }\n\n  toString() {\n    let i\n    let returnStr = this.numerator.join('*')\n    for (i = 0; i < this.denominator.length; i++) {\n      returnStr += `/${this.denominator[i]}`\n    }\n    return returnStr\n  }\n\n  compare(other) {\n    return this.is(other.toString()) ? 0 : undefined\n  }\n\n  is(unitString) {\n    return this.toString().toUpperCase() === unitString.toUpperCase()\n  }\n\n  isLength() {\n    return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/))\n  }\n\n  isEmpty() {\n    return this.numerator.length === 0 && this.denominator.length === 0\n  }\n\n  isSingular() {\n    return this.numerator.length <= 1 && this.denominator.length === 0\n  }\n\n  map(callback) {\n    let i\n\n    for (i = 0; i < this.numerator.length; i++) {\n      this.numerator[i] = callback(this.numerator[i], false)\n    }\n\n    for (i = 0; i < this.denominator.length; i++) {\n      this.denominator[i] = callback(this.denominator[i], true)\n    }\n  }\n\n  usedUnits() {\n    let group\n    const result = {}\n    let mapUnit\n    let groupName\n\n    mapUnit = atomicUnit => {\n      /*jshint loopfunc:true */\n      if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n        result[groupName] = atomicUnit\n      }\n\n      return atomicUnit\n    }\n\n    for (groupName in unitConversions) {\n      if (unitConversions.hasOwnProperty(groupName)) {\n        group = unitConversions[groupName]\n\n        this.map(mapUnit)\n      }\n    }\n\n    return result\n  }\n\n  cancel() {\n    const counter = {}\n    let atomicUnit\n    let i\n\n    for (i = 0; i < this.numerator.length; i++) {\n      atomicUnit = this.numerator[i]\n      counter[atomicUnit] = (counter[atomicUnit] || 0) + 1\n    }\n\n    for (i = 0; i < this.denominator.length; i++) {\n      atomicUnit = this.denominator[i]\n      counter[atomicUnit] = (counter[atomicUnit] || 0) - 1\n    }\n\n    this.numerator = []\n    this.denominator = []\n\n    for (atomicUnit in counter) {\n      if (counter.hasOwnProperty(atomicUnit)) {\n        const count = counter[atomicUnit]\n\n        if (count > 0) {\n          for (i = 0; i < count; i++) {\n            this.numerator.push(atomicUnit)\n          }\n        } else if (count < 0) {\n          for (i = 0; i < -count; i++) {\n            this.denominator.push(atomicUnit)\n          }\n        }\n      }\n    }\n\n    this.numerator.sort()\n    this.denominator.sort()\n  }\n}\n\nUnit.prototype.type = 'Unit'\nmodule.exports = Unit\n","const Node = require('./node')\nconst unitConversions = require('../data/unit-conversions')\nconst Unit = require('./unit')\nconst Color = require('./color')\n\n//\n// A number with a unit\n//\nclass Dimension extends Node {\n  constructor(value, unit) {\n    super()\n    this.value = parseFloat(value)\n    this.unit =\n      unit && unit instanceof Unit ? unit : new Unit(unit ? [unit] : undefined)\n  }\n\n  accept(visitor) {\n    this.unit = visitor.visit(this.unit)\n  }\n\n  eval(context) {\n    return this\n  }\n\n  toColor() {\n    return new Color([this.value, this.value, this.value])\n  }\n\n  genCSS(context, output) {\n    if (context && context.strictUnits && !this.unit.isSingular()) {\n      throw new Error(\n        `Multiple units in dimension. Correct the units or use the unit function. Bad unit: ${this.unit.toString()}`\n      )\n    }\n\n    const value = this.fround(context, this.value)\n    let strValue = String(value)\n\n    if (value !== 0 && value < 0.000001 && value > -0.000001) {\n      // would be output 1e-6 etc.\n      strValue = value.toFixed(20).replace(/0+$/, '')\n    }\n\n    if (context && context.compress) {\n      // Zero values doesn't need a unit\n      if (value === 0 && this.unit.isLength()) {\n        output.add(strValue)\n        return\n      }\n\n      // Float values doesn't need a leading zero\n      if (value > 0 && value < 1) {\n        strValue = strValue.substr(1)\n      }\n    }\n\n    output.add(strValue)\n    this.unit.genCSS(context, output)\n  }\n\n  // In an operation between two Dimensions,\n  // we default to the first Dimension's unit,\n  // so `1px + 2` will yield `3px`.\n  operate(context, op, other) {\n    /*jshint noempty:false */\n    let value = this._operate(context, op, this.value, other.value)\n\n    let unit = this.unit.clone()\n\n    if (op === '+' || op === '-') {\n      if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n        unit = other.unit.clone()\n        if (this.unit.backupUnit) {\n          unit.backupUnit = this.unit.backupUnit\n        }\n      } else if (\n        other.unit.numerator.length === 0 &&\n        unit.denominator.length === 0\n      ) {\n        // do nothing\n      } else {\n        other = other.convertTo(this.unit.usedUnits())\n\n        if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n          throw new Error(\n            `Incompatible units. Change the units or use the unit function. Bad units: '${unit.toString()}' and '${other.unit.toString()}'.`\n          )\n        }\n\n        value = this._operate(context, op, this.value, other.value)\n      }\n    } else if (op === '*') {\n      unit.numerator = unit.numerator.concat(other.unit.numerator).sort()\n      unit.denominator = unit.denominator.concat(other.unit.denominator).sort()\n      unit.cancel()\n    } else if (op === '/') {\n      unit.numerator = unit.numerator.concat(other.unit.denominator).sort()\n      unit.denominator = unit.denominator.concat(other.unit.numerator).sort()\n      unit.cancel()\n    }\n    return new Dimension(value, unit)\n  }\n\n  compare(other) {\n    let a\n    let b\n\n    if (!(other instanceof Dimension)) {\n      return undefined\n    }\n\n    if (this.unit.isEmpty() || other.unit.isEmpty()) {\n      a = this\n      b = other\n    } else {\n      a = this.unify()\n      b = other.unify()\n      if (a.unit.compare(b.unit) !== 0) {\n        return undefined\n      }\n    }\n\n    return Node.numericCompare(a.value, b.value)\n  }\n\n  unify() {\n    return this.convertTo({ length: 'px', duration: 's', angle: 'rad' })\n  }\n\n  convertTo(conversions) {\n    let value = this.value\n    const unit = this.unit.clone()\n    let i\n    let groupName\n    let group\n    let targetUnit\n    let derivedConversions = {}\n    let applyUnit\n\n    if (typeof conversions === 'string') {\n      for (i in unitConversions) {\n        if (unitConversions[i].hasOwnProperty(conversions)) {\n          derivedConversions = {}\n          derivedConversions[i] = conversions\n        }\n      }\n      conversions = derivedConversions\n    }\n    applyUnit = (atomicUnit, denominator) => {\n      /* jshint loopfunc:true */\n      if (group.hasOwnProperty(atomicUnit)) {\n        if (denominator) {\n          value = value / (group[atomicUnit] / group[targetUnit])\n        } else {\n          value = value * (group[atomicUnit] / group[targetUnit])\n        }\n\n        return targetUnit\n      }\n\n      return atomicUnit\n    }\n\n    for (groupName in conversions) {\n      if (conversions.hasOwnProperty(groupName)) {\n        targetUnit = conversions[groupName]\n        group = unitConversions[groupName]\n\n        unit.map(applyUnit)\n      }\n    }\n\n    unit.cancel()\n\n    return new Dimension(value, unit)\n  }\n}\n\nDimension.prototype.type = 'Dimension'\nmodule.exports = Dimension\n","const Node = require('./node')\nconst Color = require('./color')\nconst Dimension = require('./dimension')\nconst Paren = require('./paren')\n\nclass Operation extends Node {\n  constructor(op, operands, isSpaced, isRootVariable = false) {\n    super()\n    this.op = op.trim()\n    this.operands = operands\n    this.isSpaced = isSpaced\n    this.isRootVariable = isRootVariable\n  }\n\n  accept(visitor) {\n    this.operands = visitor.visit(this.operands)\n  }\n\n  eval(context) {\n    let a = this.operands[0].eval(context)\n    let b = this.operands[1].eval(context)\n    const isRootVariable = !!(a.isRootVariable || b.isRootVariable)\n    if (context.isMathOn() && !isRootVariable) {\n      if (a instanceof Dimension && b instanceof Color) {\n        a = a.toColor()\n      }\n      if (b instanceof Dimension && a instanceof Color) {\n        b = b.toColor()\n      }\n      if (!a.operate) {\n        if (context.simplify) {\n          return new Operation(this.op, [a, b], this.isSpaced, isRootVariable)\n        } else {\n          throw {\n            type: 'Operation',\n            message: 'Operation on an invalid type',\n          }\n        }\n      }\n\n      return a.operate(context, this.op, b)\n    } else {\n      const cloneOp = new Operation(\n        this.op,\n        [a, b],\n        this.isSpaced,\n        isRootVariable\n      )\n      if ((a.parensInOp && b.parensInOp) || context.isInParens()) {\n        return new Paren(cloneOp)\n      }\n      return cloneOp\n    }\n  }\n\n  genCSS(context, output) {\n    this.operands[0].genCSS(context, output)\n    if (this.isSpaced) {\n      output.add(' ')\n    }\n    output.add(this.op)\n    if (this.isSpaced) {\n      output.add(' ')\n    }\n    this.operands[1].genCSS(context, output)\n  }\n}\n\nOperation.prototype.type = 'Operation'\n\nmodule.exports = Operation\n","const Node = require('./node')\n\nclass Variable extends Node {\n  constructor(name, index, currentFileInfo) {\n    super()\n    this.name = name\n    this.index = index\n    this.currentFileInfo = currentFileInfo || {}\n  }\n\n  eval(context) {\n    let variable\n    let name = this.name\n\n    if (name.indexOf('@@') === 0) {\n      name = `@${new Variable(\n        name.slice(1),\n        this.index,\n        this.currentFileInfo\n      ).eval(context).value}`\n    }\n\n    if (this.evaluating) {\n      throw {\n        type: 'Name',\n        message: `Recursive variable definition for ${name}`,\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n\n    this.evaluating = true\n    const current = this\n    variable = this.find(context.frames, frame => {\n      const v = frame.variable(name)\n      if (v) {\n        if (v.important) {\n          const importantScope =\n            context.importantScope[context.importantScope.length - 1]\n          importantScope.important = v.important\n        }\n        if (\n          frame.root &&\n          context.simplify &&\n          (!context.simplifyFilter || context.simplifyFilter.test(name))\n        ) {\n          // Wrap root\n          current.isRootVariable = true\n\n          //Add genCSS and toCSS\n          current.genCSS = function(context, output) {\n            if (context && context.frames) {\n              //In eval context\n              output.add(this.toCSS(context))\n            } else {\n              output.add(this.name)\n            }\n          }.bind(current)\n\n          current.toCSS = function() {\n            return `@{${this.name.slice(1)}}`\n          }.bind(current)\n\n          return current //don't eval root variables in simple mode\n        }\n        return v.value.eval(context)\n      }\n    })\n    if (variable) {\n      this.evaluating = false\n      return variable\n    } else {\n      throw {\n        type: 'Name',\n        message: `variable ${name} is undefined`,\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n  }\n\n  find(obj, fun) {\n    for (let i = 0, r; i < obj.length; i++) {\n      r = fun.call(obj, obj[i])\n      if (r) {\n        return r\n      }\n    }\n    return null\n  }\n}\n\nVariable.prototype.type = 'Variable'\nmodule.exports = Variable\n","const Node = require('./node')\n\nclass Attribute extends Node {\n  constructor(key, op, value) {\n    super()\n    this.key = key\n    this.op = op\n    this.value = value\n  }\n\n  eval(context) {\n    return new Attribute(\n      this.key.eval ? this.key.eval(context) : this.key,\n      this.op,\n      this.value && this.value.eval ? this.value.eval(context) : this.value\n    )\n  }\n\n  genCSS(context, output) {\n    output.add(this.toCSS(context))\n  }\n\n  toCSS(context) {\n    let value = this.key.toCSS ? this.key.toCSS(context) : this.key\n\n    if (this.op) {\n      value += this.op\n      value += this.value.toCSS ? this.value.toCSS(context) : this.value\n    }\n\n    return `[${value}]`\n  }\n}\n\nAttribute.prototype.type = 'Attribute'\nmodule.exports = Attribute\n","const Node = require('./node')\nconst Variable = require('./variable')\n\nclass JsEvalNode extends Node {\n  evaluateJavaScript(expression, context) {\n    let result\n    const that = this\n    const evalContext = {}\n\n    if (context.javascriptEnabled !== undefined && !context.javascriptEnabled) {\n      throw {\n        message: 'You are using JavaScript, which has been disabled.',\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n\n    expression = expression.replace(/@\\{([\\w-]+)\\}/g, (_, name) =>\n      that.jsify(\n        new Variable(`@${name}`, that.index, that.currentFileInfo).eval(context)\n      )\n    )\n\n    try {\n      expression = new Function(`return (${expression})`)\n    } catch (e) {\n      throw {\n        message: `JavaScript evaluation error: ${e.message} from \\`${expression}\\``,\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n\n    const variables = context.frames[0].variables()\n    for (const k in variables) {\n      if (variables.hasOwnProperty(k)) {\n        /*jshint loopfunc:true */\n        evalContext[k.slice(1)] = {\n          value: variables[k].value,\n          toJS() {\n            return this.value.eval(context).toCSS()\n          },\n        }\n      }\n    }\n\n    try {\n      result = expression.call(evalContext)\n    } catch (e) {\n      throw {\n        message: `JavaScript evaluation error: '${e.name}: ${e.message.replace(\n          /[\"]/g,\n          \"'\"\n        )}'`,\n        filename: this.currentFileInfo.filename,\n        index: this.index,\n      }\n    }\n    return result\n  }\n\n  jsify(obj) {\n    if (Array.isArray(obj.value) && obj.value.length > 1) {\n      return `[${obj.value.map(v => v.toCSS()).join(', ')}]`\n    } else {\n      return obj.toCSS()\n    }\n  }\n}\n\nmodule.exports = JsEvalNode\n","const Node = require('./node')\nconst JsEvalNode = require('./js-eval-node')\nconst Variable = require('./variable')\n\nclass Quoted extends JsEvalNode {\n  constructor(str, content, escaped, index, currentFileInfo) {\n    super()\n    this.escaped = escaped == null ? true : escaped\n    this.value = content || ''\n    this.quote = str.charAt(0)\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n  }\n\n  genCSS(context, output) {\n    if (!this.escaped) {\n      output.add(this.quote, this.currentFileInfo, this.index)\n    }\n    output.add(this.value)\n    if (!this.escaped) {\n      output.add(this.quote)\n    }\n  }\n\n  containsVariables() {\n    return this.value.match(/(`([^`]+)`)|@\\{([\\w-]+)\\}/)\n  }\n\n  eval(context) {\n    const that = this\n    let value = this.value\n    const javascriptReplacement = (_, exp) =>\n      String(that.evaluateJavaScript(exp, context))\n    const interpolationReplacement = (_, name) => {\n      const v = new Variable(`@${name}`, that.index, that.currentFileInfo).eval(\n        context,\n        true\n      )\n      return v instanceof Quoted ? v.value : v.toCSS()\n    }\n    function iterativeReplace(value, regexp, replacementFnc) {\n      let evaluatedValue = value\n      do {\n        value = evaluatedValue\n        evaluatedValue = value.replace(regexp, replacementFnc)\n      } while (value !== evaluatedValue)\n      return evaluatedValue\n    }\n    value = iterativeReplace(value, /`([^`]+)`/g, javascriptReplacement)\n    value = iterativeReplace(value, /@\\{([\\w-]+)\\}/g, interpolationReplacement)\n    return new Quoted(\n      this.quote + value + this.quote,\n      value,\n      this.escaped,\n      this.index,\n      this.currentFileInfo\n    )\n  }\n\n  compare(other) {\n    // when comparing quoted strings allow the quote to differ\n    if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n      return Node.numericCompare(this.value, other.value)\n    } else {\n      return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined\n    }\n  }\n}\n\nQuoted.prototype.type = 'Quoted'\nmodule.exports = Quoted\n","const Node = require('./node')\nconst getDebugInfo = require('./debug-info')\n\nclass Comment extends Node {\n  constructor(value, isLineComment, index, currentFileInfo) {\n    super()\n    this.value = value\n    this.isLineComment = isLineComment\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.allowRoot = true\n  }\n\n  genCSS(context, output) {\n    if (this.debugInfo) {\n      output.add(getDebugInfo(context, this), this.currentFileInfo, this.index)\n    }\n    output.add(this.value)\n  }\n\n  isSilent(context) {\n    const isCompressed = context.compress && this.value[2] !== '!'\n    return this.isLineComment || isCompressed\n  }\n}\n\nComment.prototype.type = 'Comment'\nmodule.exports = Comment\n","const Node = require('./node')\nconst Paren = require('./paren')\nconst Comment = require('./comment')\n\nclass Expression extends Node {\n  constructor(value) {\n    super()\n    this.value = value\n    if (!value) {\n      throw new Error('Expression requires an array parameter')\n    }\n  }\n\n  accept(visitor) {\n    this.value = visitor.visitArray(this.value)\n  }\n\n  eval(context) {\n    let returnValue\n    const inParenthesis = this.parens && !this.parensInOp\n    let doubleParen = false\n    if (inParenthesis) {\n      context.inParenthesis()\n    }\n    if (this.value.length > 1) {\n      returnValue = new Expression(this.value.map(e => e.eval(context)))\n    } else if (this.value.length === 1) {\n      if (this.value[0].parens && !this.value[0].parensInOp) {\n        doubleParen = true\n      }\n      returnValue = this.value[0].eval(context)\n    } else {\n      returnValue = this\n    }\n    if (inParenthesis) {\n      context.outOfParenthesis()\n    }\n    if (this.parens && this.parensInOp && !context.isMathOn() && !doubleParen) {\n      returnValue = new Paren(returnValue)\n    }\n    return returnValue\n  }\n\n  genCSS(context, output) {\n    for (let i = 0; i < this.value.length; i++) {\n      this.value[i].genCSS(context, output)\n      if (i + 1 < this.value.length) {\n        output.add(' ')\n      }\n    }\n  }\n\n  throwAwayComments() {\n    this.value = this.value.filter(v => !(v instanceof Comment))\n  }\n}\n\nExpression.prototype.type = 'Expression'\nmodule.exports = Expression\n","const Expression = require('../tree/expression')\n\nclass functionCaller {\n  constructor(name, context, index, currentFileInfo) {\n    this.name = name.toLowerCase()\n    this.index = index\n    this.context = context\n    this.currentFileInfo = currentFileInfo\n\n    this.func = context.frames[0].functionRegistry.get(this.name)\n  }\n\n  isValid() {\n    return Boolean(this.func)\n  }\n\n  call(args) {\n    // This code is terrible and should be replaced as per this issue...\n    // https://github.com/less/less.js/issues/2477\n    if (Array.isArray(args)) {\n      args = args\n        .filter(item => {\n          if (item.type === 'Comment') {\n            return false\n          }\n          return true\n        })\n        .map(item => {\n          if (item.type === 'Expression') {\n            const subNodes = item.value.filter(item => {\n              if (item.type === 'Comment') {\n                return false\n              }\n              return true\n            })\n            if (subNodes.length === 1) {\n              return subNodes[0]\n            } else {\n              return new Expression(subNodes)\n            }\n          }\n          return item\n        })\n    }\n\n    return this.func(...args)\n  }\n}\n\nmodule.exports = functionCaller\n","const Node = require('./node')\nconst FunctionCaller = require('../functions/function-caller')\n\n//\n// A function call node.\n//\nclass Call extends Node {\n  constructor(name, args, index, currentFileInfo) {\n    super()\n    this.name = name\n    this.args = args\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n  }\n\n  accept(visitor) {\n    if (this.args) {\n      this.args = visitor.visitArray(this.args)\n    }\n  }\n\n  //\n  // When evaluating a function call,\n  // we either find the function in the functionRegistry,\n  // in which case we call it, passing the  evaluated arguments,\n  // if this returns null or we cannot find the function, we\n  // simply print it out as it appeared originally [2].\n  //\n  // The reason why we evaluate the arguments, is in the case where\n  // we try to pass a variable to a function, like: `saturate(@color)`.\n  // The function should receive the value, not the variable.\n  //\n  eval(context) {\n    const args = this.args.map(a => a.eval(context))\n    let result\n    const funcCaller = new FunctionCaller(\n      this.name,\n      context,\n      this.index,\n      this.currentFileInfo\n    )\n    //Check if any of root vars take place\n    for (const arg of args) {\n      if (arg.isRootVariable)\n        return new Call(this.name, args, this.index, this.currentFileInfo)\n    }\n\n    if (funcCaller.isValid()) {\n      try {\n        result = funcCaller.call(args)\n      } catch (e) {\n        throw {\n          type: e.type || 'Runtime',\n          message: `error evaluating function \\`${this.name}\\`${e.message\n            ? ': ' + e.message\n            : ''}`,\n          index: this.index,\n          filename: this.currentFileInfo.filename,\n        }\n      }\n\n      if (result != null) {\n        result.index = this.index\n        result.currentFileInfo = this.currentFileInfo\n        return result\n      }\n    }\n\n    return new Call(this.name, args, this.index, this.currentFileInfo)\n  }\n\n  genCSS(context, output) {\n    output.add(`${this.name}(`, this.currentFileInfo, this.index)\n\n    for (let i = 0; i < this.args.length; i++) {\n      this.args[i].genCSS(context, output)\n      if (i + 1 < this.args.length) {\n        output.add(', ')\n      }\n    }\n\n    output.add(')')\n  }\n}\n\nCall.prototype.type = 'Call'\nmodule.exports = Call\n","const Node = require('./node')\n\nclass URL extends Node {\n  constructor(val, index, currentFileInfo, isEvald) {\n    super()\n    this.value = val\n    this.currentFileInfo = currentFileInfo\n    this.index = index\n    this.isEvald = isEvald\n  }\n\n  accept(visitor) {\n    this.value = visitor.visit(this.value)\n  }\n\n  genCSS(context, output) {\n    output.add('url(')\n    this.value.genCSS(context, output)\n    output.add(')')\n  }\n\n  eval(context) {\n    const val = this.value.eval(context)\n    let rootpath\n\n    if (!this.isEvald) {\n      // Add the base path if the URL is relative\n      rootpath = this.currentFileInfo && this.currentFileInfo.rootpath\n      if (\n        rootpath &&\n        typeof val.value === 'string' &&\n        context.isPathRelative(val.value)\n      ) {\n        if (!val.quote) {\n          rootpath = rootpath.replace(/[\\(\\)'\"\\s]/g, match => `\\\\${match}`)\n        }\n        val.value = rootpath + val.value\n      }\n\n      val.value = context.normalizePath(val.value)\n\n      // Add url args if enabled\n      if (context.urlArgs) {\n        if (!val.value.match(/^\\s*data:/)) {\n          const delimiter = val.value.indexOf('?') === -1 ? '?' : '&'\n          const urlArgs = delimiter + context.urlArgs\n          if (val.value.indexOf('#') !== -1) {\n            val.value = val.value.replace('#', `${urlArgs}#`)\n          } else {\n            val.value += urlArgs\n          }\n        }\n      }\n    }\n\n    return new URL(val, this.index, this.currentFileInfo, true)\n  }\n}\n\nURL.prototype.type = 'Url'\nmodule.exports = URL\n","const Node = require('./node')\n\nclass Anonymous extends Node {\n  constructor(\n    value,\n    index,\n    currentFileInfo,\n    mapLines,\n    rulesetLike,\n    visibilityInfo\n  ) {\n    super()\n    this.value = value\n    this.index = index\n    this.mapLines = mapLines\n    this.currentFileInfo = currentFileInfo\n    this.rulesetLike = typeof rulesetLike === 'undefined' ? false : rulesetLike\n    this.allowRoot = true\n    this.copyVisibilityInfo(visibilityInfo)\n  }\n\n  eval() {\n    return new Anonymous(\n      this.value,\n      this.index,\n      this.currentFileInfo,\n      this.mapLines,\n      this.rulesetLike,\n      this.visibilityInfo()\n    )\n  }\n\n  compare(other) {\n    return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined\n  }\n\n  isRulesetLike() {\n    return this.rulesetLike\n  }\n\n  genCSS(context, output) {\n    output.add(this.value, this.currentFileInfo, this.index, this.mapLines)\n  }\n}\n\nAnonymous.prototype.type = 'Anonymous'\nmodule.exports = Anonymous\n","const Ruleset = require('./ruleset')\nconst Value = require('./value')\nconst Selector = require('./selector')\nconst Anonymous = require('./anonymous')\nconst Expression = require('./expression')\nconst Directive = require('./directive')\n\nclass Media extends Directive {\n  constructor(value, features, index, currentFileInfo, visibilityInfo) {\n    super()\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n\n    const selectors = new Selector(\n      [],\n      null,\n      null,\n      this.index,\n      this.currentFileInfo\n    ).createEmptySelectors()\n\n    this.features = new Value(features)\n    this.rules = [new Ruleset(selectors, value)]\n    this.rules[0].allowImports = true\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    if (this.features) {\n      this.features = visitor.visit(this.features)\n    }\n    if (this.rules) {\n      this.rules = visitor.visitArray(this.rules)\n    }\n  }\n\n  genCSS(context, output) {\n    output.add('@media ', this.currentFileInfo, this.index)\n    this.features.genCSS(context, output)\n    this.outputRuleset(context, output, this.rules)\n  }\n\n  eval(context) {\n    if (!context.mediaBlocks) {\n      context.mediaBlocks = []\n      context.mediaPath = []\n    }\n\n    const media = new Media(\n      null,\n      [],\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n    if (this.debugInfo) {\n      this.rules[0].debugInfo = this.debugInfo\n      media.debugInfo = this.debugInfo\n    }\n    let strictMathBypass = false\n    if (!context.strictMath) {\n      strictMathBypass = true\n      context.strictMath = true\n    }\n    try {\n      media.features = this.features.eval(context)\n    } finally {\n      if (strictMathBypass) {\n        context.strictMath = false\n      }\n    }\n\n    context.mediaPath.push(media)\n    context.mediaBlocks.push(media)\n\n    this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit()\n    context.frames.unshift(this.rules[0])\n    media.rules = [this.rules[0].eval(context)]\n    context.frames.shift()\n\n    context.mediaPath.pop()\n\n    return context.mediaPath.length === 0\n      ? media.evalTop(context)\n      : media.evalNested(context)\n  }\n\n  evalTop(context) {\n    let result = this\n\n    // Render all dependent Media blocks.\n    if (context.mediaBlocks.length > 1) {\n      const selectors = new Selector(\n        [],\n        null,\n        null,\n        this.index,\n        this.currentFileInfo\n      ).createEmptySelectors()\n      result = new Ruleset(selectors, context.mediaBlocks)\n      result.multiMedia = true\n      result.copyVisibilityInfo(this.visibilityInfo())\n    }\n\n    delete context.mediaBlocks\n    delete context.mediaPath\n\n    return result\n  }\n\n  evalNested(context) {\n    let i\n    let value\n    const path = context.mediaPath.concat([this])\n\n    // Extract the media-query conditions separated with `,` (OR).\n    for (i = 0; i < path.length; i++) {\n      value =\n        path[i].features instanceof Value\n          ? path[i].features.value\n          : path[i].features\n      path[i] = Array.isArray(value) ? value : [value]\n    }\n\n    // Trace all permutations to generate the resulting media-query.\n    //\n    // (a, b and c) with nested (d, e) ->\n    //    a and d\n    //    a and e\n    //    b and c and d\n    //    b and c and e\n    this.features = new Value(\n      this.permute(path).map(path => {\n        path = path.map(\n          fragment => (fragment.toCSS ? fragment : new Anonymous(fragment))\n        )\n\n        for (i = path.length - 1; i > 0; i--) {\n          path.splice(i, 0, new Anonymous('and'))\n        }\n\n        return new Expression(path)\n      })\n    )\n\n    // Fake a tree-node that doesn't output anything.\n    return new Ruleset([], [])\n  }\n\n  permute(arr) {\n    if (arr.length === 0) {\n      return []\n    } else if (arr.length === 1) {\n      return arr[0]\n    } else {\n      const result = []\n      const rest = this.permute(arr.slice(1))\n      for (let i = 0; i < rest.length; i++) {\n        for (let j = 0; j < arr[0].length; j++) {\n          result.push([arr[0][j]].concat(rest[i]))\n        }\n      }\n      return result\n    }\n  }\n\n  bubbleSelectors(selectors) {\n    if (!selectors) {\n      return\n    }\n    this.rules = [new Ruleset(selectors.slice(0), [this.rules[0]])]\n  }\n}\n\nMedia.prototype.type = 'Media'\nMedia.prototype.isRulesetLike = true\nmodule.exports = Media\n","const Node = require('./node')\nconst Media = require('./media')\nconst URL = require('./url')\nconst Quoted = require('./quoted')\nconst Ruleset = require('./ruleset')\nconst Anonymous = require('./anonymous')\n\n//\n// CSS @import node\n//\n// The general strategy here is that we don't want to wait\n// for the parsing to be completed, before we start importing\n// the file. That's because in the context of a browser,\n// most of the time will be spent waiting for the server to respond.\n//\n// On creation, we push the import path to our import queue, though\n// `import,push`, we also pass it a callback, which it'll call once\n// the file has been fetched, and parsed.\n//\nclass Import extends Node {\n  constructor(path, features, options, index, currentFileInfo, visibilityInfo) {\n    super()\n    this.options = options\n    this.index = index\n    this.path = path\n    this.features = features\n    this.currentFileInfo = currentFileInfo\n    this.allowRoot = true\n\n    if (this.options.less !== undefined || this.options.inline) {\n      this.css = !this.options.less || this.options.inline\n    } else {\n      const pathValue = this.getPath()\n      if (pathValue && /[#\\.\\&\\?\\/]css([\\?;].*)?$/.test(pathValue)) {\n        this.css = true\n      }\n    }\n    this.copyVisibilityInfo(visibilityInfo)\n  }\n\n  accept(visitor) {\n    if (this.features) {\n      this.features = visitor.visit(this.features)\n    }\n    this.path = visitor.visit(this.path)\n    if (!this.options.plugin && !this.options.inline && this.root) {\n      this.root = visitor.visit(this.root)\n    }\n  }\n\n  genCSS(context, output) {\n    if (this.css && this.path.currentFileInfo.reference === undefined) {\n      output.add('@import ', this.currentFileInfo, this.index)\n      this.path.genCSS(context, output)\n      if (this.features) {\n        output.add(' ')\n        this.features.genCSS(context, output)\n      }\n      output.add(';')\n    }\n  }\n\n  getPath() {\n    return this.path instanceof URL ? this.path.value.value : this.path.value\n  }\n\n  isVariableImport() {\n    let path = this.path\n    if (path instanceof URL) {\n      path = path.value\n    }\n    if (path instanceof Quoted) {\n      return path.containsVariables()\n    }\n\n    return true\n  }\n\n  evalForImport(context) {\n    let path = this.path\n\n    if (path instanceof URL) {\n      path = path.value\n    }\n\n    return new Import(\n      path.eval(context),\n      this.features,\n      this.options,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  evalPath(context) {\n    const path = this.path.eval(context)\n    const rootpath = this.currentFileInfo && this.currentFileInfo.rootpath\n\n    if (!(path instanceof URL)) {\n      if (rootpath) {\n        const pathValue = path.value\n        // Add the base path if the import is relative\n        if (pathValue && context.isPathRelative(pathValue)) {\n          path.value = rootpath + pathValue\n        }\n      }\n      path.value = context.normalizePath(path.value)\n    }\n\n    return path\n  }\n\n  eval(context) {\n    const result = this.doEval(context)\n    if (this.options.reference || this.blocksVisibility()) {\n      if (result.length || result.length === 0) {\n        result.forEach(node => {\n          node.addVisibilityBlock()\n        })\n      } else {\n        result.addVisibilityBlock()\n      }\n    }\n    return result\n  }\n\n  doEval(context) {\n    let ruleset\n    let registry\n    const features = this.features && this.features.eval(context)\n\n    if (this.options.plugin) {\n      registry = context.frames[0] && context.frames[0].functionRegistry\n      if (registry && this.root && this.root.functions) {\n        registry.addMultiple(this.root.functions)\n      }\n      return []\n    }\n\n    if (this.skip) {\n      if (typeof this.skip === 'function') {\n        this.skip = this.skip()\n      }\n      if (this.skip) {\n        return []\n      }\n    }\n    if (this.options.inline) {\n      const contents = new Anonymous(\n        this.root,\n        0,\n        {\n          filename: this.importedFilename,\n          reference:\n            this.path.currentFileInfo && this.path.currentFileInfo.reference,\n        },\n        true,\n        true\n      )\n\n      return this.features\n        ? new Media([contents], this.features.value)\n        : [contents]\n    } else if (this.css) {\n      const newImport = new Import(\n        this.evalPath(context),\n        features,\n        this.options,\n        this.index\n      )\n      if (!newImport.css && this.error) {\n        throw this.error\n      }\n      return newImport\n    } else {\n      ruleset = new Ruleset(null, this.root.rules.slice(0))\n      ruleset.evalImports(context)\n\n      return this.features\n        ? new Media(ruleset.rules, this.features.value)\n        : ruleset.rules\n    }\n  }\n}\n\nImport.prototype.type = 'Import'\nmodule.exports = Import\n","const Selector = require('./selector')\nconst Element = require('./element')\nconst Ruleset = require('./ruleset')\nconst Rule = require('./rule')\nconst Expression = require('./expression')\nconst contexts = require('../contexts')\n\nclass Definition extends Ruleset {\n  constructor(\n    name,\n    params,\n    rules,\n    condition,\n    variadic,\n    frames,\n    visibilityInfo\n  ) {\n    super()\n    this.name = name\n    this.selectors = [\n      new Selector([new Element(null, name, this.index, this.currentFileInfo)]),\n    ]\n    this.params = params\n    this.condition = condition\n    this.variadic = variadic\n    this.arity = params.length\n    this.rules = rules\n    this._lookups = {}\n    const optionalParameters = []\n    this.required = params.reduce((count, p) => {\n      if (!p.name || (p.name && !p.value)) {\n        return count + 1\n      } else {\n        optionalParameters.push(p.name)\n        return count\n      }\n    }, 0)\n    this.optionalParameters = optionalParameters\n    this.frames = frames\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    if (this.params && this.params.length) {\n      this.params = visitor.visitArray(this.params)\n    }\n    this.rules = visitor.visitArray(this.rules)\n    if (this.condition) {\n      this.condition = visitor.visit(this.condition)\n    }\n  }\n\n  evalParams(context, mixinEnv, args, evaldArguments) {\n    /*jshint boss:true */\n    const frame = new Ruleset(null, null)\n\n    let varargs\n    let arg\n    const params = this.params.slice(0)\n    let i\n    let j\n    let val\n    let name\n    let isNamedFound\n    let argIndex\n    let argsLength = 0\n\n    if (\n      mixinEnv.frames &&\n      mixinEnv.frames[0] &&\n      mixinEnv.frames[0].functionRegistry\n    ) {\n      frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit()\n    }\n    mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames))\n\n    if (args) {\n      args = args.slice(0)\n      argsLength = args.length\n\n      for (i = 0; i < argsLength; i++) {\n        arg = args[i]\n        if ((name = arg && arg.name)) {\n          isNamedFound = false\n          for (j = 0; j < params.length; j++) {\n            if (!evaldArguments[j] && name === params[j].name) {\n              evaldArguments[j] = arg.value.eval(context)\n              frame.prependRule(new Rule(name, arg.value.eval(context)))\n              isNamedFound = true\n              break\n            }\n          }\n          if (isNamedFound) {\n            args.splice(i, 1)\n            i--\n            continue\n          } else {\n            throw {\n              type: 'Runtime',\n              message: `Named argument for ${this.name} ${args[i]\n                .name} not found`,\n            }\n          }\n        }\n      }\n    }\n    argIndex = 0\n    for (i = 0; i < params.length; i++) {\n      if (evaldArguments[i]) {\n        continue\n      }\n\n      arg = args && args[argIndex]\n\n      if ((name = params[i].name)) {\n        if (params[i].variadic) {\n          varargs = []\n          for (j = argIndex; j < argsLength; j++) {\n            varargs.push(args[j].value.eval(context))\n          }\n          frame.prependRule(\n            new Rule(name, new Expression(varargs).eval(context))\n          )\n        } else {\n          val = arg && arg.value\n          if (val) {\n            val = val.eval(context)\n          } else if (params[i].value) {\n            val = params[i].value.eval(mixinEnv)\n            frame.resetCache()\n          } else {\n            throw {\n              type: 'Runtime',\n              message: `wrong number of arguments for ${this\n                .name} (${argsLength} for ${this.arity})`,\n            }\n          }\n\n          frame.prependRule(new Rule(name, val))\n          evaldArguments[i] = val\n        }\n      }\n\n      if (params[i].variadic && args) {\n        for (j = argIndex; j < argsLength; j++) {\n          evaldArguments[j] = args[j].value.eval(context)\n        }\n      }\n      argIndex++\n    }\n\n    return frame\n  }\n\n  makeImportant() {\n    const rules = !this.rules\n      ? this.rules\n      : this.rules.map(r => {\n          if (r.makeImportant) {\n            return r.makeImportant(true)\n          } else {\n            return r\n          }\n        })\n    const result = new Definition(\n      this.name,\n      this.params,\n      rules,\n      this.condition,\n      this.variadic,\n      this.frames\n    )\n    return result\n  }\n\n  eval(context) {\n    return new Definition(\n      this.name,\n      this.params,\n      this.rules,\n      this.condition,\n      this.variadic,\n      this.frames || context.frames.slice(0)\n    )\n  }\n\n  evalCall(context, args, important) {\n    const _arguments = []\n    const mixinFrames = this.frames\n      ? this.frames.concat(context.frames)\n      : context.frames\n    const frame = this.evalParams(\n      context,\n      new contexts.Eval(context, mixinFrames),\n      args,\n      _arguments\n    )\n    let rules\n    let ruleset\n\n    frame.prependRule(\n      new Rule('@arguments', new Expression(_arguments).eval(context))\n    )\n\n    rules = this.rules.slice(0)\n\n    ruleset = new Ruleset(null, rules)\n    ruleset.originalRuleset = this\n    ruleset = ruleset.eval(\n      new contexts.Eval(context, [this, frame].concat(mixinFrames))\n    )\n    if (important) {\n      ruleset = ruleset.makeImportant()\n    }\n    return ruleset\n  }\n\n  matchCondition(args, context) {\n    if (\n      this.condition &&\n      !this.condition.eval(\n        new contexts.Eval(\n          context,\n          [\n            this.evalParams(\n              context /* the parameter variables*/,\n              new contexts.Eval(\n                context,\n                this.frames\n                  ? this.frames.concat(context.frames)\n                  : context.frames\n              ),\n              args,\n              []\n            ),\n          ]\n            .concat(this.frames || []) // the parent namespace/mixin frames\n            .concat(context.frames)\n        )\n      )\n    ) {\n      // the current environment frames\n      return false\n    }\n    return true\n  }\n\n  matchArgs(args, context) {\n    const allArgsCnt = (args && args.length) || 0\n    let len\n    const optionalParameters = this.optionalParameters\n    const requiredArgsCnt = !args\n      ? 0\n      : args.reduce((count, p) => {\n          if (optionalParameters.indexOf(p.name) < 0) {\n            return count + 1\n          } else {\n            return count\n          }\n        }, 0)\n\n    if (!this.variadic) {\n      if (requiredArgsCnt < this.required) {\n        return false\n      }\n      if (allArgsCnt > this.params.length) {\n        return false\n      }\n    } else {\n      if (requiredArgsCnt < this.required - 1) {\n        return false\n      }\n    }\n\n    // check patterns\n    len = Math.min(requiredArgsCnt, this.arity)\n\n    for (let i = 0; i < len; i++) {\n      if (!this.params[i].name && !this.params[i].variadic) {\n        if (\n          args[i].value.eval(context).toCSS() !=\n          this.params[i].value.eval(context).toCSS()\n        ) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n}\n\nDefinition.prototype.type = 'MixinDefinition'\nDefinition.prototype.evalFirst = true\nmodule.exports = Definition\n","const Node = require('./node')\nconst Selector = require('./selector')\nconst MixinDefinition = require('./mixin-definition')\nconst defaultFunc = require('../functions/default')\n\nclass MixinCall extends Node {\n  constructor(elements, args, index, currentFileInfo, important) {\n    super()\n    this.selector = new Selector(elements)\n    this.arguments = args || []\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n    this.important = important\n    this.allowRoot = true\n  }\n\n  accept(visitor) {\n    if (this.selector) {\n      this.selector = visitor.visit(this.selector)\n    }\n    if (this.arguments.length) {\n      this.arguments = visitor.visitArray(this.arguments)\n    }\n  }\n\n  eval(context) {\n    let mixins\n    let mixin\n    let mixinPath\n    const args = []\n    let arg\n    let argValue\n    const rules = []\n    let match = false\n    let i\n    let m\n    let f\n    let isRecursive\n    let isOneFound\n    const candidates = []\n    let candidate\n    const conditionResult = []\n    let defaultResult\n    const defFalseEitherCase = -1\n    const defNone = 0\n    const defTrue = 1\n    const defFalse = 2\n    let count\n    let originalRuleset\n    let noArgumentsFilter\n\n    function calcDefGroup(mixin, mixinPath) {\n      let f\n      let p\n      let namespace\n\n      for (f = 0; f < 2; f++) {\n        conditionResult[f] = true\n        defaultFunc.value(f)\n        for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n          namespace = mixinPath[p]\n          if (namespace.matchCondition) {\n            conditionResult[f] =\n              conditionResult[f] && namespace.matchCondition(null, context)\n          }\n        }\n        if (mixin.matchCondition) {\n          conditionResult[f] =\n            conditionResult[f] && mixin.matchCondition(args, context)\n        }\n      }\n      if (conditionResult[0] || conditionResult[1]) {\n        if (conditionResult[0] != conditionResult[1]) {\n          return conditionResult[1] ? defTrue : defFalse\n        }\n\n        return defNone\n      }\n      return defFalseEitherCase\n    }\n\n    for (i = 0; i < this.arguments.length; i++) {\n      arg = this.arguments[i]\n      argValue = arg.value.eval(context)\n      if (arg.expand && Array.isArray(argValue.value)) {\n        argValue = argValue.value\n        for (m = 0; m < argValue.length; m++) {\n          args.push({ value: argValue[m] })\n        }\n      } else {\n        args.push({ name: arg.name, value: argValue })\n      }\n    }\n\n    noArgumentsFilter = rule => rule.matchArgs(null, context)\n\n    for (i = 0; i < context.frames.length; i++) {\n      if (\n        (mixins = context.frames[i].find(\n          this.selector,\n          null,\n          noArgumentsFilter\n        )).length > 0\n      ) {\n        isOneFound = true\n\n        // To make `default()` function independent of definition order we have two \"subpasses\" here.\n        // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n        // and build candidate list with corresponding flags. Then, when we know all possible matches,\n        // we make a final decision.\n\n        for (m = 0; m < mixins.length; m++) {\n          mixin = mixins[m].rule\n          mixinPath = mixins[m].path\n          isRecursive = false\n          for (f = 0; f < context.frames.length; f++) {\n            if (\n              !(mixin instanceof MixinDefinition) &&\n              mixin === (context.frames[f].originalRuleset || context.frames[f])\n            ) {\n              isRecursive = true\n              break\n            }\n          }\n          if (isRecursive) {\n            continue\n          }\n\n          if (mixin.matchArgs(args, context)) {\n            candidate = { mixin, group: calcDefGroup(mixin, mixinPath) }\n\n            if (candidate.group !== defFalseEitherCase) {\n              candidates.push(candidate)\n            }\n\n            match = true\n          }\n        }\n\n        defaultFunc.reset()\n\n        count = [0, 0, 0]\n        for (m = 0; m < candidates.length; m++) {\n          count[candidates[m].group]++\n        }\n\n        if (count[defNone] > 0) {\n          defaultResult = defFalse\n        } else {\n          defaultResult = defTrue\n          if (count[defTrue] + count[defFalse] > 1) {\n            throw {\n              type: 'Runtime',\n              message: `Ambiguous use of \\`default()\\` found when matching for \\`${this.format(\n                args\n              )}\\``,\n              index: this.index,\n              filename: this.currentFileInfo.filename,\n            }\n          }\n        }\n\n        for (m = 0; m < candidates.length; m++) {\n          candidate = candidates[m].group\n          if (candidate === defNone || candidate === defaultResult) {\n            try {\n              mixin = candidates[m].mixin\n              if (!(mixin instanceof MixinDefinition)) {\n                originalRuleset = mixin.originalRuleset || mixin\n                mixin = new MixinDefinition(\n                  '',\n                  [],\n                  mixin.rules,\n                  null,\n                  false,\n                  null,\n                  originalRuleset.visibilityInfo()\n                )\n                mixin.originalRuleset = originalRuleset\n              }\n              const newRules = mixin.evalCall(context, args, this.important)\n                .rules\n              this._setVisibilityToReplacement(newRules)\n              Array.prototype.push.apply(rules, newRules)\n            } catch (e) {\n              throw {\n                message: e.message,\n                index: this.index,\n                filename: this.currentFileInfo.filename,\n                stack: e.stack,\n              }\n            }\n          }\n        }\n\n        if (match) {\n          return rules\n        }\n      }\n    }\n    if (isOneFound) {\n      throw {\n        type: 'Runtime',\n        message: `No matching definition was found for \\`${this.format(\n          args\n        )}\\``,\n        index: this.index,\n        filename: this.currentFileInfo.filename,\n      }\n    } else {\n      throw {\n        type: 'Name',\n        message: `${this.selector.toCSS().trim()} is undefined`,\n        index: this.index,\n        filename: this.currentFileInfo.filename,\n      }\n    }\n  }\n\n  _setVisibilityToReplacement(replacement) {\n    let i\n    let rule\n    if (this.blocksVisibility()) {\n      for (i = 0; i < replacement.length; i++) {\n        rule = replacement[i]\n        rule.addVisibilityBlock()\n      }\n    }\n  }\n\n  format(args) {\n    return `${this.selector.toCSS().trim()}(${args\n      ? args\n          .map(a => {\n            let argValue = ''\n            if (a.name) {\n              argValue += a.name + ':'\n            }\n            if (a.value.toCSS) {\n              argValue += a.value.toCSS()\n            } else {\n              argValue += '???'\n            }\n            return argValue\n          })\n          .join(', ')\n      : ''})`\n  }\n}\n\nMixinCall.prototype.type = 'MixinCall'\nmodule.exports = MixinCall\n","const JsEvalNode = require('./js-eval-node')\nconst Dimension = require('./dimension')\nconst Quoted = require('./quoted')\nconst Anonymous = require('./anonymous')\n\nclass JavaScript extends JsEvalNode {\n  constructor(string, escaped, index, currentFileInfo) {\n    super()\n    this.escaped = escaped\n    this.expression = string\n    this.index = index\n    this.currentFileInfo = currentFileInfo\n  }\n\n  eval(context) {\n    const result = this.evaluateJavaScript(this.expression, context)\n\n    if (typeof result === 'number') {\n      return new Dimension(result)\n    } else if (typeof result === 'string') {\n      return new Quoted(`\"${result}\"`, result, this.escaped, this.index)\n    } else if (Array.isArray(result)) {\n      return new Anonymous(result.join(', '))\n    } else {\n      return new Anonymous(result)\n    }\n  }\n}\n\nJavaScript.prototype.type = 'JavaScript'\n\nmodule.exports = JavaScript\n","const Node = require('./node')\n\nclass Assignment extends Node {\n  constructor(key, val) {\n    super()\n    this.key = key\n    this.value = val\n  }\n\n  accept(visitor) {\n    this.value = visitor.visit(this.value)\n  }\n\n  eval(context) {\n    if (this.value.eval) {\n      return new Assignment(this.key, this.value.eval(context))\n    }\n    return this\n  }\n\n  genCSS(context, output) {\n    output.add(`${this.key}=`)\n    if (this.value.genCSS) {\n      this.value.genCSS(context, output)\n    } else {\n      output.add(this.value)\n    }\n  }\n}\n\nAssignment.prototype.type = 'Assignment'\nmodule.exports = Assignment\n","const Node = require('./node')\n\nclass Condition extends Node {\n  constructor(op, l, r, i, negate) {\n    super()\n    this.op = op.trim()\n    this.lvalue = l\n    this.rvalue = r\n    this.index = i\n    this.negate = negate\n  }\n\n  accept(visitor) {\n    this.lvalue = visitor.visit(this.lvalue)\n    this.rvalue = visitor.visit(this.rvalue)\n  }\n\n  eval(context) {\n    const result = ((op, a, b) => {\n      switch (op) {\n        case 'and':\n          return a && b\n        case 'or':\n          return a || b\n        default:\n          switch (Node.compare(a, b)) {\n            case -1:\n              return op === '<' || op === '=<' || op === '<='\n            case 0:\n              return op === '=' || op === '>=' || op === '=<' || op === '<='\n            case 1:\n              return op === '>' || op === '>='\n            default:\n              return false\n          }\n      }\n    })(this.op, this.lvalue.eval(context), this.rvalue.eval(context))\n\n    return this.negate ? !result : result\n  }\n}\n\nCondition.prototype.type = 'Condition'\nmodule.exports = Condition\n","const Node = require('./node')\n\nclass UnicodeDescriptor extends Node {\n  constructor(value) {\n    super()\n    this.value = value\n  }\n}\n\nUnicodeDescriptor.prototype.type = 'UnicodeDescriptor'\n\nmodule.exports = UnicodeDescriptor\n","const Node = require('./node')\nconst Operation = require('./operation')\nconst Dimension = require('./dimension')\n\nclass Negative extends Node {\n  constructor(node) {\n    super()\n    this.value = node\n  }\n\n  genCSS(context, output) {\n    output.add('-')\n    this.value.genCSS(context, output)\n  }\n\n  eval(context) {\n    if (context.isMathOn()) {\n      return new Operation('*', [new Dimension(-1), this.value]).eval(context)\n    }\n    return new Negative(this.value.eval(context))\n  }\n}\n\nNegative.prototype.type = 'Negative'\nmodule.exports = Negative\n","const Node = require('./node')\nconst Selector = require('./selector')\n\nclass Extend extends Node {\n  constructor(selector, option, index, currentFileInfo, visibilityInfo) {\n    super()\n    this.selector = selector\n    this.option = option\n    this.index = index\n    this.object_id = Extend.next_id++\n    this.parent_ids = [this.object_id]\n    this.currentFileInfo = currentFileInfo || {}\n    this.copyVisibilityInfo(visibilityInfo)\n    this.allowRoot = true\n\n    switch (option) {\n      case 'all':\n        this.allowBefore = true\n        this.allowAfter = true\n        break\n      default:\n        this.allowBefore = false\n        this.allowAfter = false\n        break\n    }\n  }\n\n  accept(visitor) {\n    this.selector = visitor.visit(this.selector)\n  }\n\n  eval(context) {\n    return new Extend(\n      this.selector.eval(context),\n      this.option,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  clone(context) {\n    return new Extend(\n      this.selector,\n      this.option,\n      this.index,\n      this.currentFileInfo,\n      this.visibilityInfo()\n    )\n  }\n\n  //it concatenates (joins) all selectors in selector array\n  findSelfSelectors(selectors) {\n    let selfElements = []\n    let i\n    let selectorElements\n\n    for (i = 0; i < selectors.length; i++) {\n      selectorElements = selectors[i].elements\n      // duplicate the logic in genCSS function inside the selector node.\n      // future TODO - move both logics into the selector joiner visitor\n      if (\n        i > 0 &&\n        selectorElements.length &&\n        selectorElements[0].combinator.value === ''\n      ) {\n        selectorElements[0].combinator.value = ' '\n      }\n      selfElements = selfElements.concat(selectors[i].elements)\n    }\n\n    this.selfSelectors = [new Selector(selfElements)]\n    this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo())\n  }\n}\n\nExtend.next_id = 0\n\nExtend.prototype.type = 'Extend'\nmodule.exports = Extend\n","const Node = require('./node')\nconst Variable = require('./variable')\n\nclass RulesetCall extends Node {\n  constructor(variable) {\n    super()\n    this.variable = variable\n    this.allowRoot = true\n  }\n\n  eval(context) {\n    const detachedRuleset = new Variable(this.variable).eval(context)\n    return detachedRuleset.callEval(context)\n  }\n}\n\nRulesetCall.prototype.type = 'RulesetCall'\nmodule.exports = RulesetCall\n","const tree = {}\n\ntree.Node = require('./node')\ntree.Alpha = require('./alpha')\ntree.Color = require('./color')\ntree.Directive = require('./directive')\ntree.DetachedRuleset = require('./detached-ruleset')\ntree.Operation = require('./operation')\ntree.Dimension = require('./dimension')\ntree.Unit = require('./unit')\ntree.Keyword = require('./keyword')\ntree.Variable = require('./variable')\ntree.Ruleset = require('./ruleset')\ntree.Element = require('./element')\ntree.Attribute = require('./attribute')\ntree.Combinator = require('./combinator')\ntree.Selector = require('./selector')\ntree.Quoted = require('./quoted')\ntree.Expression = require('./expression')\ntree.Rule = require('./rule')\ntree.Call = require('./call')\ntree.URL = require('./url')\ntree.Import = require('./import')\ntree.mixin = {\n  Call: require('./mixin-call'),\n  Definition: require('./mixin-definition'),\n}\ntree.Comment = require('./comment')\ntree.Anonymous = require('./anonymous')\ntree.Value = require('./value')\ntree.JavaScript = require('./javascript')\ntree.Assignment = require('./assignment')\ntree.Condition = require('./condition')\ntree.Paren = require('./paren')\ntree.Media = require('./media')\ntree.UnicodeDescriptor = require('./unicode-descriptor')\ntree.Negative = require('./negative')\ntree.Extend = require('./extend')\ntree.RulesetCall = require('./ruleset-call')\n\nmodule.exports = tree\n","class ImportSequencer {\n  constructor(onSequencerEmpty) {\n    this.imports = []\n    this.variableImports = []\n    this._onSequencerEmpty = onSequencerEmpty\n    this._currentDepth = 0\n  }\n\n  addImport(callback) {\n    const importSequencer = this\n\n    const importItem = {\n      callback,\n      args: null,\n      isReady: false,\n    }\n\n    this.imports.push(importItem)\n    return function(...args) {\n      importItem.args = Array.prototype.slice.call(args, 0)\n      importItem.isReady = true\n      importSequencer.tryRun()\n    }\n  }\n\n  addVariableImport(callback) {\n    this.variableImports.push(callback)\n  }\n\n  tryRun() {\n    this._currentDepth++\n    try {\n      while (true) {\n        while (this.imports.length > 0) {\n          const importItem = this.imports[0]\n          if (!importItem.isReady) {\n            return\n          }\n          this.imports = this.imports.slice(1)\n          importItem.callback.apply(null, importItem.args)\n        }\n        if (this.variableImports.length === 0) {\n          break\n        }\n        const variableImport = this.variableImports[0]\n        this.variableImports = this.variableImports.slice(1)\n        variableImport()\n      }\n    } finally {\n      this._currentDepth--\n    }\n    if (this._currentDepth === 0 && this._onSequencerEmpty) {\n      this._onSequencerEmpty()\n    }\n  }\n}\n\nmodule.exports = ImportSequencer\n","const contexts = require('../contexts')\nconst Visitor = require('./visitor')\nconst ImportSequencer = require('./import-sequencer')\n\nconst ImportVisitor = function(importer, finish) {\n  this._visitor = new Visitor(this)\n  this._importer = importer\n  this._finish = finish\n  this.context = new contexts.Eval()\n  this.importCount = 0\n  this.onceFileDetectionMap = {}\n  this.recursionDetector = {}\n  this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this))\n}\n\nImportVisitor.prototype = {\n  isReplacing: false,\n  run(root) {\n    try {\n      // process the contents\n      this._visitor.visit(root)\n    } catch (e) {\n      this.error = e\n    }\n\n    this.isFinished = true\n    this._sequencer.tryRun()\n  },\n  _onSequencerEmpty() {\n    if (!this.isFinished) {\n      return\n    }\n    this._finish(this.error)\n  },\n  visitImport(importNode, visitArgs) {\n    const inlineCSS = importNode.options.inline\n\n    if (!importNode.css || inlineCSS) {\n      const context = new contexts.Eval(\n        this.context,\n        this.context.frames.slice(0)\n      )\n      const importParent = context.frames[0]\n\n      this.importCount++\n      if (importNode.isVariableImport()) {\n        this._sequencer.addVariableImport(\n          this.processImportNode.bind(this, importNode, context, importParent)\n        )\n      } else {\n        this.processImportNode(importNode, context, importParent)\n      }\n    }\n    visitArgs.visitDeeper = false\n  },\n  processImportNode(importNode, context, importParent) {\n    let evaldImportNode\n    const inlineCSS = importNode.options.inline\n\n    try {\n      evaldImportNode = importNode.evalForImport(context)\n    } catch (e) {\n      if (!e.filename) {\n        e.index = importNode.index\n        e.filename = importNode.currentFileInfo.filename\n      }\n      // attempt to eval properly and treat as css\n      importNode.css = true\n      // if that fails, this error will be thrown\n      importNode.error = e\n    }\n\n    if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n      if (evaldImportNode.options.multiple) {\n        context.importMultiple = true\n      }\n\n      // try appending if we haven't determined if it is css or not\n      const tryAppendLessExtension = evaldImportNode.css === undefined\n\n      for (let i = 0; i < importParent.rules.length; i++) {\n        if (importParent.rules[i] === importNode) {\n          importParent.rules[i] = evaldImportNode\n          break\n        }\n      }\n\n      const onImported = this.onImported.bind(this, evaldImportNode, context)\n      const sequencedOnImported = this._sequencer.addImport(onImported)\n\n      this._importer.push(\n        evaldImportNode.getPath(),\n        tryAppendLessExtension,\n        evaldImportNode.currentFileInfo,\n        evaldImportNode.options,\n        sequencedOnImported\n      )\n    } else {\n      this.importCount--\n      if (this.isFinished) {\n        this._sequencer.tryRun()\n      }\n    }\n  },\n  onImported(importNode, context, e, root, importedAtRoot, fullPath) {\n    if (e) {\n      if (!e.filename) {\n        e.index = importNode.index\n        e.filename = importNode.currentFileInfo.filename\n      }\n      this.error = e\n    }\n\n    const importVisitor = this\n    const inlineCSS = importNode.options.inline\n    const isPlugin = importNode.options.plugin\n    const isOptional = importNode.options.optional\n    const duplicateImport =\n      importedAtRoot || fullPath in importVisitor.recursionDetector\n\n    if (!context.importMultiple) {\n      if (duplicateImport) {\n        importNode.skip = true\n      } else {\n        importNode.skip = () => {\n          if (fullPath in importVisitor.onceFileDetectionMap) {\n            return true\n          }\n          importVisitor.onceFileDetectionMap[fullPath] = true\n          return false\n        }\n      }\n    }\n\n    if (!fullPath && isOptional) {\n      importNode.skip = true\n    }\n\n    if (root) {\n      importNode.root = root\n      importNode.importedFilename = fullPath\n\n      if (\n        !inlineCSS &&\n        !isPlugin &&\n        (context.importMultiple || !duplicateImport)\n      ) {\n        importVisitor.recursionDetector[fullPath] = true\n\n        const oldContext = this.context\n        this.context = context\n        try {\n          this._visitor.visit(root)\n        } catch (e) {\n          this.error = e\n        }\n        this.context = oldContext\n      }\n    }\n\n    importVisitor.importCount--\n\n    if (importVisitor.isFinished) {\n      importVisitor._sequencer.tryRun()\n    }\n  },\n  visitRule(ruleNode, visitArgs) {\n    if (ruleNode.value.type === 'DetachedRuleset') {\n      this.context.frames.unshift(ruleNode)\n    } else {\n      visitArgs.visitDeeper = false\n    }\n  },\n  visitRuleOut(ruleNode) {\n    if (ruleNode.value.type === 'DetachedRuleset') {\n      this.context.frames.shift()\n    }\n  },\n  visitDirective(directiveNode, visitArgs) {\n    this.context.frames.unshift(directiveNode)\n  },\n  visitDirectiveOut(directiveNode) {\n    this.context.frames.shift()\n  },\n  visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n    this.context.frames.unshift(mixinDefinitionNode)\n  },\n  visitMixinDefinitionOut(mixinDefinitionNode) {\n    this.context.frames.shift()\n  },\n  visitRuleset(rulesetNode, visitArgs) {\n    this.context.frames.unshift(rulesetNode)\n  },\n  visitRulesetOut(rulesetNode) {\n    this.context.frames.shift()\n  },\n  visitMedia(mediaNode, visitArgs) {\n    this.context.frames.unshift(mediaNode.rules[0])\n  },\n  visitMediaOut(mediaNode) {\n    this.context.frames.shift()\n  },\n}\nmodule.exports = ImportVisitor\n","class SetTreeVisibilityVisitor {\n  constructor(visible) {\n    this.visible = visible\n  }\n\n  run(root) {\n    this.visit(root)\n  }\n\n  visitArray(nodes) {\n    if (!nodes) {\n      return nodes\n    }\n\n    const cnt = nodes.length\n    let i\n    for (i = 0; i < cnt; i++) {\n      this.visit(nodes[i])\n    }\n    return nodes\n  }\n\n  visit(node) {\n    if (!node) {\n      return node\n    }\n    if (node.constructor === Array) {\n      return this.visitArray(node)\n    }\n\n    if (!node.blocksVisibility || node.blocksVisibility()) {\n      return node\n    }\n    if (this.visible) {\n      node.ensureVisibility()\n    } else {\n      node.ensureInvisibility()\n    }\n\n    node.accept(this)\n    return node\n  }\n}\n\nmodule.exports = SetTreeVisibilityVisitor\n","const tree = require('../tree')\nconst Visitor = require('./visitor')\nconst logger = require('../logger')\n\n/*jshint loopfunc:true */\n\nclass ExtendFinderVisitor {\n  constructor() {\n    this._visitor = new Visitor(this)\n    this.contexts = []\n    this.allExtendsStack = [[]]\n  }\n\n  run(root) {\n    root = this._visitor.visit(root)\n    root.allExtends = this.allExtendsStack[0]\n    return root\n  }\n\n  visitRule(ruleNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitRuleset(rulesetNode, visitArgs) {\n    if (rulesetNode.root) {\n      return\n    }\n\n    let i\n    let j\n    let extend\n    const allSelectorsExtendList = []\n    let extendList\n\n    // get &:extend(.a); rules which apply to all selectors in this ruleset\n    const rules = rulesetNode.rules\n\n    const ruleCnt = rules ? rules.length : 0\n    for (i = 0; i < ruleCnt; i++) {\n      if (rulesetNode.rules[i] instanceof tree.Extend) {\n        allSelectorsExtendList.push(rules[i])\n        rulesetNode.extendOnEveryPath = true\n      }\n    }\n\n    // now find every selector and apply the extends that apply to all extends\n    // and the ones which apply to an individual extend\n    const paths = rulesetNode.paths\n    for (i = 0; i < paths.length; i++) {\n      const selectorPath = paths[i]\n      const selector = selectorPath[selectorPath.length - 1]\n      const selExtendList = selector.extendList\n\n      extendList = selExtendList\n        ? selExtendList.slice(0).concat(allSelectorsExtendList)\n        : allSelectorsExtendList\n\n      if (extendList) {\n        extendList = extendList.map(allSelectorsExtend =>\n          allSelectorsExtend.clone()\n        )\n      }\n\n      for (j = 0; j < extendList.length; j++) {\n        this.foundExtends = true\n        extend = extendList[j]\n        extend.findSelfSelectors(selectorPath)\n        extend.ruleset = rulesetNode\n        if (j === 0) {\n          extend.firstExtendOnThisSelectorPath = true\n        }\n        this.allExtendsStack[this.allExtendsStack.length - 1].push(extend)\n      }\n    }\n\n    this.contexts.push(rulesetNode.selectors)\n  }\n\n  visitRulesetOut(rulesetNode) {\n    if (!rulesetNode.root) {\n      this.contexts.length = this.contexts.length - 1\n    }\n  }\n\n  visitMedia(mediaNode, visitArgs) {\n    mediaNode.allExtends = []\n    this.allExtendsStack.push(mediaNode.allExtends)\n  }\n\n  visitMediaOut(mediaNode) {\n    this.allExtendsStack.length = this.allExtendsStack.length - 1\n  }\n\n  visitDirective(directiveNode, visitArgs) {\n    directiveNode.allExtends = []\n    this.allExtendsStack.push(directiveNode.allExtends)\n  }\n\n  visitDirectiveOut(directiveNode) {\n    this.allExtendsStack.length = this.allExtendsStack.length - 1\n  }\n}\n\nclass ProcessExtendsVisitor {\n  constructor() {\n    this._visitor = new Visitor(this)\n  }\n\n  run(root) {\n    const extendFinder = new ExtendFinderVisitor()\n    this.extendIndices = {}\n    extendFinder.run(root)\n    if (!extendFinder.foundExtends) {\n      return root\n    }\n    root.allExtends = root.allExtends.concat(\n      this.doExtendChaining(root.allExtends, root.allExtends)\n    )\n    this.allExtendsStack = [root.allExtends]\n    const newRoot = this._visitor.visit(root)\n    this.checkExtendsForNonMatched(root.allExtends)\n    return newRoot\n  }\n\n  checkExtendsForNonMatched(extendList) {\n    const indices = this.extendIndices\n    extendList\n      .filter(\n        extend => !extend.hasFoundMatches && extend.parent_ids.length == 1\n      )\n      .forEach(extend => {\n        let selector = '_unknown_'\n        try {\n          selector = extend.selector.toCSS({})\n        } catch (_) {}\n\n        if (!indices[`${extend.index} ${selector}`]) {\n          indices[`${extend.index} ${selector}`] = true\n          logger.warn(`extend '${selector}' has no matches`)\n        }\n      })\n  }\n\n  doExtendChaining(extendsList, extendsListTarget, iterationCount) {\n    //\n    // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n    // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n    // this means this new extend can then go and alter other extends\n    //\n    // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n    // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n    // processed if we look at each selector at a time, as is done in visitRuleset\n\n    let extendIndex\n\n    let targetExtendIndex\n    let matches\n    const extendsToAdd = []\n    let newSelector\n    const extendVisitor = this\n    let selectorPath\n    let extend\n    let targetExtend\n    let newExtend\n\n    iterationCount = iterationCount || 0\n\n    //loop through comparing every extend with every target extend.\n    // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n    // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n    // and the second is the target.\n    // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n    // case when processing media queries\n    for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n      for (\n        targetExtendIndex = 0;\n        targetExtendIndex < extendsListTarget.length;\n        targetExtendIndex++\n      ) {\n        extend = extendsList[extendIndex]\n        targetExtend = extendsListTarget[targetExtendIndex]\n\n        // look for circular references\n        if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {\n          continue\n        }\n\n        // find a match in the target extends self selector (the bit before :extend)\n        selectorPath = [targetExtend.selfSelectors[0]]\n        matches = extendVisitor.findMatch(extend, selectorPath)\n\n        if (matches.length) {\n          extend.hasFoundMatches = true\n\n          // we found a match, so for each self selector..\n          extend.selfSelectors.forEach(selfSelector => {\n            const info = targetExtend.visibilityInfo()\n\n            // process the extend as usual\n            newSelector = extendVisitor.extendSelector(\n              matches,\n              selectorPath,\n              selfSelector,\n              extend.isVisible()\n            )\n\n            // but now we create a new extend from it\n            newExtend = new tree.Extend(\n              targetExtend.selector,\n              targetExtend.option,\n              0,\n              targetExtend.currentFileInfo,\n              info\n            )\n            newExtend.selfSelectors = newSelector\n\n            // add the extend onto the list of extends for that selector\n            newSelector[newSelector.length - 1].extendList = [newExtend]\n\n            // record that we need to add it.\n            extendsToAdd.push(newExtend)\n            newExtend.ruleset = targetExtend.ruleset\n\n            //remember its parents for circular references\n            newExtend.parent_ids = newExtend.parent_ids.concat(\n              targetExtend.parent_ids,\n              extend.parent_ids\n            )\n\n            // only process the selector once.. if we have :extend(.a,.b) then multiple\n            // extends will look at the same selector path, so when extending\n            // we know that any others will be duplicates in terms of what is added to the css\n            if (targetExtend.firstExtendOnThisSelectorPath) {\n              newExtend.firstExtendOnThisSelectorPath = true\n              targetExtend.ruleset.paths.push(newSelector)\n            }\n          })\n        }\n      }\n    }\n\n    if (extendsToAdd.length) {\n      // try to detect circular references to stop a stack overflow.\n      // may no longer be needed.\n      this.extendChainCount++\n      if (iterationCount > 100) {\n        let selectorOne = '{unable to calculate}'\n        let selectorTwo = '{unable to calculate}'\n        try {\n          selectorOne = extendsToAdd[0].selfSelectors[0].toCSS()\n          selectorTwo = extendsToAdd[0].selector.toCSS()\n        } catch (e) {}\n        throw {\n          message: `extend circular reference detected. One of the circular extends is currently:${selectorOne}:extend(${selectorTwo})`,\n        }\n      }\n\n      // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n      // d extending e...\n      return extendsToAdd.concat(\n        extendVisitor.doExtendChaining(\n          extendsToAdd,\n          extendsListTarget,\n          iterationCount + 1\n        )\n      )\n    } else {\n      return extendsToAdd\n    }\n  }\n\n  visitRule(ruleNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitSelector(selectorNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitRuleset(rulesetNode, visitArgs) {\n    if (rulesetNode.root) {\n      return\n    }\n    let matches\n    let pathIndex\n    let extendIndex\n    const allExtends = this.allExtendsStack[this.allExtendsStack.length - 1]\n    const selectorsToAdd = []\n    const extendVisitor = this\n    let selectorPath\n\n    // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n    for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n      for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n        selectorPath = rulesetNode.paths[pathIndex]\n\n        // extending extends happens initially, before the main pass\n        if (rulesetNode.extendOnEveryPath) {\n          continue\n        }\n        const extendList = selectorPath[selectorPath.length - 1].extendList\n        if (extendList && extendList.length) {\n          continue\n        }\n\n        matches = this.findMatch(allExtends[extendIndex], selectorPath)\n\n        if (matches.length) {\n          allExtends[extendIndex].hasFoundMatches = true\n\n          allExtends[extendIndex].selfSelectors.forEach(selfSelector => {\n            let extendedSelectors\n            extendedSelectors = extendVisitor.extendSelector(\n              matches,\n              selectorPath,\n              selfSelector,\n              allExtends[extendIndex].isVisible()\n            )\n            selectorsToAdd.push(extendedSelectors)\n          })\n        }\n      }\n    }\n    rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd)\n  }\n\n  findMatch(extend, haystackSelectorPath) {\n    //\n    // look through the haystack selector path to try and find the needle - extend.selector\n    // returns an array of selector matches that can then be replaced\n    //\n    let haystackSelectorIndex\n\n    let hackstackSelector\n    let hackstackElementIndex\n    let haystackElement\n    let targetCombinator\n    let i\n    const extendVisitor = this\n    const needleElements = extend.selector.elements\n    const potentialMatches = []\n    let potentialMatch\n    const matches = []\n\n    // loop through the haystack elements\n    for (\n      haystackSelectorIndex = 0;\n      haystackSelectorIndex < haystackSelectorPath.length;\n      haystackSelectorIndex++\n    ) {\n      hackstackSelector = haystackSelectorPath[haystackSelectorIndex]\n\n      for (\n        hackstackElementIndex = 0;\n        hackstackElementIndex < hackstackSelector.elements.length;\n        hackstackElementIndex++\n      ) {\n        haystackElement = hackstackSelector.elements[hackstackElementIndex]\n\n        // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n        if (\n          extend.allowBefore ||\n          (haystackSelectorIndex === 0 && hackstackElementIndex === 0)\n        ) {\n          potentialMatches.push({\n            pathIndex: haystackSelectorIndex,\n            index: hackstackElementIndex,\n            matched: 0,\n            initialCombinator: haystackElement.combinator,\n          })\n        }\n\n        for (i = 0; i < potentialMatches.length; i++) {\n          potentialMatch = potentialMatches[i]\n\n          // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n          // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n          // work out what the resulting combinator will be\n          targetCombinator = haystackElement.combinator.value\n          if (targetCombinator === '' && hackstackElementIndex === 0) {\n            targetCombinator = ' '\n          }\n\n          // if we don't match, null our match to indicate failure\n          if (\n            !extendVisitor.isElementValuesEqual(\n              needleElements[potentialMatch.matched].value,\n              haystackElement.value\n            ) ||\n            (potentialMatch.matched > 0 &&\n              needleElements[potentialMatch.matched].combinator.value !==\n                targetCombinator)\n          ) {\n            potentialMatch = null\n          } else {\n            potentialMatch.matched++\n          }\n\n          // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n          if (potentialMatch) {\n            potentialMatch.finished =\n              potentialMatch.matched === needleElements.length\n            if (\n              potentialMatch.finished &&\n              (!extend.allowAfter &&\n                (hackstackElementIndex + 1 <\n                  hackstackSelector.elements.length ||\n                  haystackSelectorIndex + 1 < haystackSelectorPath.length))\n            ) {\n              potentialMatch = null\n            }\n          }\n          // if null we remove, if not, we are still valid, so either push as a valid match or continue\n          if (potentialMatch) {\n            if (potentialMatch.finished) {\n              potentialMatch.length = needleElements.length\n              potentialMatch.endPathIndex = haystackSelectorIndex\n              potentialMatch.endPathElementIndex = hackstackElementIndex + 1 // index after end of match\n              potentialMatches.length = 0 // we don't allow matches to overlap, so start matching again\n              matches.push(potentialMatch)\n            }\n          } else {\n            potentialMatches.splice(i, 1)\n            i--\n          }\n        }\n      }\n    }\n    return matches\n  }\n\n  isElementValuesEqual(elementValue1, elementValue2) {\n    if (\n      typeof elementValue1 === 'string' ||\n      typeof elementValue2 === 'string'\n    ) {\n      return elementValue1 === elementValue2\n    }\n    if (elementValue1 instanceof tree.Attribute) {\n      if (\n        elementValue1.op !== elementValue2.op ||\n        elementValue1.key !== elementValue2.key\n      ) {\n        return false\n      }\n      if (!elementValue1.value || !elementValue2.value) {\n        if (elementValue1.value || elementValue2.value) {\n          return false\n        }\n        return true\n      }\n      elementValue1 = elementValue1.value.value || elementValue1.value\n      elementValue2 = elementValue2.value.value || elementValue2.value\n      return elementValue1 === elementValue2\n    }\n    elementValue1 = elementValue1.value\n    elementValue2 = elementValue2.value\n    if (elementValue1 instanceof tree.Selector) {\n      if (\n        !(elementValue2 instanceof tree.Selector) ||\n        elementValue1.elements.length !== elementValue2.elements.length\n      ) {\n        return false\n      }\n      for (let i = 0; i < elementValue1.elements.length; i++) {\n        if (\n          elementValue1.elements[i].combinator.value !==\n          elementValue2.elements[i].combinator.value\n        ) {\n          if (\n            i !== 0 ||\n            (elementValue1.elements[i].combinator.value || ' ') !==\n              (elementValue2.elements[i].combinator.value || ' ')\n          ) {\n            return false\n          }\n        }\n        if (\n          !this.isElementValuesEqual(\n            elementValue1.elements[i].value,\n            elementValue2.elements[i].value\n          )\n        ) {\n          return false\n        }\n      }\n      return true\n    }\n    return false\n  }\n\n  extendSelector(matches, selectorPath, replacementSelector, isVisible) {\n    //for a set of matches, replace each match with the replacement selector\n\n    let currentSelectorPathIndex = 0\n\n    let currentSelectorPathElementIndex = 0\n    let path = []\n    let matchIndex\n    let selector\n    let firstElement\n    let match\n    let newElements\n\n    for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n      match = matches[matchIndex]\n      selector = selectorPath[match.pathIndex]\n      firstElement = new tree.Element(\n        match.initialCombinator,\n        replacementSelector.elements[0].value,\n        replacementSelector.elements[0].index,\n        replacementSelector.elements[0].currentFileInfo\n      )\n\n      if (\n        match.pathIndex > currentSelectorPathIndex &&\n        currentSelectorPathElementIndex > 0\n      ) {\n        path[path.length - 1].elements = path[path.length - 1].elements.concat(\n          selectorPath[currentSelectorPathIndex].elements.slice(\n            currentSelectorPathElementIndex\n          )\n        )\n        currentSelectorPathElementIndex = 0\n        currentSelectorPathIndex++\n      }\n\n      newElements = selector.elements\n        .slice(currentSelectorPathElementIndex, match.index)\n        .concat([firstElement])\n        .concat(replacementSelector.elements.slice(1))\n\n      if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n        path[path.length - 1].elements = path[path.length - 1].elements.concat(\n          newElements\n        )\n      } else {\n        path = path.concat(\n          selectorPath.slice(currentSelectorPathIndex, match.pathIndex)\n        )\n\n        path.push(new tree.Selector(newElements))\n      }\n      currentSelectorPathIndex = match.endPathIndex\n      currentSelectorPathElementIndex = match.endPathElementIndex\n      if (\n        currentSelectorPathElementIndex >=\n        selectorPath[currentSelectorPathIndex].elements.length\n      ) {\n        currentSelectorPathElementIndex = 0\n        currentSelectorPathIndex++\n      }\n    }\n\n    if (\n      currentSelectorPathIndex < selectorPath.length &&\n      currentSelectorPathElementIndex > 0\n    ) {\n      path[path.length - 1].elements = path[path.length - 1].elements.concat(\n        selectorPath[currentSelectorPathIndex].elements.slice(\n          currentSelectorPathElementIndex\n        )\n      )\n      currentSelectorPathIndex++\n    }\n\n    path = path.concat(\n      selectorPath.slice(currentSelectorPathIndex, selectorPath.length)\n    )\n    path = path.map(currentValue => {\n      // we can re-use elements here, because the visibility property matters only for selectors\n      const derived = currentValue.createDerived(currentValue.elements)\n      if (isVisible) {\n        derived.ensureVisibility()\n      } else {\n        derived.ensureInvisibility()\n      }\n      return derived\n    })\n    return path\n  }\n\n  visitMedia(mediaNode, visitArgs) {\n    let newAllExtends = mediaNode.allExtends.concat(\n      this.allExtendsStack[this.allExtendsStack.length - 1]\n    )\n    newAllExtends = newAllExtends.concat(\n      this.doExtendChaining(newAllExtends, mediaNode.allExtends)\n    )\n    this.allExtendsStack.push(newAllExtends)\n  }\n\n  visitMediaOut(mediaNode) {\n    const lastIndex = this.allExtendsStack.length - 1\n    this.allExtendsStack.length = lastIndex\n  }\n\n  visitDirective(directiveNode, visitArgs) {\n    let newAllExtends = directiveNode.allExtends.concat(\n      this.allExtendsStack[this.allExtendsStack.length - 1]\n    )\n    newAllExtends = newAllExtends.concat(\n      this.doExtendChaining(newAllExtends, directiveNode.allExtends)\n    )\n    this.allExtendsStack.push(newAllExtends)\n  }\n\n  visitDirectiveOut(directiveNode) {\n    const lastIndex = this.allExtendsStack.length - 1\n    this.allExtendsStack.length = lastIndex\n  }\n}\n\nmodule.exports = ProcessExtendsVisitor\n","const Visitor = require('./visitor')\n\nclass JoinSelectorVisitor {\n  constructor() {\n    this.contexts = [[]]\n    this._visitor = new Visitor(this)\n  }\n\n  run(root) {\n    return this._visitor.visit(root)\n  }\n\n  visitRule(ruleNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n    visitArgs.visitDeeper = false\n  }\n\n  visitRuleset(rulesetNode, visitArgs) {\n    const context = this.contexts[this.contexts.length - 1]\n    const paths = []\n    let selectors\n\n    this.contexts.push(paths)\n\n    if (!rulesetNode.root) {\n      selectors = rulesetNode.selectors\n      if (selectors) {\n        selectors = selectors.filter(selector => selector.getIsOutput())\n        rulesetNode.selectors = selectors.length\n          ? selectors\n          : (selectors = null)\n        if (selectors) {\n          rulesetNode.joinSelectors(paths, context, selectors)\n        }\n      }\n      if (!selectors) {\n        rulesetNode.rules = null\n      }\n      rulesetNode.paths = paths\n    }\n  }\n\n  visitRulesetOut(rulesetNode) {\n    this.contexts.length = this.contexts.length - 1\n  }\n\n  visitMedia(mediaNode, visitArgs) {\n    const context = this.contexts[this.contexts.length - 1]\n    mediaNode.rules[0].root = context.length === 0 || context[0].multiMedia\n  }\n\n  visitDirective(directiveNode, visitArgs) {\n    const context = this.contexts[this.contexts.length - 1]\n    if (directiveNode.rules && directiveNode.rules.length) {\n      directiveNode.rules[0].root =\n        directiveNode.isRooted || context.length === 0 || null\n    }\n  }\n}\n\nmodule.exports = JoinSelectorVisitor\n","const tree = require('../tree')\nconst Visitor = require('./visitor')\n\nclass CSSVisitorUtils {\n  constructor(context) {\n    this._visitor = new Visitor(this)\n    this._context = context\n  }\n\n  containsSilentNonBlockedChild(bodyRules) {\n    let rule\n    if (bodyRules == null) {\n      return false\n    }\n    for (let r = 0; r < bodyRules.length; r++) {\n      rule = bodyRules[r]\n      if (\n        rule.isSilent &&\n        rule.isSilent(this._context) &&\n        !rule.blocksVisibility()\n      ) {\n        //the directive contains something that was referenced (likely by extend)\n        //therefore it needs to be shown in output too\n        return true\n      }\n    }\n    return false\n  }\n\n  keepOnlyVisibleChilds(owner) {\n    if (owner == null || owner.rules == null) {\n      return\n    }\n\n    owner.rules = owner.rules.filter(thing => thing.isVisible())\n  }\n\n  isEmpty(owner) {\n    if (owner == null || owner.rules == null) {\n      return true\n    }\n    return owner.rules.length === 0\n  }\n\n  hasVisibleSelector(rulesetNode) {\n    if (rulesetNode == null || rulesetNode.paths == null) {\n      return false\n    }\n    return rulesetNode.paths.length > 0\n  }\n\n  resolveVisibility(node, originalRules) {\n    if (!node.blocksVisibility()) {\n      if (\n        this.isEmpty(node) &&\n        !this.containsSilentNonBlockedChild(originalRules)\n      ) {\n        return\n      }\n\n      return node\n    }\n\n    const compiledRulesBody = node.rules[0]\n    this.keepOnlyVisibleChilds(compiledRulesBody)\n\n    if (this.isEmpty(compiledRulesBody)) {\n      return\n    }\n\n    node.ensureVisibility()\n    node.removeVisibilityBlock()\n\n    return node\n  }\n\n  isVisibleRuleset(rulesetNode) {\n    if (rulesetNode.firstRoot) {\n      return true\n    }\n\n    if (this.isEmpty(rulesetNode)) {\n      return false\n    }\n\n    if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n      return false\n    }\n\n    return true\n  }\n}\n\nconst ToCSSVisitor = function(context) {\n  this._visitor = new Visitor(this)\n  this._context = context\n  this.utils = new CSSVisitorUtils(context)\n  this._level = 0\n}\n\nToCSSVisitor.prototype = {\n  isReplacing: true,\n  run(root) {\n    return this._visitor.visit(root)\n  },\n\n  visitRule(ruleNode, visitArgs) {\n    if (ruleNode.blocksVisibility()) {\n      return\n    }\n    if (ruleNode.variable) {\n      if (!this._context.simplify) return //We don't need any variables\n      if (this._level > this._context.simplifyLevel) return //Variable is too deep\n      if (\n        this._context.simplifyFilter &&\n        !this._context.simplifyFilter.test(ruleNode.name)\n      )\n        return //Variable didnt pass filter\n    }\n    return ruleNode\n  },\n\n  visitMixinDefinition(mixinNode, visitArgs) {\n    // mixin definitions do not get eval'd - this means they keep state\n    // so we have to clear that state here so it isn't used if toCSS is called twice\n    mixinNode.frames = []\n  },\n\n  visitExtend(extendNode, visitArgs) {},\n\n  visitComment(commentNode, visitArgs) {\n    if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n      return\n    }\n    return commentNode\n  },\n\n  visitMedia(mediaNode, visitArgs) {\n    const originalRules = mediaNode.rules[0].rules\n    mediaNode.accept(this._visitor)\n    visitArgs.visitDeeper = false\n\n    return this.utils.resolveVisibility(mediaNode, originalRules)\n  },\n\n  visitImport(importNode, visitArgs) {\n    if (importNode.blocksVisibility()) {\n      return\n    }\n    return importNode\n  },\n\n  visitDirective(directiveNode, visitArgs) {\n    if (directiveNode.rules && directiveNode.rules.length) {\n      return this.visitDirectiveWithBody(directiveNode, visitArgs)\n    } else {\n      return this.visitDirectiveWithoutBody(directiveNode, visitArgs)\n    }\n  },\n\n  visitDirectiveWithBody(directiveNode, visitArgs) {\n    //if there is only one nested ruleset and that one has no path, then it is\n    //just fake ruleset\n    function hasFakeRuleset(directiveNode) {\n      const bodyRules = directiveNode.rules\n      return (\n        bodyRules.length === 1 &&\n        (!bodyRules[0].paths || bodyRules[0].paths.length === 0)\n      )\n    }\n    function getBodyRules(directiveNode) {\n      const nodeRules = directiveNode.rules\n      if (hasFakeRuleset(directiveNode)) {\n        return nodeRules[0].rules\n      }\n\n      return nodeRules\n    }\n    //it is still true that it is only one ruleset in array\n    //this is last such moment\n    //process childs\n    const originalRules = getBodyRules(directiveNode)\n    directiveNode.accept(this._visitor)\n    visitArgs.visitDeeper = false\n\n    if (!this.utils.isEmpty(directiveNode)) {\n      this._mergeRules(directiveNode.rules[0].rules)\n    }\n\n    return this.utils.resolveVisibility(directiveNode, originalRules)\n  },\n\n  visitDirectiveWithoutBody(directiveNode, visitArgs) {\n    if (directiveNode.blocksVisibility()) {\n      return\n    }\n\n    if (directiveNode.name === '@charset') {\n      // Only output the debug info together with subsequent @charset definitions\n      // a comment (or @media statement) before the actual @charset directive would\n      // be considered illegal css as it has to be on the first line\n      if (this.charset) {\n        if (directiveNode.debugInfo) {\n          const comment = new tree.Comment(\n            `/* ${directiveNode.toCSS(this._context).replace(/\\n/g, '')} */\\n`\n          )\n          comment.debugInfo = directiveNode.debugInfo\n          return this._visitor.visit(comment)\n        }\n        return\n      }\n      this.charset = true\n    }\n\n    return directiveNode\n  },\n\n  checkValidNodes(rules, isRoot) {\n    if (!rules) {\n      return\n    }\n\n    for (let i = 0; i < rules.length; i++) {\n      const ruleNode = rules[i]\n      if (isRoot && ruleNode instanceof tree.Rule && !ruleNode.variable) {\n        throw {\n          message:\n            'Properties must be inside selector blocks. They cannot be in the root',\n          index: ruleNode.index,\n          filename:\n            ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename,\n        }\n      }\n      if (ruleNode instanceof tree.Call) {\n        throw {\n          message: `Function '${ruleNode.name}' is undefined`,\n          index: ruleNode.index,\n          filename:\n            ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename,\n        }\n      }\n      if (ruleNode.type && !ruleNode.allowRoot) {\n        throw {\n          message: `${ruleNode.type} node returned by a function is not valid here`,\n          index: ruleNode.index,\n          filename:\n            ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename,\n        }\n      }\n    }\n  },\n  visitRulesetOut(rulesetNode) {\n    this._level--\n  },\n  visitRuleset(rulesetNode, visitArgs) {\n    this._level++\n\n    //at this point rulesets are nested into each other\n    let rule\n\n    const rulesets = []\n\n    this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot)\n\n    if (!rulesetNode.root) {\n      //remove invisible paths\n      this._compileRulesetPaths(rulesetNode)\n\n      // remove rulesets from this ruleset body and compile them separately\n      const nodeRules = rulesetNode.rules\n\n      let nodeRuleCnt = nodeRules ? nodeRules.length : 0\n      for (let i = 0; i < nodeRuleCnt; ) {\n        rule = nodeRules[i]\n        if (rule && rule.rules) {\n          // visit because we are moving them out from being a child\n          rulesets.push(this._visitor.visit(rule))\n          nodeRules.splice(i, 1)\n          nodeRuleCnt--\n          continue\n        }\n        i++\n      }\n      // accept the visitor to remove rules and refactor itself\n      // then we can decide nogw whether we want it or not\n      // compile body\n      if (nodeRuleCnt > 0) {\n        rulesetNode.accept(this._visitor)\n      } else {\n        rulesetNode.rules = null\n      }\n      visitArgs.visitDeeper = false\n    } else {\n      //if (! rulesetNode.root) {\n      rulesetNode.accept(this._visitor)\n      visitArgs.visitDeeper = false\n    }\n\n    if (rulesetNode.rules) {\n      this._mergeRules(rulesetNode.rules)\n      this._removeDuplicateRules(rulesetNode.rules)\n    }\n\n    //now decide whether we keep the ruleset\n    if (this.utils.isVisibleRuleset(rulesetNode)) {\n      rulesetNode.ensureVisibility()\n      rulesets.splice(0, 0, rulesetNode)\n    }\n\n    if (rulesets.length === 1) {\n      return rulesets[0]\n    }\n    return rulesets\n  },\n\n  _compileRulesetPaths(rulesetNode) {\n    if (rulesetNode.paths) {\n      rulesetNode.paths = rulesetNode.paths.filter(p => {\n        let i\n        if (p[0].elements[0].combinator.value === ' ') {\n          p[0].elements[0].combinator = new tree.Combinator('')\n        }\n        for (i = 0; i < p.length; i++) {\n          if (p[i].isVisible() && p[i].getIsOutput()) {\n            return true\n          }\n        }\n        return false\n      })\n    }\n  },\n\n  _removeDuplicateRules(rules) {\n    if (!rules) {\n      return\n    }\n\n    // remove duplicates\n    const ruleCache = {}\n\n    let ruleList\n    let rule\n    let i\n\n    for (i = rules.length - 1; i >= 0; i--) {\n      rule = rules[i]\n      if (rule instanceof tree.Rule) {\n        if (!ruleCache[rule.name]) {\n          ruleCache[rule.name] = rule\n        } else {\n          ruleList = ruleCache[rule.name]\n          if (ruleList instanceof tree.Rule) {\n            ruleList = ruleCache[rule.name] = [\n              ruleCache[rule.name].toCSS(this._context),\n            ]\n          }\n          const ruleCSS = rule.toCSS(this._context)\n          if (ruleList.indexOf(ruleCSS) !== -1) {\n            rules.splice(i, 1)\n          } else {\n            ruleList.push(ruleCSS)\n          }\n        }\n      }\n    }\n  },\n\n  _mergeRules(rules) {\n    if (!rules) {\n      return\n    }\n\n    const groups = {}\n    let parts\n    let rule\n    let key\n\n    for (let i = 0; i < rules.length; i++) {\n      rule = rules[i]\n\n      if (rule instanceof tree.Rule && rule.merge) {\n        key = [rule.name, rule.important ? '!' : ''].join(',')\n\n        if (!groups[key]) {\n          groups[key] = []\n        } else {\n          rules.splice(i--, 1)\n        }\n\n        groups[key].push(rule)\n      }\n    }\n\n    Object.keys(groups).map(k => {\n      function toExpression(values) {\n        return new tree.Expression(values.map(p => p.value))\n      }\n\n      function toValue(values) {\n        return new tree.Value(values.map(p => p))\n      }\n\n      parts = groups[k]\n\n      if (parts.length > 1) {\n        rule = parts[0]\n        const spacedGroups = []\n        let lastSpacedGroup = []\n        parts.map(p => {\n          if (p.merge === '+') {\n            if (lastSpacedGroup.length > 0) {\n              spacedGroups.push(toExpression(lastSpacedGroup))\n            }\n            lastSpacedGroup = []\n          }\n          lastSpacedGroup.push(p)\n        })\n        spacedGroups.push(toExpression(lastSpacedGroup))\n        rule.value = toValue(spacedGroups)\n      }\n    })\n  },\n\n  visitAnonymous(anonymousNode, visitArgs) {\n    if (anonymousNode.blocksVisibility()) {\n      return\n    }\n    anonymousNode.accept(this._visitor)\n    return anonymousNode\n  },\n}\n\nmodule.exports = ToCSSVisitor\n","const visitors = {\n  Visitor: require('./visitor'),\n  ImportVisitor: require('./import-visitor'),\n  MarkVisibleSelectorsVisitor: require('./set-tree-visibility-visitor'),\n  ExtendVisitor: require('./extend-visitor'),\n  JoinSelectorVisitor: require('./join-selector-visitor'),\n  ToCSSVisitor: require('./to-css-visitor'),\n}\n\nmodule.exports = visitors\n","const contexts = require('./contexts')\nconst visitor = require('./visitors')\nconst tree = require('./tree')\n\nmodule.exports = (root, options) => {\n  options = options || {}\n  let evaldRoot\n  let variables = options.variables\n  const evalEnv = new contexts.Eval(options)\n\n  //\n  // Allows setting variables with a hash, so:\n  //\n  //   `{ color: new tree.Color('#f01') }` will become:\n  //\n  //   new tree.Rule('@color',\n  //     new tree.Value([\n  //       new tree.Expression([\n  //         new tree.Color('#f01')\n  //       ])\n  //     ])\n  //   )\n  //\n  if (typeof variables === 'object' && !Array.isArray(variables)) {\n    variables = Object.keys(variables).map(k => {\n      let value = variables[k]\n\n      if (!(value instanceof tree.Value)) {\n        if (!(value instanceof tree.Expression)) {\n          value = new tree.Expression([value])\n        }\n        value = new tree.Value([value])\n      }\n      return new tree.Rule(`@${k}`, value, false, null, 0)\n    })\n    evalEnv.frames = [new tree.Ruleset(null, variables)]\n  }\n\n  const preEvalVisitors = []\n\n  const visitors = [\n    new visitor.JoinSelectorVisitor(),\n    new visitor.MarkVisibleSelectorsVisitor(true),\n    new visitor.ExtendVisitor(),\n    new visitor.ToCSSVisitor({\n      compress: Boolean(options.compress),\n      simplify: Boolean(options.simplify),\n      simplifyLevel: Number(options.simplifyLevel || 1),\n      simplifyFilter: options.simplifyFilter,\n    }),\n  ]\n\n  let i\n\n  if (options.pluginManager) {\n    const pluginVisitors = options.pluginManager.getVisitors()\n    for (i = 0; i < pluginVisitors.length; i++) {\n      const pluginVisitor = pluginVisitors[i]\n      if (pluginVisitor.isPreEvalVisitor) {\n        preEvalVisitors.push(pluginVisitor)\n      } else {\n        if (pluginVisitor.isPreVisitor) {\n          visitors.splice(0, 0, pluginVisitor)\n        } else {\n          visitors.push(pluginVisitor)\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < preEvalVisitors.length; i++) {\n    preEvalVisitors[i].run(root)\n  }\n\n  evaldRoot = root.eval(evalEnv)\n\n  for (i = 0; i < visitors.length; i++) {\n    visitors[i].run(evaldRoot)\n  }\n\n  return evaldRoot\n}\n","const LessError = require('./less-error')\nconst transformTree = require('./transform-tree')\nconst logger = require('./logger')\n\nmodule.exports = SourceMapBuilder => {\n  class ParseTree {\n    constructor(root, imports) {\n      this.root = root\n      this.imports = imports\n    }\n\n    toCSS(options) {\n      let evaldRoot\n      const result = {}\n      let sourceMapBuilder\n      try {\n        evaldRoot = transformTree(this.root, options)\n      } catch (e) {\n        throw new LessError(e, this.imports)\n      }\n\n      try {\n        const compress = Boolean(options.compress)\n        if (compress) {\n          logger.warn(\n            'The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.'\n          )\n        }\n\n        const toCSSOptions = {\n          compress,\n          dumpLineNumbers: options.dumpLineNumbers,\n          strictUnits: Boolean(options.strictUnits),\n          numPrecision: 8,\n        }\n\n        if (options.sourceMap) {\n          sourceMapBuilder = new SourceMapBuilder(options.sourceMap)\n          result.css = sourceMapBuilder.toCSS(\n            evaldRoot,\n            toCSSOptions,\n            this.imports\n          )\n        } else {\n          result.css = evaldRoot.toCSS(toCSSOptions)\n        }\n      } catch (e) {\n        throw new LessError(e, this.imports)\n      }\n\n      if (options.pluginManager) {\n        const postProcessors = options.pluginManager.getPostProcessors()\n        for (let i = 0; i < postProcessors.length; i++) {\n          result.css = postProcessors[i].process(result.css, {\n            sourceMap: sourceMapBuilder,\n            options,\n            imports: this.imports,\n          })\n        }\n      }\n      if (options.sourceMap) {\n        result.map = sourceMapBuilder.getExternalSourceMap()\n      }\n\n      result.imports = []\n      for (const file in this.imports.files) {\n        if (\n          this.imports.files.hasOwnProperty(file) &&\n          file !== this.imports.rootFilename\n        ) {\n          result.imports.push(file)\n        }\n      }\n      return result\n    }\n  }\n\n  return ParseTree\n}\n","// Split the input into chunks.\nmodule.exports = (input, fail) => {\n  const len = input.length\n  let level = 0\n  let parenLevel = 0\n  let lastOpening\n  let lastOpeningParen\n  let lastMultiComment\n  let lastMultiCommentEndBrace\n  const chunks = []\n  let emitFrom = 0\n  let chunkerCurrentIndex\n  let currentChunkStartIndex\n  let cc\n  let cc2\n  let matched\n\n  function emitChunk(force) {\n    const len = chunkerCurrentIndex - emitFrom\n    if ((len < 512 && !force) || !len) {\n      return\n    }\n    chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1))\n    emitFrom = chunkerCurrentIndex + 1\n  }\n\n  for (\n    chunkerCurrentIndex = 0;\n    chunkerCurrentIndex < len;\n    chunkerCurrentIndex++\n  ) {\n    cc = input.charCodeAt(chunkerCurrentIndex)\n    if ((cc >= 97 && cc <= 122) || cc < 34) {\n      // a-z or whitespace\n      continue\n    }\n\n    switch (cc) {\n      case 40: // (\n        parenLevel++\n        lastOpeningParen = chunkerCurrentIndex\n        continue\n      case 41: // )\n        if (--parenLevel < 0) {\n          return fail('missing opening `(`', chunkerCurrentIndex)\n        }\n        continue\n      case 59: // ;\n        if (!parenLevel) {\n          emitChunk()\n        }\n        continue\n      case 123: // {\n        level++\n        lastOpening = chunkerCurrentIndex\n        continue\n      case 125: // }\n        if (--level < 0) {\n          return fail('missing opening `{`', chunkerCurrentIndex)\n        }\n        if (!level && !parenLevel) {\n          emitChunk()\n        }\n        continue\n      case 92: // \\\n        if (chunkerCurrentIndex < len - 1) {\n          chunkerCurrentIndex++\n          continue\n        }\n        return fail('unescaped `\\\\`', chunkerCurrentIndex)\n      case 34:\n      case 39:\n      case 96: // \", ' and `\n        matched = 0\n        currentChunkStartIndex = chunkerCurrentIndex\n        for (\n          chunkerCurrentIndex = chunkerCurrentIndex + 1;\n          chunkerCurrentIndex < len;\n          chunkerCurrentIndex++\n        ) {\n          cc2 = input.charCodeAt(chunkerCurrentIndex)\n          if (cc2 > 96) {\n            continue\n          }\n          if (cc2 == cc) {\n            matched = 1\n            break\n          }\n          if (cc2 == 92) {\n            // \\\n            if (chunkerCurrentIndex == len - 1) {\n              return fail('unescaped `\\\\`', chunkerCurrentIndex)\n            }\n            chunkerCurrentIndex++\n          }\n        }\n        if (matched) {\n          continue\n        }\n        return fail(\n          `unmatched \\`${String.fromCharCode(cc)}\\``,\n          currentChunkStartIndex\n        )\n      case 47: // /, check for comment\n        if (parenLevel || chunkerCurrentIndex == len - 1) {\n          continue\n        }\n        cc2 = input.charCodeAt(chunkerCurrentIndex + 1)\n        if (cc2 == 47) {\n          // //, find lnfeed\n          for (\n            chunkerCurrentIndex = chunkerCurrentIndex + 2;\n            chunkerCurrentIndex < len;\n            chunkerCurrentIndex++\n          ) {\n            cc2 = input.charCodeAt(chunkerCurrentIndex)\n            if (cc2 <= 13 && (cc2 == 10 || cc2 == 13)) {\n              break\n            }\n          }\n        } else if (cc2 == 42) {\n          // /*, find */\n          lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex\n          for (\n            chunkerCurrentIndex = chunkerCurrentIndex + 2;\n            chunkerCurrentIndex < len - 1;\n            chunkerCurrentIndex++\n          ) {\n            cc2 = input.charCodeAt(chunkerCurrentIndex)\n            if (cc2 == 125) {\n              lastMultiCommentEndBrace = chunkerCurrentIndex\n            }\n            if (cc2 != 42) {\n              continue\n            }\n            if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\n              break\n            }\n          }\n          if (chunkerCurrentIndex == len - 1) {\n            return fail('missing closing `*/`', currentChunkStartIndex)\n          }\n          chunkerCurrentIndex++\n        }\n        continue\n      case 42: // *, check for unmatched */\n        if (\n          chunkerCurrentIndex < len - 1 &&\n          input.charCodeAt(chunkerCurrentIndex + 1) == 47\n        ) {\n          return fail('unmatched `/*`', chunkerCurrentIndex)\n        }\n        continue\n    }\n  }\n\n  if (level !== 0) {\n    if (\n      lastMultiComment > lastOpening &&\n      lastMultiCommentEndBrace > lastMultiComment\n    ) {\n      return fail('missing closing `}` or `*/`', lastOpening)\n    } else {\n      return fail('missing closing `}`', lastOpening)\n    }\n  } else if (parenLevel !== 0) {\n    return fail('missing closing `)`', lastOpeningParen)\n  }\n\n  emitChunk(true)\n  return chunks\n}\n","const chunker = require('./chunker')\n\nmodule.exports = () => {\n  let // LeSS input string\n  input\n\n  let // current chunk\n  j\n\n  const // holds state for backtracking\n  saveStack = []\n\n  let // furthest index the parser has gone to\n  furthest\n\n  let // if this is furthest we got to, this is the probably cause\n  furthestPossibleErrorMessage\n\n  let // chunkified input\n  chunks\n\n  let // current chunk\n  current\n\n  let // index of current chunk, in `input`\n  currentPos\n\n  const parserInput = {}\n  const CHARCODE_SPACE = 32\n  const CHARCODE_TAB = 9\n  const CHARCODE_LF = 10\n  const CHARCODE_CR = 13\n  const CHARCODE_PLUS = 43\n  const CHARCODE_COMMA = 44\n  const CHARCODE_FORWARD_SLASH = 47\n  const CHARCODE_9 = 57\n\n  function skipWhitespace(length) {\n    const oldi = parserInput.i\n    const oldj = j\n    const curr = parserInput.i - currentPos\n    const endIndex = parserInput.i + current.length - curr\n    const mem = (parserInput.i += length)\n    const inp = input\n    let c\n    let nextChar\n    let comment\n\n    for (; parserInput.i < endIndex; parserInput.i++) {\n      c = inp.charCodeAt(parserInput.i)\n\n      if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n        nextChar = inp.charAt(parserInput.i + 1)\n        if (nextChar === '/') {\n          comment = { index: parserInput.i, isLineComment: true }\n          let nextNewLine = inp.indexOf('\\n', parserInput.i + 2)\n          if (nextNewLine < 0) {\n            nextNewLine = endIndex\n          }\n          parserInput.i = nextNewLine\n          comment.text = inp.substr(\n            comment.index,\n            parserInput.i - comment.index\n          )\n          parserInput.commentStore.push(comment)\n          continue\n        } else if (nextChar === '*') {\n          const nextStarSlash = inp.indexOf('*/', parserInput.i + 2)\n          if (nextStarSlash >= 0) {\n            comment = {\n              index: parserInput.i,\n              text: inp.substr(\n                parserInput.i,\n                nextStarSlash + 2 - parserInput.i\n              ),\n              isLineComment: false,\n            }\n            parserInput.i += comment.text.length - 1\n            parserInput.commentStore.push(comment)\n            continue\n          }\n        }\n        break\n      }\n\n      if (\n        c !== CHARCODE_SPACE &&\n        c !== CHARCODE_LF &&\n        c !== CHARCODE_TAB &&\n        c !== CHARCODE_CR\n      ) {\n        break\n      }\n    }\n\n    current = current.slice(length + parserInput.i - mem + curr)\n    currentPos = parserInput.i\n\n    if (!current.length) {\n      if (j < chunks.length - 1) {\n        current = chunks[++j]\n        skipWhitespace(0) // skip space at the beginning of a chunk\n        return true // things changed\n      }\n      parserInput.finished = true\n    }\n\n    return oldi !== parserInput.i || oldj !== j\n  }\n\n  parserInput.save = () => {\n    currentPos = parserInput.i\n    saveStack.push({ current, i: parserInput.i, j })\n  }\n  parserInput.restore = possibleErrorMessage => {\n    if (\n      parserInput.i > furthest ||\n      (parserInput.i === furthest &&\n        possibleErrorMessage &&\n        !furthestPossibleErrorMessage)\n    ) {\n      furthest = parserInput.i\n      furthestPossibleErrorMessage = possibleErrorMessage\n    }\n    const state = saveStack.pop()\n    current = state.current\n    currentPos = parserInput.i = state.i\n    j = state.j\n  }\n  parserInput.forget = () => {\n    saveStack.pop()\n  }\n  parserInput.isWhitespace = offset => {\n    const pos = parserInput.i + (offset || 0)\n    const code = input.charCodeAt(pos)\n    return (\n      code === CHARCODE_SPACE ||\n      code === CHARCODE_CR ||\n      code === CHARCODE_TAB ||\n      code === CHARCODE_LF\n    )\n  }\n\n  // Specialization of $(tok)\n  parserInput.$re = tok => {\n    if (parserInput.i > currentPos) {\n      current = current.slice(parserInput.i - currentPos)\n      currentPos = parserInput.i\n    }\n\n    const m = tok.exec(current)\n    if (!m) {\n      return null\n    }\n\n    skipWhitespace(m[0].length)\n    if (typeof m === 'string') {\n      return m\n    }\n\n    return m.length === 1 ? m[0] : m\n  }\n\n  parserInput.$char = tok => {\n    if (input.charAt(parserInput.i) !== tok) {\n      return null\n    }\n    skipWhitespace(1)\n    return tok\n  }\n\n  parserInput.$str = tok => {\n    const tokLength = tok.length\n\n    // https://jsperf.com/string-startswith/21\n    for (let i = 0; i < tokLength; i++) {\n      if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n        return null\n      }\n    }\n\n    skipWhitespace(tokLength)\n    return tok\n  }\n\n  parserInput.$quoted = () => {\n    const startChar = input.charAt(parserInput.i)\n    if (startChar !== \"'\" && startChar !== '\"') {\n      return\n    }\n    const length = input.length\n    const currentPosition = parserInput.i\n\n    for (let i = 1; i + currentPosition < length; i++) {\n      const nextChar = input.charAt(i + currentPosition)\n      switch (nextChar) {\n        case '\\\\':\n          i++\n          continue\n        case '\\r':\n        case '\\n':\n          break\n        case startChar:\n          const str = input.substr(currentPosition, i + 1)\n          skipWhitespace(i + 1)\n          return str\n        default:\n      }\n    }\n    return null\n  }\n\n  parserInput.autoCommentAbsorb = true\n  parserInput.commentStore = []\n  parserInput.finished = false\n\n  // Same as $(), but don't change the state of the parser,\n  // just return the match.\n  parserInput.peek = tok => {\n    if (typeof tok === 'string') {\n      // https://jsperf.com/string-startswith/21\n      for (let i = 0; i < tok.length; i++) {\n        if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n          return false\n        }\n      }\n      return true\n    } else {\n      return tok.test(current)\n    }\n  }\n\n  // Specialization of peek()\n  // TODO remove or change some currentChar calls to peekChar\n  parserInput.peekChar = tok => input.charAt(parserInput.i) === tok\n\n  parserInput.currentChar = () => input.charAt(parserInput.i)\n\n  parserInput.getInput = () => input\n\n  parserInput.peekNotNumeric = () => {\n    const c = input.charCodeAt(parserInput.i)\n    //Is the first char of the dimension 0-9, '.', '+' or '-'\n    return (\n      c > CHARCODE_9 ||\n      c < CHARCODE_PLUS ||\n      c === CHARCODE_FORWARD_SLASH ||\n      c === CHARCODE_COMMA\n    )\n  }\n\n  parserInput.start = (str, chunkInput, failFunction) => {\n    input = str\n    parserInput.i = j = currentPos = furthest = 0\n\n    // chunking apparently makes things quicker (but my tests indicate\n    // it might actually make things slower in node at least)\n    // and it is a non-perfect parse - it can't recognise\n    // unquoted urls, meaning it can't distinguish comments\n    // meaning comments with quotes or {}() in them get 'counted'\n    // and then lead to parse errors.\n    // In addition if the chunking chunks in the wrong place we might\n    // not be able to parse a parser statement in one go\n    // this is officially deprecated but can be switched on via an option\n    // in the case it causes too much performance issues.\n    if (chunkInput) {\n      chunks = chunker(str, failFunction)\n    } else {\n      chunks = [str]\n    }\n\n    current = chunks[0]\n\n    skipWhitespace(0)\n  }\n\n  parserInput.end = () => {\n    let message\n    const isFinished = parserInput.i >= input.length\n\n    if (parserInput.i < furthest) {\n      message = furthestPossibleErrorMessage\n      parserInput.i = furthest\n    }\n    return {\n      isFinished,\n      furthest: parserInput.i,\n      furthestPossibleErrorMessage: message,\n      furthestReachedEnd: parserInput.i >= input.length - 1,\n      furthestChar: input[parserInput.i],\n    }\n  }\n\n  return parserInput\n}\n","const LessError = require('../less-error')\nconst tree = require('../tree')\nconst visitors = require('../visitors')\nconst getParserInput = require('./parser-input')\nconst utils = require('../utils')\n\n//\n// less.js - parser\n//\n//    A relatively straight-forward predictive parser.\n//    There is no tokenization/lexing stage, the input is parsed\n//    in one sweep.\n//\n//    To make the parser fast enough to run in the browser, several\n//    optimization had to be made:\n//\n//    - Matching and slicing on a huge input is often cause of slowdowns.\n//      The solution is to chunkify the input into smaller strings.\n//      The chunks are stored in the `chunks` var,\n//      `j` holds the current chunk index, and `currentPos` holds\n//      the index of the current chunk in relation to `input`.\n//      This gives us an almost 4x speed-up.\n//\n//    - In many cases, we don't need to match individual tokens;\n//      for example, if a value doesn't hold any variables, operations\n//      or dynamic references, the parser can effectively 'skip' it,\n//      treating it as a literal.\n//      An example would be '1px solid #000' - which evaluates to itself,\n//      we don't need to know what the individual components are.\n//      The drawback, of course is that you don't get the benefits of\n//      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n//      and a smaller speed-up in the code-gen.\n//\n//\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\n//`\n//\nconst Parser = function Parser(context, imports, fileInfo) {\n  let parsers\n  const parserInput = getParserInput()\n\n  function error(msg, type) {\n    throw new LessError(\n      {\n        index: parserInput.i,\n        filename: fileInfo.filename,\n        type: type || 'Syntax',\n        message: msg,\n      },\n      imports\n    )\n  }\n\n  function expect(arg, msg, index) {\n    // some older browsers return typeof 'function' for RegExp\n    const result =\n      arg instanceof Function ? arg.call(parsers) : parserInput.$re(arg)\n    if (result) {\n      return result\n    }\n    error(\n      msg ||\n        (typeof arg === 'string'\n          ? `expected '${arg}' got '${parserInput.currentChar()}'`\n          : 'unexpected token')\n    )\n  }\n\n  // Specialization of expect()\n  function expectChar(arg, msg) {\n    if (parserInput.$char(arg)) {\n      return arg\n    }\n    error(msg || `expected '${arg}' got '${parserInput.currentChar()}'`)\n  }\n\n  function getDebugInfo(index) {\n    const filename = fileInfo.filename\n\n    return {\n      lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,\n      fileName: filename,\n    }\n  }\n\n  //\n  // The Parser\n  //\n  return {\n    //\n    // Parse an input string into an abstract syntax tree,\n    // @param str A string containing 'less' markup\n    // @param callback call `callback` when done.\n    // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n    //\n    parse(str, callback, additionalData) {\n      let root\n      let error = null\n      let globalVars\n      let modifyVars\n      let ignored\n      let preText = ''\n\n      globalVars =\n        additionalData && additionalData.globalVars\n          ? `${Parser.serializeVars(additionalData.globalVars)}\\n`\n          : ''\n      modifyVars =\n        additionalData && additionalData.modifyVars\n          ? `\\n${Parser.serializeVars(additionalData.modifyVars)}`\n          : ''\n\n      if (context.pluginManager) {\n        const preProcessors = context.pluginManager.getPreProcessors()\n        for (let i = 0; i < preProcessors.length; i++) {\n          str = preProcessors[i].process(str, { context, imports, fileInfo })\n        }\n      }\n\n      if (globalVars || (additionalData && additionalData.banner)) {\n        preText =\n          (additionalData && additionalData.banner\n            ? additionalData.banner\n            : '') + globalVars\n        ignored = imports.contentsIgnoredChars\n        ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0\n        ignored[fileInfo.filename] += preText.length\n      }\n\n      str = str.replace(/\\r\\n?/g, '\\n')\n      // Remove potential UTF Byte Order Mark\n      str = preText + str.replace(/^\\uFEFF/, '') + modifyVars\n      imports.contents[fileInfo.filename] = str\n\n      // Start with the primary rule.\n      // The whole syntax tree is held under a Ruleset node,\n      // with the `root` property set to true, so no `{}` are\n      // output. The callback is called when the input is parsed.\n      try {\n        parserInput.start(str, context.chunkInput, function fail(msg, index) {\n          throw new LessError(\n            {\n              index,\n              type: 'Parse',\n              message: msg,\n              filename: fileInfo.filename,\n            },\n            imports\n          )\n        })\n\n        root = new tree.Ruleset(null, this.parsers.primary())\n        root.root = true\n        root.firstRoot = true\n      } catch (e) {\n        return callback(new LessError(e, imports, fileInfo.filename))\n      }\n\n      // If `i` is smaller than the `input.length - 1`,\n      // it means the parser wasn't able to parse the whole\n      // string, so we've got a parsing error.\n      //\n      // We try to extract a \\n delimited string,\n      // showing the line where the parse error occurred.\n      // We split it up into two parts (the part which parsed,\n      // and the part which didn't), so we can color them differently.\n      const endInfo = parserInput.end()\n      if (!endInfo.isFinished) {\n        let message = endInfo.furthestPossibleErrorMessage\n\n        if (!message) {\n          message = 'Unrecognised input'\n          if (endInfo.furthestChar === '}') {\n            message += \". Possibly missing opening '{'\"\n          } else if (endInfo.furthestChar === ')') {\n            message += \". Possibly missing opening '('\"\n          } else if (endInfo.furthestReachedEnd) {\n            message += '. Possibly missing something'\n          }\n        }\n\n        error = new LessError(\n          {\n            type: 'Parse',\n            message,\n            index: endInfo.furthest,\n            filename: fileInfo.filename,\n          },\n          imports\n        )\n      }\n\n      const finish = e => {\n        e = error || e || imports.error\n\n        if (e) {\n          if (!(e instanceof LessError)) {\n            e = new LessError(e, imports, fileInfo.filename)\n          }\n\n          return callback(e)\n        } else {\n          return callback(null, root)\n        }\n      }\n\n      if (context.processImports !== false) {\n        new visitors.ImportVisitor(imports, finish).run(root)\n      } else {\n        return finish()\n      }\n    },\n\n    //\n    // Here in, the parsing rules/functions\n    //\n    // The basic structure of the syntax tree generated is as follows:\n    //\n    //   Ruleset ->  Rule -> Value -> Expression -> Entity\n    //\n    // Here's some Less code:\n    //\n    //    .class {\n    //      color: #fff;\n    //      border: 1px solid #000;\n    //      width: @w + 4px;\n    //      > .child {...}\n    //    }\n    //\n    // And here's what the parse tree might look like:\n    //\n    //     Ruleset (Selector '.class', [\n    //         Rule (\"color\",  Value ([Expression [Color #fff]]))\n    //         Rule (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n    //         Rule (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n    //         Ruleset (Selector [Element '>', '.child'], [...])\n    //     ])\n    //\n    //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n    //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n    //  first, before parsing, that's when we use `peek()`.\n    //\n    parsers: (parsers = {\n      //\n      // The `primary` rule is the *entry* and *exit* point of the parser.\n      // The rules here can appear at any level of the parse tree.\n      //\n      // The recursive nature of the grammar is an interplay between the `block`\n      // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n      // as represented by this simplified grammar:\n      //\n      //     primary  →  (ruleset | rule)+\n      //     ruleset  →  selector+ block\n      //     block    →  '{' primary '}'\n      //\n      // Only at one point is the primary rule not called from the\n      // block rule: at the root level.\n      //\n      primary() {\n        const mixin = this.mixin\n        let root = []\n        let node\n\n        while (true) {\n          while (true) {\n            node = this.comment()\n            if (!node) {\n              break\n            }\n            root.push(node)\n          }\n          // always process comments before deciding if finished\n          if (parserInput.finished) {\n            break\n          }\n          if (parserInput.peek('}')) {\n            break\n          }\n\n          node = this.extendRule()\n          if (node) {\n            root = root.concat(node)\n            continue\n          }\n\n          node =\n            mixin.definition() ||\n            this.rule() ||\n            this.ruleset() ||\n            mixin.call() ||\n            this.rulesetCall() ||\n            this.entities.call() ||\n            this.directive()\n          if (node) {\n            root.push(node)\n          } else {\n            let foundSemiColon = false\n            while (parserInput.$char(';')) {\n              foundSemiColon = true\n            }\n            if (!foundSemiColon) {\n              break\n            }\n          }\n        }\n\n        return root\n      },\n\n      // comments are collected by the main parsing mechanism and then assigned to nodes\n      // where the current structure allows it\n      comment() {\n        if (parserInput.commentStore.length) {\n          const comment = parserInput.commentStore.shift()\n          return new tree.Comment(\n            comment.text,\n            comment.isLineComment,\n            comment.index,\n            fileInfo\n          )\n        }\n      },\n\n      //\n      // Entities are tokens which can be found inside an Expression\n      //\n      entities: {\n        //\n        // A string, which supports escaping \" and '\n        //\n        //     \"milky way\" 'he\\'s the one!'\n        //\n        quoted() {\n          let str\n          const index = parserInput.i\n          let isEscaped = false\n\n          parserInput.save()\n          if (parserInput.$char('~')) {\n            isEscaped = true\n          }\n          str = parserInput.$quoted()\n          if (!str) {\n            parserInput.restore()\n            return\n          }\n          parserInput.forget()\n\n          return new tree.Quoted(\n            str.charAt(0),\n            str.substr(1, str.length - 2),\n            isEscaped,\n            index,\n            fileInfo\n          )\n        },\n\n        //\n        // A catch-all word, such as:\n        //\n        //     black border-collapse\n        //\n        keyword() {\n          const k =\n            parserInput.$char('%') ||\n            parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]*/)\n          if (k) {\n            return tree.Color.fromKeyword(k) || new tree.Keyword(k)\n          }\n        },\n\n        //\n        // A function call\n        //\n        //     rgb(255, 0, 255)\n        //\n        // We also try to catch IE's `alpha()`, but let the `alpha` parser\n        // deal with the details.\n        //\n        // The arguments are parsed with the `entities.arguments` parser.\n        //\n        call() {\n          let name\n          let nameLC\n          let args\n          let alpha\n          const index = parserInput.i\n\n          // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n          if (parserInput.peek(/^url\\(/i)) {\n            return\n          }\n\n          parserInput.save()\n\n          name = parserInput.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/)\n          if (!name) {\n            parserInput.forget()\n            return\n          }\n\n          name = name[1]\n          nameLC = name.toLowerCase()\n\n          if (nameLC === 'alpha') {\n            alpha = parsers.alpha()\n            if (alpha) {\n              parserInput.forget()\n              return alpha\n            }\n          }\n\n          args = this.arguments()\n\n          if (!parserInput.$char(')')) {\n            parserInput.restore(\"Could not parse call arguments or missing ')'\")\n            return\n          }\n\n          parserInput.forget()\n          return new tree.Call(name, args, index, fileInfo)\n        },\n        arguments() {\n          const argsSemiColon = []\n          const argsComma = []\n          let expressions = []\n          let isSemiColonSeparated\n          let value\n          let arg\n\n          parserInput.save()\n\n          while (true) {\n            arg =\n              parsers.detachedRuleset() ||\n              this.assignment() ||\n              parsers.expression()\n\n            if (!arg) {\n              break\n            }\n\n            value = arg\n\n            if (arg.value && arg.value.length == 1) {\n              value = arg.value[0]\n            }\n\n            if (value) {\n              expressions.push(value)\n            }\n\n            argsComma.push(value)\n\n            if (parserInput.$char(',')) {\n              continue\n            }\n\n            if (parserInput.$char(';') || isSemiColonSeparated) {\n              isSemiColonSeparated = true\n\n              if (expressions.length > 1) {\n                value = new tree.Value(expressions)\n              }\n              argsSemiColon.push(value)\n\n              expressions = []\n            }\n          }\n\n          parserInput.forget()\n          return isSemiColonSeparated ? argsSemiColon : argsComma\n        },\n        literal() {\n          return (\n            this.dimension() ||\n            this.color() ||\n            this.quoted() ||\n            this.unicodeDescriptor()\n          )\n        },\n\n        // Assignments are argument entities for calls.\n        // They are present in ie filter properties as shown below.\n        //\n        //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n        //\n\n        assignment() {\n          let key\n          let value\n          parserInput.save()\n          key = parserInput.$re(/^\\w+(?=\\s?=)/i)\n          if (!key) {\n            parserInput.restore()\n            return\n          }\n          if (!parserInput.$char('=')) {\n            parserInput.restore()\n            return\n          }\n          value = parsers.entity()\n          if (value) {\n            parserInput.forget()\n            return new tree.Assignment(key, value)\n          } else {\n            parserInput.restore()\n          }\n        },\n\n        //\n        // Parse url() tokens\n        //\n        // We use a specific rule for urls, because they don't really behave like\n        // standard function calls. The difference is that the argument doesn't have\n        // to be enclosed within a string, so it can't be parsed as an Expression.\n        //\n        url() {\n          let value\n          const index = parserInput.i\n\n          parserInput.autoCommentAbsorb = false\n\n          if (!parserInput.$str('url(')) {\n            parserInput.autoCommentAbsorb = true\n            return\n          }\n\n          value =\n            this.quoted() ||\n            this.variable() ||\n            parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) ||\n            ''\n\n          parserInput.autoCommentAbsorb = true\n\n          expectChar(')')\n\n          return new tree.URL(\n            value.value != null || value instanceof tree.Variable\n              ? value\n              : new tree.Anonymous(value),\n            index,\n            fileInfo\n          )\n        },\n\n        //\n        // A Variable entity, such as `@fink`, in\n        //\n        //     width: @fink + 2px\n        //\n        // We use a different parser for variable definitions,\n        // see `parsers.variable`.\n        //\n        variable() {\n          let name\n          const index = parserInput.i\n\n          if (\n            parserInput.currentChar() === '@' &&\n            (name = parserInput.$re(/^@@?[\\w-]+/))\n          ) {\n            return new tree.Variable(name, index, fileInfo)\n          }\n        },\n\n        // A variable entity using the protective {} e.g. @{var}\n        variableCurly() {\n          let curly\n          const index = parserInput.i\n\n          if (\n            parserInput.currentChar() === '@' &&\n            (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))\n          ) {\n            return new tree.Variable(`@${curly[1]}`, index, fileInfo)\n          }\n        },\n\n        //\n        // A Hexadecimal color\n        //\n        //     #4F3C2F\n        //\n        // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n        //\n        color() {\n          let rgb\n\n          if (\n            parserInput.currentChar() === '#' &&\n            (rgb = parserInput.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))\n          ) {\n            // strip colons, brackets, whitespaces and other characters that should not\n            // definitely be part of color string\n            let colorCandidateString = rgb.input.match(/^#([\\w]+).*/)\n            colorCandidateString = colorCandidateString[1]\n            if (!colorCandidateString.match(/^[A-Fa-f0-9]+$/)) {\n              // verify if candidate consists only of allowed HEX characters\n              error('Invalid HEX color code')\n            }\n            return new tree.Color(rgb[1], undefined, `#${colorCandidateString}`)\n          }\n        },\n\n        colorKeyword() {\n          parserInput.save()\n          const autoCommentAbsorb = parserInput.autoCommentAbsorb\n          parserInput.autoCommentAbsorb = false\n          const k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/)\n          parserInput.autoCommentAbsorb = autoCommentAbsorb\n          if (!k) {\n            parserInput.forget()\n            return\n          }\n          parserInput.restore()\n          const color = tree.Color.fromKeyword(k)\n          if (color) {\n            parserInput.$str(k)\n            return color\n          }\n        },\n\n        //\n        // A Dimension, that is, a number and a unit\n        //\n        //     0.5em 95%\n        //\n        dimension() {\n          if (parserInput.peekNotNumeric()) {\n            return\n          }\n\n          const value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i)\n          if (value) {\n            return new tree.Dimension(value[1], value[2])\n          }\n        },\n\n        //\n        // A unicode descriptor, as is used in unicode-range\n        //\n        // U+0??  or U+00A1-00A9\n        //\n        unicodeDescriptor() {\n          let ud\n\n          ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/)\n          if (ud) {\n            return new tree.UnicodeDescriptor(ud[0])\n          }\n        },\n\n        //\n        // JavaScript code to be evaluated\n        //\n        //     `window.location.href`\n        //\n        javascript() {\n          let js\n          const index = parserInput.i\n\n          parserInput.save()\n\n          const escape = parserInput.$char('~')\n          const jsQuote = parserInput.$char('`')\n\n          if (!jsQuote) {\n            parserInput.restore()\n            return\n          }\n\n          js = parserInput.$re(/^[^`]*`/)\n          if (js) {\n            parserInput.forget()\n            return new tree.JavaScript(\n              js.substr(0, js.length - 1),\n              Boolean(escape),\n              index,\n              fileInfo\n            )\n          }\n          parserInput.restore('invalid javascript definition')\n        },\n      },\n\n      //\n      // The variable part of a variable definition. Used in the `rule` parser\n      //\n      //     @fink:\n      //\n      variable() {\n        let name\n\n        if (\n          parserInput.currentChar() === '@' &&\n          (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))\n        ) {\n          return name[1]\n        }\n      },\n\n      //\n      // The variable part of a variable definition. Used in the `rule` parser\n      //\n      //     @fink();\n      //\n      rulesetCall() {\n        let name\n\n        if (\n          parserInput.currentChar() === '@' &&\n          (name = parserInput.$re(/^(@[\\w-]+)\\(\\s*\\)\\s*;/))\n        ) {\n          return new tree.RulesetCall(name[1])\n        }\n      },\n\n      //\n      // extend syntax - used to extend selectors\n      //\n      extend(isRule) {\n        let elements\n        let e\n        const index = parserInput.i\n        let option\n        let extendList\n        let extend\n\n        if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\n          return\n        }\n\n        do {\n          option = null\n          elements = null\n          while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n            e = this.element()\n            if (!e) {\n              break\n            }\n            if (elements) {\n              elements.push(e)\n            } else {\n              elements = [e]\n            }\n          }\n\n          option = option && option[1]\n          if (!elements) {\n            error('Missing target selector for :extend().')\n          }\n          extend = new tree.Extend(\n            new tree.Selector(elements),\n            option,\n            index,\n            fileInfo\n          )\n          if (extendList) {\n            extendList.push(extend)\n          } else {\n            extendList = [extend]\n          }\n        } while (parserInput.$char(','))\n\n        expect(/^\\)/)\n\n        if (isRule) {\n          expect(/^;/)\n        }\n\n        return extendList\n      },\n\n      //\n      // extendRule - used in a rule to extend all the parent selectors\n      //\n      extendRule() {\n        return this.extend(true)\n      },\n\n      //\n      // Mixins\n      //\n      mixin: {\n        //\n        // A Mixin call, with an optional argument list\n        //\n        //     #mixins > .square(#fff);\n        //     .rounded(4px, black);\n        //     .button;\n        //\n        // The `while` loop is there because mixins can be\n        // namespaced, but we only support the child and descendant\n        // selector for now.\n        //\n        call() {\n          const s = parserInput.currentChar()\n          let important = false\n          const index = parserInput.i\n          let elemIndex\n          let elements\n          let elem\n          let e\n          let c\n          let args\n\n          if (s !== '.' && s !== '#') {\n            return\n          }\n\n          parserInput.save() // stop us absorbing part of an invalid selector\n\n          while (true) {\n            elemIndex = parserInput.i\n            e = parserInput.$re(\n              /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/\n            )\n            if (!e) {\n              break\n            }\n            elem = new tree.Element(c, e, elemIndex, fileInfo)\n            if (elements) {\n              elements.push(elem)\n            } else {\n              elements = [elem]\n            }\n            c = parserInput.$char('>')\n          }\n\n          if (elements) {\n            if (parserInput.$char('(')) {\n              args = this.args(true).args\n              expectChar(')')\n            }\n\n            if (parsers.important()) {\n              important = true\n            }\n\n            if (parsers.end()) {\n              parserInput.forget()\n              return new tree.mixin.Call(\n                elements,\n                args,\n                index,\n                fileInfo,\n                important\n              )\n            }\n          }\n\n          parserInput.restore()\n        },\n        args(isCall) {\n          const entities = parsers.entities\n          const returner = { args: null, variadic: false }\n          let expressions = []\n          const argsSemiColon = []\n          const argsComma = []\n          let isSemiColonSeparated\n          let expressionContainsNamed\n          let name\n          let nameLoop\n          let value\n          let arg\n          let expand\n\n          parserInput.save()\n\n          while (true) {\n            if (isCall) {\n              arg = parsers.detachedRuleset() || parsers.expression()\n            } else {\n              parserInput.commentStore.length = 0\n              if (parserInput.$str('...')) {\n                returner.variadic = true\n                if (parserInput.$char(';') && !isSemiColonSeparated) {\n                  isSemiColonSeparated = true\n                }\n                ;(isSemiColonSeparated ? argsSemiColon : argsComma).push({\n                  variadic: true,\n                })\n                break\n              }\n              arg =\n                entities.variable() || entities.literal() || entities.keyword()\n            }\n\n            if (!arg) {\n              break\n            }\n\n            nameLoop = null\n            if (arg.throwAwayComments) {\n              arg.throwAwayComments()\n            }\n            value = arg\n            let val = null\n\n            if (isCall) {\n              // Variable\n              if (arg.value && arg.value.length == 1) {\n                val = arg.value[0]\n              }\n            } else {\n              val = arg\n            }\n\n            if (val && val instanceof tree.Variable) {\n              if (parserInput.$char(':')) {\n                if (expressions.length > 0) {\n                  if (isSemiColonSeparated) {\n                    error('Cannot mix ; and , as delimiter types')\n                  }\n                  expressionContainsNamed = true\n                }\n\n                value = parsers.detachedRuleset() || parsers.expression()\n\n                if (!value) {\n                  if (isCall) {\n                    error('could not understand value for named argument')\n                  } else {\n                    parserInput.restore()\n                    returner.args = []\n                    return returner\n                  }\n                }\n                nameLoop = name = val.name\n              } else if (parserInput.$str('...')) {\n                if (!isCall) {\n                  returner.variadic = true\n                  if (parserInput.$char(';') && !isSemiColonSeparated) {\n                    isSemiColonSeparated = true\n                  }\n                  ;(isSemiColonSeparated ? argsSemiColon : argsComma).push({\n                    name: arg.name,\n                    variadic: true,\n                  })\n                  break\n                } else {\n                  expand = true\n                }\n              } else if (!isCall) {\n                name = nameLoop = val.name\n                value = null\n              }\n            }\n\n            if (value) {\n              expressions.push(value)\n            }\n\n            argsComma.push({ name: nameLoop, value, expand })\n\n            if (parserInput.$char(',')) {\n              continue\n            }\n\n            if (parserInput.$char(';') || isSemiColonSeparated) {\n              if (expressionContainsNamed) {\n                error('Cannot mix ; and , as delimiter types')\n              }\n\n              isSemiColonSeparated = true\n\n              if (expressions.length > 1) {\n                value = new tree.Value(expressions)\n              }\n              argsSemiColon.push({ name, value, expand })\n\n              name = null\n              expressions = []\n              expressionContainsNamed = false\n            }\n          }\n\n          parserInput.forget()\n          returner.args = isSemiColonSeparated ? argsSemiColon : argsComma\n          return returner\n        },\n        //\n        // A Mixin definition, with a list of parameters\n        //\n        //     .rounded (@radius: 2px, @color) {\n        //        ...\n        //     }\n        //\n        // Until we have a finer grained state-machine, we have to\n        // do a look-ahead, to make sure we don't have a mixin call.\n        // See the `rule` function for more information.\n        //\n        // We start by matching `.rounded (`, and then proceed on to\n        // the argument list, which has optional default values.\n        // We store the parameters in `params`, with a `value` key,\n        // if there is a value, such as in the case of `@radius`.\n        //\n        // Once we've got our params list, and a closing `)`, we parse\n        // the `{...}` block.\n        //\n        definition() {\n          let name\n          let params = []\n          let match\n          let ruleset\n          let cond\n          let variadic = false\n          if (\n            (parserInput.currentChar() !== '.' &&\n              parserInput.currentChar() !== '#') ||\n            parserInput.peek(/^[^{]*\\}/)\n          ) {\n            return\n          }\n\n          parserInput.save()\n\n          match = parserInput.$re(\n            /^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/\n          )\n          if (match) {\n            name = match[1]\n\n            const argInfo = this.args(false)\n            params = argInfo.args\n            variadic = argInfo.variadic\n\n            // .mixincall(\"@{a}\");\n            // looks a bit like a mixin definition..\n            // also\n            // .mixincall(@a: {rule: set;});\n            // so we have to be nice and restore\n            if (!parserInput.$char(')')) {\n              parserInput.restore(\"Missing closing ')'\")\n              return\n            }\n\n            parserInput.commentStore.length = 0\n\n            if (parserInput.$str('when')) {\n              // Guard\n              cond = expect(parsers.conditions, 'expected condition')\n            }\n\n            ruleset = parsers.block()\n\n            if (ruleset) {\n              parserInput.forget()\n              return new tree.mixin.Definition(\n                name,\n                params,\n                ruleset,\n                cond,\n                variadic\n              )\n            } else {\n              parserInput.restore()\n            }\n          } else {\n            parserInput.forget()\n          }\n        },\n      },\n\n      //\n      // Entities are the smallest recognized token,\n      // and can be found inside a rule's value.\n      //\n      entity() {\n        const entities = this.entities\n\n        return (\n          this.comment() ||\n          entities.literal() ||\n          entities.variable() ||\n          entities.url() ||\n          entities.call() ||\n          entities.keyword() ||\n          entities.javascript()\n        )\n      },\n\n      //\n      // A Rule terminator. Note that we use `peek()` to check for '}',\n      // because the `block` rule will be expecting it, but we still need to make sure\n      // it's there, if ';' was omitted.\n      //\n      end() {\n        return parserInput.$char(';') || parserInput.peek('}')\n      },\n\n      //\n      // IE's alpha function\n      //\n      //     alpha(opacity=88)\n      //\n      alpha() {\n        let value\n\n        // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n        if (!parserInput.$re(/^opacity=/i)) {\n          return\n        }\n        value = parserInput.$re(/^\\d+/)\n        if (!value) {\n          value = expect(this.entities.variable, 'Could not parse alpha')\n        }\n        expectChar(')')\n        return new tree.Alpha(value)\n      },\n\n      //\n      // A Selector Element\n      //\n      //     div\n      //     + h1\n      //     #socks\n      //     input[type=\"text\"]\n      //\n      // Elements are the building blocks for Selectors,\n      // they are made out of a `Combinator` (see combinator rule),\n      // and an element name, such as a tag a class, or `*`.\n      //\n      element() {\n        let e\n        let c\n        let v\n        const index = parserInput.i\n\n        c = this.combinator()\n\n        e =\n          parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\n          parserInput.$re(\n            /^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/\n          ) ||\n          parserInput.$char('*') ||\n          parserInput.$char('&') ||\n          this.attribute() ||\n          parserInput.$re(/^\\([^&()@]+\\)/) ||\n          parserInput.$re(/^[\\.#:](?=@)/) ||\n          this.entities.variableCurly()\n\n        if (!e) {\n          parserInput.save()\n          if (parserInput.$char('(')) {\n            if ((v = this.selector()) && parserInput.$char(')')) {\n              e = new tree.Paren(v)\n              parserInput.forget()\n            } else {\n              parserInput.restore(\"Missing closing ')'\")\n            }\n          } else {\n            parserInput.forget()\n          }\n        }\n\n        if (e) {\n          return new tree.Element(c, e, index, fileInfo)\n        }\n      },\n\n      //\n      // Combinators combine elements together, in a Selector.\n      //\n      // Because our parser isn't white-space sensitive, special care\n      // has to be taken, when parsing the descendant combinator, ` `,\n      // as it's an empty space. We have to check the previous character\n      // in the input, to see if it's a ` ` character. More info on how\n      // we deal with this in *combinator.js*.\n      //\n      combinator() {\n        let c = parserInput.currentChar()\n\n        if (c === '/') {\n          parserInput.save()\n          const slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i)\n          if (slashedCombinator) {\n            parserInput.forget()\n            return new tree.Combinator(slashedCombinator)\n          }\n          parserInput.restore()\n        }\n\n        if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n          parserInput.i++\n          if (c === '^' && parserInput.currentChar() === '^') {\n            c = '^^'\n            parserInput.i++\n          }\n          while (parserInput.isWhitespace()) {\n            parserInput.i++\n          }\n          return new tree.Combinator(c)\n        } else if (parserInput.isWhitespace(-1)) {\n          return new tree.Combinator(' ')\n        } else {\n          return new tree.Combinator(null)\n        }\n      },\n      //\n      // A CSS selector (see selector below)\n      // with less extensions e.g. the ability to extend and guard\n      //\n      lessSelector() {\n        return this.selector(true)\n      },\n      //\n      // A CSS Selector\n      //\n      //     .class > div + h1\n      //     li a:hover\n      //\n      // Selectors are made out of one or more Elements, see above.\n      //\n      selector(isLess) {\n        const index = parserInput.i\n        let elements\n        let extendList\n        let c\n        let e\n        let allExtends\n        let when\n        let condition\n\n        while (\n          (isLess && (extendList = this.extend())) ||\n          (isLess && (when = parserInput.$str('when'))) ||\n          (e = this.element())\n        ) {\n          if (when) {\n            condition = expect(this.conditions, 'expected condition')\n          } else if (condition) {\n            error('CSS guard can only be used at the end of selector')\n          } else if (extendList) {\n            if (allExtends) {\n              allExtends = allExtends.concat(extendList)\n            } else {\n              allExtends = extendList\n            }\n          } else {\n            if (allExtends) {\n              error('Extend can only be used at the end of selector')\n            }\n            c = parserInput.currentChar()\n            if (elements) {\n              elements.push(e)\n            } else {\n              elements = [e]\n            }\n            e = null\n          }\n          if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n            break\n          }\n        }\n\n        if (elements) {\n          return new tree.Selector(\n            elements,\n            allExtends,\n            condition,\n            index,\n            fileInfo\n          )\n        }\n        if (allExtends) {\n          error(\n            'Extend must be used to extend a selector, it cannot be used on its own'\n          )\n        }\n      },\n      attribute() {\n        if (!parserInput.$char('[')) {\n          return\n        }\n\n        const entities = this.entities\n        let key\n        let val\n        let op\n\n        if (!(key = entities.variableCurly())) {\n          key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/)\n        }\n\n        op = parserInput.$re(/^[|~*$^]?=/)\n        if (op) {\n          val =\n            entities.quoted() ||\n            parserInput.$re(/^[0-9]+%/) ||\n            parserInput.$re(/^[\\w-]+/) ||\n            entities.variableCurly()\n        }\n\n        expectChar(']')\n\n        return new tree.Attribute(key, op, val)\n      },\n\n      //\n      // The `block` rule is used by `ruleset` and `mixin.definition`.\n      // It's a wrapper around the `primary` rule, with added `{}`.\n      //\n      block() {\n        let content\n        if (\n          parserInput.$char('{') &&\n          (content = this.primary()) &&\n          parserInput.$char('}')\n        ) {\n          return content\n        }\n      },\n\n      blockRuleset() {\n        let block = this.block()\n\n        if (block) {\n          block = new tree.Ruleset(null, block)\n        }\n        return block\n      },\n\n      detachedRuleset() {\n        const blockRuleset = this.blockRuleset()\n        if (blockRuleset) {\n          return new tree.DetachedRuleset(blockRuleset)\n        }\n      },\n\n      //\n      // div, .class, body > p {...}\n      //\n      ruleset() {\n        let selectors\n        let s\n        let rules\n        let debugInfo\n\n        parserInput.save()\n\n        if (context.dumpLineNumbers) {\n          debugInfo = getDebugInfo(parserInput.i)\n        }\n\n        while (true) {\n          s = this.lessSelector()\n          if (!s) {\n            break\n          }\n          if (selectors) {\n            selectors.push(s)\n          } else {\n            selectors = [s]\n          }\n          parserInput.commentStore.length = 0\n          if (s.condition && selectors.length > 1) {\n            error('Guards are only currently allowed on a single selector.')\n          }\n          if (!parserInput.$char(',')) {\n            break\n          }\n          if (s.condition) {\n            error('Guards are only currently allowed on a single selector.')\n          }\n          parserInput.commentStore.length = 0\n        }\n\n        if (selectors && (rules = this.block())) {\n          parserInput.forget()\n          const ruleset = new tree.Ruleset(\n            selectors,\n            rules,\n            context.strictImports\n          )\n          if (context.dumpLineNumbers) {\n            ruleset.debugInfo = debugInfo\n          }\n          return ruleset\n        } else {\n          parserInput.restore()\n        }\n      },\n      rule(tryAnonymous) {\n        let name\n        let value\n        const startOfRule = parserInput.i\n        const c = parserInput.currentChar()\n        let important\n        let merge\n        let isVariable\n\n        if (c === '.' || c === '#' || c === '&' || c === ':') {\n          return\n        }\n\n        parserInput.save()\n\n        name = this.variable() || this.ruleProperty()\n        if (name) {\n          isVariable = typeof name === 'string'\n\n          if (isVariable) {\n            value = this.detachedRuleset()\n          }\n\n          parserInput.commentStore.length = 0\n          if (!value) {\n            // a name returned by this.ruleProperty() is always an array of the form:\n            // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n            // where each item is a tree.Keyword or tree.Variable\n            merge = !isVariable && name.length > 1 && name.pop().value\n\n            // prefer to try to parse first if its a variable or we are compressing\n            // but always fallback on the other one\n            const tryValueFirst =\n              !tryAnonymous && (context.compress || isVariable)\n\n            if (tryValueFirst) {\n              value = this.value()\n            }\n            if (!value) {\n              value = this.anonymousValue()\n              if (value) {\n                parserInput.forget()\n                // anonymous values absorb the end ';' which is required for them to work\n                return new tree.Rule(\n                  name,\n                  value,\n                  false,\n                  merge,\n                  startOfRule,\n                  fileInfo\n                )\n              }\n            }\n            if (!tryValueFirst && !value) {\n              value = this.value()\n            }\n\n            important = this.important()\n          }\n\n          if (value && this.end()) {\n            parserInput.forget()\n            return new tree.Rule(\n              name,\n              value,\n              important,\n              merge,\n              startOfRule,\n              fileInfo\n            )\n          } else {\n            parserInput.restore()\n            if (value && !tryAnonymous) {\n              return this.rule(true)\n            }\n          }\n        } else {\n          parserInput.forget()\n        }\n      },\n      anonymousValue() {\n        const match = parserInput.$re(/^([^@+\\/'\"*`(;{}-]*);/)\n        if (match) {\n          return new tree.Anonymous(match[1])\n        }\n      },\n\n      //\n      // An @import directive\n      //\n      //     @import \"lib\";\n      //\n      // Depending on our environment, importing is done differently:\n      // In the browser, it's an XHR request, in Node, it would be a\n      // file-system operation. The function used for importing is\n      // stored in `import`, which we pass to the Import constructor.\n      //\n      import: function() {\n        let path\n        let features\n        const index = parserInput.i\n\n        const dir = parserInput.$re(/^@import?\\s+/)\n\n        if (dir) {\n          const options = (dir ? this.importOptions() : null) || {}\n\n          if ((path = this.entities.quoted() || this.entities.url())) {\n            features = this.mediaFeatures()\n\n            if (!parserInput.$char(';')) {\n              parserInput.i = index\n              error(\n                'missing semi-colon or unrecognised media features on import'\n              )\n            }\n            features = features && new tree.Value(features)\n            return new tree.Import(path, features, options, index, fileInfo)\n          } else {\n            parserInput.i = index\n            error('malformed import statement')\n          }\n        }\n      },\n\n      importOptions() {\n        let o\n        const options = {}\n        let optionName\n        let value\n\n        // list of options, surrounded by parens\n        if (!parserInput.$char('(')) {\n          return null\n        }\n        do {\n          o = this.importOption()\n          if (o) {\n            optionName = o\n            value = true\n            switch (optionName) {\n              case 'css':\n                optionName = 'less'\n                value = false\n                break\n              case 'once':\n                optionName = 'multiple'\n                value = false\n                break\n            }\n            options[optionName] = value\n            if (!parserInput.$char(',')) {\n              break\n            }\n          }\n        } while (o)\n        expectChar(')')\n        return options\n      },\n\n      importOption() {\n        const opt = parserInput.$re(\n          /^(less|css|multiple|once|inline|reference|optional)/\n        )\n        if (opt) {\n          return opt[1]\n        }\n      },\n\n      mediaFeature() {\n        const entities = this.entities\n        const nodes = []\n        let e\n        let p\n        parserInput.save()\n        do {\n          e = entities.keyword() || entities.variable()\n          if (e) {\n            nodes.push(e)\n          } else if (parserInput.$char('(')) {\n            p = this.property()\n            e = this.value()\n            if (parserInput.$char(')')) {\n              if (p && e) {\n                nodes.push(\n                  new tree.Paren(\n                    new tree.Rule(\n                      p,\n                      e,\n                      null,\n                      null,\n                      parserInput.i,\n                      fileInfo,\n                      true\n                    )\n                  )\n                )\n              } else if (e) {\n                nodes.push(new tree.Paren(e))\n              } else {\n                error('badly formed media feature definition')\n              }\n            } else {\n              error(\"Missing closing ')'\", 'Parse')\n            }\n          }\n        } while (e)\n\n        parserInput.forget()\n        if (nodes.length > 0) {\n          return new tree.Expression(nodes)\n        }\n      },\n\n      mediaFeatures() {\n        const entities = this.entities\n        const features = []\n        let e\n        do {\n          e = this.mediaFeature()\n          if (e) {\n            features.push(e)\n            if (!parserInput.$char(',')) {\n              break\n            }\n          } else {\n            e = entities.variable()\n            if (e) {\n              features.push(e)\n              if (!parserInput.$char(',')) {\n                break\n              }\n            }\n          }\n        } while (e)\n\n        return features.length > 0 ? features : null\n      },\n\n      media() {\n        let features\n        let rules\n        let media\n        let debugInfo\n        const index = parserInput.i\n\n        if (context.dumpLineNumbers) {\n          debugInfo = getDebugInfo(index)\n        }\n\n        parserInput.save()\n\n        if (parserInput.$str('@media')) {\n          features = this.mediaFeatures()\n\n          rules = this.block()\n\n          if (!rules) {\n            error(\n              'media definitions require block statements after any features'\n            )\n          }\n\n          parserInput.forget()\n\n          media = new tree.Media(rules, features, index, fileInfo)\n          if (context.dumpLineNumbers) {\n            media.debugInfo = debugInfo\n          }\n\n          return media\n        }\n\n        parserInput.restore()\n      },\n\n      //\n      // A @plugin directive, used to import compiler extensions dynamically.\n      //\n      //     @plugin \"lib\";\n      //\n      // Depending on our environment, importing is done differently:\n      // In the browser, it's an XHR request, in Node, it would be a\n      // file-system operation. The function used for importing is\n      // stored in `import`, which we pass to the Import constructor.\n      //\n      plugin() {\n        let path\n        const index = parserInput.i\n        const dir = parserInput.$re(/^@plugin?\\s+/)\n\n        if (dir) {\n          const options = { plugin: true }\n\n          if ((path = this.entities.quoted() || this.entities.url())) {\n            if (!parserInput.$char(';')) {\n              parserInput.i = index\n              error('missing semi-colon on plugin')\n            }\n\n            return new tree.Import(path, null, options, index, fileInfo)\n          } else {\n            parserInput.i = index\n            error('malformed plugin statement')\n          }\n        }\n      },\n\n      //\n      // A CSS Directive\n      //\n      //     @charset \"utf-8\";\n      //\n      directive() {\n        const index = parserInput.i\n        let name\n        let value\n        let rules\n        let nonVendorSpecificName\n        let hasIdentifier\n        let hasExpression\n        let hasUnknown\n        let hasBlock = true\n        let isRooted = true\n\n        if (parserInput.currentChar() !== '@') {\n          return\n        }\n\n        value = this['import']() || this.plugin() || this.media()\n        if (value) {\n          return value\n        }\n\n        parserInput.save()\n\n        name = parserInput.$re(/^@[a-z-]+/)\n\n        if (!name) {\n          return\n        }\n\n        nonVendorSpecificName = name\n        if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n          nonVendorSpecificName = `@${name.slice(name.indexOf('-', 2) + 1)}`\n        }\n\n        switch (nonVendorSpecificName) {\n          case '@charset':\n            hasIdentifier = true\n            hasBlock = false\n            break\n          case '@namespace':\n            hasExpression = true\n            hasBlock = false\n            break\n          case '@keyframes':\n          case '@counter-style':\n            hasIdentifier = true\n            break\n          case '@document':\n          case '@supports':\n            hasUnknown = true\n            isRooted = false\n            break\n          default:\n            hasUnknown = true\n            break\n        }\n\n        parserInput.commentStore.length = 0\n\n        if (hasIdentifier) {\n          value = this.entity()\n          if (!value) {\n            error(`expected ${name} identifier`)\n          }\n        } else if (hasExpression) {\n          value = this.expression()\n          if (!value) {\n            error(`expected ${name} expression`)\n          }\n        } else if (hasUnknown) {\n          value = (parserInput.$re(/^[^{;]+/) || '').trim()\n          hasBlock = parserInput.currentChar() == '{'\n          if (value) {\n            value = new tree.Anonymous(value)\n          }\n        }\n\n        if (hasBlock) {\n          rules = this.blockRuleset()\n        }\n\n        if (rules || (!hasBlock && value && parserInput.$char(';'))) {\n          parserInput.forget()\n          return new tree.Directive(\n            name,\n            value,\n            rules,\n            index,\n            fileInfo,\n            context.dumpLineNumbers ? getDebugInfo(index) : null,\n            isRooted\n          )\n        }\n\n        parserInput.restore('directive options not recognised')\n      },\n\n      //\n      // A Value is a comma-delimited list of Expressions\n      //\n      //     font-family: Baskerville, Georgia, serif;\n      //\n      // In a Rule, a Value represents everything after the `:`,\n      // and before the `;`.\n      //\n      value() {\n        let e\n        const expressions = []\n\n        do {\n          e = this.expression()\n          if (e) {\n            expressions.push(e)\n            if (!parserInput.$char(',')) {\n              break\n            }\n          }\n        } while (e)\n\n        if (expressions.length > 0) {\n          return new tree.Value(expressions)\n        }\n      },\n      important() {\n        if (parserInput.currentChar() === '!') {\n          return parserInput.$re(/^! *important/)\n        }\n      },\n      sub() {\n        let a\n        let e\n\n        parserInput.save()\n        if (parserInput.$char('(')) {\n          a = this.addition()\n          if (a && parserInput.$char(')')) {\n            parserInput.forget()\n            e = new tree.Expression([a])\n            e.parens = true\n            return e\n          }\n          parserInput.restore(\"Expected ')'\")\n          return\n        }\n        parserInput.restore()\n      },\n      multiplication() {\n        let m\n        let a\n        let op\n        let operation\n        let isSpaced\n        m = this.operand()\n        if (m) {\n          isSpaced = parserInput.isWhitespace(-1)\n          while (true) {\n            if (parserInput.peek(/^\\/[*\\/]/)) {\n              break\n            }\n\n            parserInput.save()\n\n            op = parserInput.$char('/') || parserInput.$char('*')\n\n            if (!op) {\n              parserInput.forget()\n              break\n            }\n\n            a = this.operand()\n\n            if (!a) {\n              parserInput.restore()\n              break\n            }\n            parserInput.forget()\n\n            m.parensInOp = true\n            a.parensInOp = true\n            operation = new tree.Operation(op, [operation || m, a], isSpaced)\n            isSpaced = parserInput.isWhitespace(-1)\n          }\n          return operation || m\n        }\n      },\n      addition() {\n        let m\n        let a\n        let op\n        let operation\n        let isSpaced\n        m = this.multiplication()\n        if (m) {\n          isSpaced = parserInput.isWhitespace(-1)\n          while (true) {\n            op =\n              parserInput.$re(/^[-+]\\s+/) ||\n              (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')))\n            if (!op) {\n              break\n            }\n            a = this.multiplication()\n            if (!a) {\n              break\n            }\n\n            m.parensInOp = true\n            a.parensInOp = true\n            operation = new tree.Operation(op, [operation || m, a], isSpaced)\n            isSpaced = parserInput.isWhitespace(-1)\n          }\n          return operation || m\n        }\n      },\n      conditions() {\n        let a\n        let b\n        const index = parserInput.i\n        let condition\n\n        a = this.condition()\n        if (a) {\n          while (true) {\n            if (\n              !parserInput.peek(/^,\\s*(not\\s*)?\\(/) ||\n              !parserInput.$char(',')\n            ) {\n              break\n            }\n            b = this.condition()\n            if (!b) {\n              break\n            }\n            condition = new tree.Condition('or', condition || a, b, index)\n          }\n          return condition || a\n        }\n      },\n      condition() {\n        let result\n        let logical\n        let next\n        function or() {\n          return parserInput.$str('or')\n        }\n\n        result = this.conditionAnd(this)\n        if (!result) {\n          return\n        }\n        logical = or()\n        if (logical) {\n          next = this.condition()\n          if (next) {\n            result = new tree.Condition(logical, result, next)\n          } else {\n            return\n          }\n        }\n        return result\n      },\n      conditionAnd() {\n        let result\n        let logical\n        let next\n        function insideCondition(me) {\n          return me.negatedCondition() || me.parenthesisCondition()\n        }\n        function and() {\n          return parserInput.$str('and')\n        }\n\n        result = insideCondition(this)\n        if (!result) {\n          return\n        }\n        logical = and()\n        if (logical) {\n          next = this.conditionAnd()\n          if (next) {\n            result = new tree.Condition(logical, result, next)\n          } else {\n            return\n          }\n        }\n        return result\n      },\n      negatedCondition() {\n        if (parserInput.$str('not')) {\n          const result = this.parenthesisCondition()\n          if (result) {\n            result.negate = !result.negate\n          }\n          return result\n        }\n      },\n      parenthesisCondition() {\n        function tryConditionFollowedByParenthesis(me) {\n          let body\n          parserInput.save()\n          body = me.condition()\n          if (!body) {\n            parserInput.restore()\n            return\n          }\n          if (!parserInput.$char(')')) {\n            parserInput.restore()\n            return\n          }\n          parserInput.forget()\n          return body\n        }\n\n        let body\n        parserInput.save()\n        if (!parserInput.$str('(')) {\n          parserInput.restore()\n          return\n        }\n        body = tryConditionFollowedByParenthesis(this)\n        if (body) {\n          parserInput.forget()\n          return body\n        }\n\n        body = this.atomicCondition()\n        if (!body) {\n          parserInput.restore()\n          return\n        }\n        if (!parserInput.$char(')')) {\n          parserInput.restore(`expected ')' got '${parserInput.currentChar()}'`)\n          return\n        }\n        parserInput.forget()\n        return body\n      },\n      atomicCondition() {\n        const entities = this.entities\n        const index = parserInput.i\n        let a\n        let b\n        let c\n        let op\n\n        a = this.addition() || entities.keyword() || entities.quoted()\n        if (a) {\n          if (parserInput.$char('>')) {\n            if (parserInput.$char('=')) {\n              op = '>='\n            } else {\n              op = '>'\n            }\n          } else if (parserInput.$char('<')) {\n            if (parserInput.$char('=')) {\n              op = '<='\n            } else {\n              op = '<'\n            }\n          } else if (parserInput.$char('=')) {\n            if (parserInput.$char('>')) {\n              op = '=>'\n            } else if (parserInput.$char('<')) {\n              op = '=<'\n            } else {\n              op = '='\n            }\n          }\n          if (op) {\n            b = this.addition() || entities.keyword() || entities.quoted()\n            if (b) {\n              c = new tree.Condition(op, a, b, index, false)\n            } else {\n              error('expected expression')\n            }\n          } else {\n            c = new tree.Condition(\n              '=',\n              a,\n              new tree.Keyword('true'),\n              index,\n              false\n            )\n          }\n          return c\n        }\n      },\n\n      //\n      // An operand is anything that can be part of an operation,\n      // such as a Color, or a Variable\n      //\n      operand() {\n        const entities = this.entities\n        let negate\n\n        if (parserInput.peek(/^-[@\\(]/)) {\n          negate = parserInput.$char('-')\n        }\n\n        let o =\n          this.sub() ||\n          entities.dimension() ||\n          entities.color() ||\n          entities.variable() ||\n          entities.call() ||\n          entities.colorKeyword()\n\n        if (negate) {\n          o.parensInOp = true\n          o = new tree.Negative(o)\n        }\n\n        return o\n      },\n\n      //\n      // Expressions either represent mathematical operations,\n      // or white-space delimited Entities.\n      //\n      //     1px solid black\n      //     @var * 2\n      //\n      expression() {\n        const entities = []\n        let e\n        let delim\n\n        do {\n          e = this.comment()\n          if (e) {\n            entities.push(e)\n            continue\n          }\n          e = this.addition() || this.entity()\n          if (e) {\n            entities.push(e)\n            // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n            if (!parserInput.peek(/^\\/[\\/*]/)) {\n              delim = parserInput.$char('/')\n              if (delim) {\n                entities.push(new tree.Anonymous(delim))\n              }\n            }\n          }\n        } while (e)\n        if (entities.length > 0) {\n          return new tree.Expression(entities)\n        }\n      },\n      property() {\n        const name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/)\n        if (name) {\n          return name[1]\n        }\n      },\n      ruleProperty() {\n        let name = []\n        const index = []\n        let s\n        let k\n\n        parserInput.save()\n\n        const simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/)\n        if (simpleProperty) {\n          name = [new tree.Keyword(simpleProperty[1])]\n          parserInput.forget()\n          return name\n        }\n\n        function match(re) {\n          const i = parserInput.i\n          const chunk = parserInput.$re(re)\n          if (chunk) {\n            index.push(i)\n            return name.push(chunk[1])\n          }\n        }\n\n        match(/^(\\*?)/)\n        while (true) {\n          if (!match(/^((?:[\\w-]+)|(?:@\\{[\\w-]+\\}))/)) {\n            break\n          }\n        }\n\n        if (name.length > 1 && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n          parserInput.forget()\n\n          // at last, we have the complete match now. move forward,\n          // convert name particles to tree objects and return:\n          if (name[0] === '') {\n            name.shift()\n            index.shift()\n          }\n          for (k = 0; k < name.length; k++) {\n            s = name[k]\n            name[k] =\n              s.charAt(0) !== '@'\n                ? new tree.Keyword(s)\n                : new tree.Variable(`@${s.slice(2, -1)}`, index[k], fileInfo)\n          }\n          return name\n        }\n        parserInput.restore()\n      },\n    }),\n  }\n}\nParser.serializeVars = vars => {\n  let s = ''\n\n  for (const name in vars) {\n    if (Object.hasOwnProperty.call(vars, name)) {\n      const value = vars[name]\n      s += `${(name[0] === '@' ? '' : '@') + name}: ${value}${String(\n        value\n      ).slice(-1) === ';'\n        ? ''\n        : ';'}`\n    }\n  }\n\n  return s\n}\n\nmodule.exports = Parser\n","const LessError = require('../less-error')\nconst tree = require('../tree')\n\nconst FunctionImporter = (module.exports = function FunctionImporter(\n  context,\n  fileInfo\n) {\n  this.fileInfo = fileInfo\n})\n\nFunctionImporter.prototype.eval = function(contents, callback) {\n  const loaded = {}\n  let loader\n  let registry\n\n  registry = {\n    add(name, func) {\n      loaded[name] = func\n    },\n    addMultiple(functions) {\n      Object.keys(functions).forEach(name => {\n        loaded[name] = functions[name]\n      })\n    },\n  }\n\n  try {\n    loader = new Function('functions', 'tree', 'fileInfo', contents)\n    loader(registry, tree, this.fileInfo)\n  } catch (e) {\n    callback(\n      new LessError({\n        message: `Plugin evaluation error: '${e.name}: ${e.message.replace(\n          /[\"]/g,\n          \"'\"\n        )}'`,\n        filename: this.fileInfo.filename,\n      }),\n      null\n    )\n  }\n\n  callback(null, { functions: loaded })\n}\n","const contexts = require('./contexts')\nconst Parser = require('./parser/parser')\nconst FunctionImporter = require('./plugins/function-importer')\n\nmodule.exports = environment => {\n  // FileInfo = {\n  //  'relativeUrls' - option - whether to adjust URL's to be relative\n  //  'filename' - full resolved filename of current file\n  //  'rootpath' - path to append to normal URLs for this node\n  //  'currentDirectory' - path to the current file, absolute\n  //  'rootFilename' - filename of the base file\n  //  'entryPath' - absolute path to the entry file\n  //  'reference' - whether the file should not be output and only output parts that are referenced\n\n  class ImportManager {\n    constructor(context, rootFileInfo) {\n      this.rootFilename = rootFileInfo.filename\n      this.paths = context.paths || [] // Search paths, when importing\n      this.contents = {} // map - filename to contents of all the files\n      this.contentsIgnoredChars = {} // map - filename to lines at the beginning of each file to ignore\n      this.mime = context.mime\n      this.error = null\n      this.context = context\n      // Deprecated? Unused outside of here, could be useful.\n      this.queue = [] // Files which haven't been imported yet\n      this.files = {} // Holds the imported parse trees.\n    }\n\n    /**\n         * Add an import to be imported\n         * @param path - the raw path\n         * @param tryAppendLessExtension - whether to try appending the less extension (if the path has no extension)\n         * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n         * @param importOptions - import options\n         * @param callback - callback for when it is imported\n         */\n    push(\n      path,\n      tryAppendLessExtension,\n      currentFileInfo,\n      importOptions,\n      callback\n    ) {\n      const importManager = this\n      this.queue.push(path)\n\n      const fileParsedFunc = (e, root, fullPath) => {\n        importManager.queue.splice(importManager.queue.indexOf(path), 1) // Remove the path from the queue\n\n        const importedEqualsRoot = fullPath === importManager.rootFilename\n        if (importOptions.optional && e) {\n          callback(null, { rules: [] }, false, null)\n        } else {\n          importManager.files[fullPath] = root\n          if (e && !importManager.error) {\n            importManager.error = e\n          }\n          callback(e, root, importedEqualsRoot, fullPath)\n        }\n      }\n\n      const newFileInfo = {\n        relativeUrls: this.context.relativeUrls,\n        entryPath: currentFileInfo.entryPath,\n        rootpath: currentFileInfo.rootpath,\n        rootFilename: currentFileInfo.rootFilename,\n      }\n\n      const fileManager = environment.getFileManager(\n        path,\n        currentFileInfo.currentDirectory,\n        this.context,\n        environment\n      )\n\n      if (!fileManager) {\n        fileParsedFunc({ message: `Could not find a file-manager for ${path}` })\n        return\n      }\n\n      if (tryAppendLessExtension) {\n        path = fileManager.tryAppendExtension(\n          path,\n          importOptions.plugin ? '.js' : '.less'\n        )\n      }\n\n      const loadFileCallback = loadedFile => {\n        const resolvedFilename = loadedFile.filename\n        const contents = loadedFile.contents.replace(/^\\uFEFF/, '')\n\n        // Pass on an updated rootpath if path of imported file is relative and file\n        // is in a (sub|sup) directory\n        //\n        // Examples:\n        // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n        //   then rootpath should become 'less/module/nav/'\n        // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n        //   then rootpath should become 'less/../'\n        newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename)\n        if (newFileInfo.relativeUrls) {\n          newFileInfo.rootpath = fileManager.join(\n            importManager.context.rootpath || '',\n            fileManager.pathDiff(\n              newFileInfo.currentDirectory,\n              newFileInfo.entryPath\n            )\n          )\n\n          if (\n            !fileManager.isPathAbsolute(newFileInfo.rootpath) &&\n            fileManager.alwaysMakePathsAbsolute()\n          ) {\n            newFileInfo.rootpath = fileManager.join(\n              newFileInfo.entryPath,\n              newFileInfo.rootpath\n            )\n          }\n        }\n        newFileInfo.filename = resolvedFilename\n\n        const newEnv = new contexts.Parse(importManager.context)\n\n        newEnv.processImports = false\n        importManager.contents[resolvedFilename] = contents\n\n        if (currentFileInfo.reference || importOptions.reference) {\n          newFileInfo.reference = true\n        }\n\n        if (importOptions.plugin) {\n          new FunctionImporter(\n            newEnv,\n            newFileInfo\n          ).eval(contents, (e, root) => {\n            fileParsedFunc(e, root, resolvedFilename)\n          })\n        } else if (importOptions.inline) {\n          fileParsedFunc(null, contents, resolvedFilename)\n        } else {\n          new Parser(\n            newEnv,\n            importManager,\n            newFileInfo\n          ).parse(contents, (e, root) => {\n            fileParsedFunc(e, root, resolvedFilename)\n          })\n        }\n      }\n\n      const promise = fileManager.loadFile(\n        path,\n        currentFileInfo.currentDirectory,\n        this.context,\n        environment,\n        (err, loadedFile) => {\n          if (err) {\n            fileParsedFunc(err)\n          } else {\n            loadFileCallback(loadedFile)\n          }\n        }\n      )\n      if (promise) {\n        promise.then(loadFileCallback, fileParsedFunc)\n      }\n    }\n  }\n\n  return ImportManager\n}\n","module.exports = {\n  colors: require('./colors'),\n  unitConversions: require('./unit-conversions'),\n}\n","class abstractFileManager {\n  getPath(filename) {\n    let j = filename.lastIndexOf('?')\n    if (j > 0) {\n      filename = filename.slice(0, j)\n    }\n    j = filename.lastIndexOf('/')\n    if (j < 0) {\n      j = filename.lastIndexOf('\\\\')\n    }\n    if (j < 0) {\n      return ''\n    }\n    return filename.slice(0, j + 1)\n  }\n\n  tryAppendExtension(path, ext) {\n    return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext\n  }\n\n  tryAppendLessExtension(path) {\n    return this.tryAppendExtension(path, '.less')\n  }\n\n  supportsSync() {\n    return false\n  }\n\n  alwaysMakePathsAbsolute() {\n    return false\n  }\n\n  isPathAbsolute(filename) {\n    return /^(?:[a-z-]+:|\\/|\\\\|#)/i.test(filename)\n  }\n\n  join(basePath, laterPath) {\n    if (!basePath) {\n      return laterPath\n    }\n    return basePath + laterPath\n  }\n\n  pathDiff(url, baseUrl) {\n    // diff between two paths to create a relative path\n\n    const urlParts = this.extractUrlParts(url)\n\n    const baseUrlParts = this.extractUrlParts(baseUrl)\n    let i\n    let max\n    let urlDirectories\n    let baseUrlDirectories\n    let diff = ''\n    if (urlParts.hostPart !== baseUrlParts.hostPart) {\n      return ''\n    }\n    max = Math.max(baseUrlParts.directories.length, urlParts.directories.length)\n    for (i = 0; i < max; i++) {\n      if (baseUrlParts.directories[i] !== urlParts.directories[i]) {\n        break\n      }\n    }\n    baseUrlDirectories = baseUrlParts.directories.slice(i)\n    urlDirectories = urlParts.directories.slice(i)\n    for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n      diff += '../'\n    }\n    for (i = 0; i < urlDirectories.length - 1; i++) {\n      diff += `${urlDirectories[i]}/`\n    }\n    return diff\n  }\n\n  // helper function, not part of API\n  extractUrlParts(url, baseUrl) {\n    // urlParts[1] = protocol://hostname/ OR /\n    // urlParts[2] = / if path relative to host base\n    // urlParts[3] = directories\n    // urlParts[4] = filename\n    // urlParts[5] = parameters\n\n    const urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i\n\n    const urlParts = url.match(urlPartsRegex)\n    const returner = {}\n    let directories = []\n    let i\n    let baseUrlParts\n\n    if (!urlParts) {\n      throw new Error(`Could not parse sheet href - '${url}'`)\n    }\n\n    // Stylesheets in IE don't always return the full path\n    if (baseUrl && (!urlParts[1] || urlParts[2])) {\n      baseUrlParts = baseUrl.match(urlPartsRegex)\n      if (!baseUrlParts) {\n        throw new Error(`Could not parse page url - '${baseUrl}'`)\n      }\n      urlParts[1] = urlParts[1] || baseUrlParts[1] || ''\n      if (!urlParts[2]) {\n        urlParts[3] = baseUrlParts[3] + urlParts[3]\n      }\n    }\n\n    if (urlParts[3]) {\n      directories = urlParts[3].replace(/\\\\/g, '/').split('/')\n\n      // extract out . before .. so .. doesn't absorb a non-directory\n      for (i = 0; i < directories.length; i++) {\n        if (directories[i] === '.') {\n          directories.splice(i, 1)\n          i -= 1\n        }\n      }\n\n      for (i = 0; i < directories.length; i++) {\n        if (directories[i] === '..' && i > 0) {\n          directories.splice(i - 1, 2)\n          i -= 2\n        }\n      }\n    }\n\n    returner.hostPart = urlParts[1]\n    returner.directories = directories\n    returner.path = (urlParts[1] || '') + directories.join('/')\n    returner.fileUrl = returner.path + (urlParts[4] || '')\n    returner.url = returner.fileUrl + (urlParts[5] || '')\n    return returner\n  }\n}\n\nmodule.exports = abstractFileManager\n","module.exports = environment => {\n  const Quoted = require('../tree/quoted')\n  const URL = require('../tree/url')\n  const functionRegistry = require('./function-registry')\n  const fallback = (functionThis, node) =>\n    new URL(node, functionThis.index, functionThis.currentFileInfo).eval(\n      functionThis.context\n    )\n  const logger = require('../logger')\n\n  functionRegistry.add('data-uri', function(mimetypeNode, filePathNode) {\n    if (!filePathNode) {\n      filePathNode = mimetypeNode\n      mimetypeNode = null\n    }\n\n    let mimetype = mimetypeNode && mimetypeNode.value\n    let filePath = filePathNode.value\n    const currentFileInfo = this.currentFileInfo\n    const currentDirectory = currentFileInfo.relativeUrls\n      ? currentFileInfo.currentDirectory\n      : currentFileInfo.entryPath\n\n    const fragmentStart = filePath.indexOf('#')\n    let fragment = ''\n    if (fragmentStart !== -1) {\n      fragment = filePath.slice(fragmentStart)\n      filePath = filePath.slice(0, fragmentStart)\n    }\n\n    const fileManager = environment.getFileManager(\n      filePath,\n      currentDirectory,\n      this.context,\n      environment,\n      true\n    )\n\n    if (!fileManager) {\n      return fallback(this, filePathNode)\n    }\n\n    let useBase64 = false\n\n    // detect the mimetype if not given\n    if (!mimetypeNode) {\n      mimetype = environment.mimeLookup(filePath)\n\n      if (mimetype === 'image/svg+xml') {\n        useBase64 = false\n      } else {\n        // use base 64 unless it's an ASCII or UTF-8 format\n        const charset = environment.charsetLookup(mimetype)\n        useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0\n      }\n      if (useBase64) {\n        mimetype += ';base64'\n      }\n    } else {\n      useBase64 = /;base64$/.test(mimetype)\n    }\n\n    const fileSync = fileManager.loadFileSync(\n      filePath,\n      currentDirectory,\n      this.context,\n      environment\n    )\n    if (!fileSync.contents) {\n      logger.warn(\n        `Skipped data-uri embedding of ${filePath} because file not found`\n      )\n      return fallback(this, filePathNode || mimetypeNode)\n    }\n    let buf = fileSync.contents\n    if (useBase64 && !environment.encodeBase64) {\n      return fallback(this, filePathNode)\n    }\n\n    buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf)\n\n    const uri = `data:${mimetype},${buf}${fragment}`\n\n    // IE8 cannot handle a data-uri larger than 32,768 characters. If this is exceeded\n    // and the --ieCompat flag is enabled, return a normal url() instead.\n    const DATA_URI_MAX = 32768\n    if (uri.length >= DATA_URI_MAX) {\n      if (this.context.ieCompat !== false) {\n        logger.warn(\n          `Skipped data-uri embedding of ${filePath} because its size (${uri.length} characters) exceeds IE8-safe ${DATA_URI_MAX} characters!`\n        )\n\n        return fallback(this, filePathNode || mimetypeNode)\n      }\n    }\n\n    return new URL(\n      new Quoted(`\"${uri}\"`, uri, false, this.index, this.currentFileInfo),\n      this.index,\n      this.currentFileInfo\n    )\n  })\n}\n","const Dimension = require('../tree/dimension')\n\nconst MathHelper = () => {}\nMathHelper._math = (fn, unit, n) => {\n  if (!(n instanceof Dimension)) {\n    throw { type: 'Argument', message: 'argument must be a number' }\n  }\n  if (unit == null) {\n    unit = n.unit\n  } else {\n    n = n.unify()\n  }\n  return new Dimension(fn(parseFloat(n.value)), unit)\n}\nmodule.exports = MathHelper\n","const functionRegistry = require('./function-registry')\nconst mathHelper = require('./math-helper.js')\n\nconst mathFunctions = {\n  // name,  unit\n  ceil: null,\n  floor: null,\n  sqrt: null,\n  abs: null,\n  tan: '',\n  sin: '',\n  cos: '',\n  atan: 'rad',\n  asin: 'rad',\n  acos: 'rad',\n}\n\nfor (const f in mathFunctions) {\n  if (mathFunctions.hasOwnProperty(f)) {\n    mathFunctions[f] = mathHelper._math.bind(null, Math[f], mathFunctions[f])\n  }\n}\n\nmathFunctions.round = (n, f) => {\n  const fraction = typeof f === 'undefined' ? 0 : f.value\n  return mathHelper._math(num => num.toFixed(fraction), null, n)\n}\n\nfunctionRegistry.addMultiple(mathFunctions)\n","const Dimension = require('../tree/dimension')\nconst Anonymous = require('../tree/anonymous')\nconst functionRegistry = require('./function-registry')\nconst mathHelper = require('./math-helper.js')\n\nconst minMax = function(isMin, args) {\n  args = Array.prototype.slice.call(args)\n  switch (args.length) {\n    case 0:\n      throw { type: 'Argument', message: 'one or more arguments required' }\n  }\n  let i // key is the unit.toString() for unified Dimension values,\n  let j\n  let current\n  let currentUnified\n  let referenceUnified\n  let unit\n  let unitStatic\n  let unitClone\n\n  const // elems only contains original argument values.\n  order = []\n\n  const values = {}\n  // value is the index into the order array.\n  for (i = 0; i < args.length; i++) {\n    current = args[i]\n    if (!(current instanceof Dimension)) {\n      if (Array.isArray(args[i].value)) {\n        Array.prototype.push.apply(\n          args,\n          Array.prototype.slice.call(args[i].value)\n        )\n      }\n      continue\n    }\n    currentUnified =\n      current.unit.toString() === '' && unitClone !== undefined\n        ? new Dimension(current.value, unitClone).unify()\n        : current.unify()\n    unit =\n      currentUnified.unit.toString() === '' && unitStatic !== undefined\n        ? unitStatic\n        : currentUnified.unit.toString()\n    unitStatic =\n      (unit !== '' && unitStatic === undefined) ||\n      (unit !== '' && order[0].unify().unit.toString() === '')\n        ? unit\n        : unitStatic\n    unitClone =\n      unit !== '' && unitClone === undefined\n        ? current.unit.toString()\n        : unitClone\n    j =\n      values[''] !== undefined && unit !== '' && unit === unitStatic\n        ? values['']\n        : values[unit]\n    if (j === undefined) {\n      if (unitStatic !== undefined && unit !== unitStatic) {\n        throw { type: 'Argument', message: 'incompatible types' }\n      }\n      values[unit] = order.length\n      order.push(current)\n      continue\n    }\n    referenceUnified =\n      order[j].unit.toString() === '' && unitClone !== undefined\n        ? new Dimension(order[j].value, unitClone).unify()\n        : order[j].unify()\n    if (\n      (isMin && currentUnified.value < referenceUnified.value) ||\n      (!isMin && currentUnified.value > referenceUnified.value)\n    ) {\n      order[j] = current\n    }\n  }\n  if (order.length == 1) {\n    return order[0]\n  }\n  args = order\n    .map(function(a) {\n      return a.toCSS(this.context)\n    })\n    .join(this.context.compress ? ',' : ', ')\n  return new Anonymous(`${isMin ? 'min' : 'max'}(${args})`)\n}\nfunctionRegistry.addMultiple({\n  min(...args) {\n    return minMax(true, args)\n  },\n  max(...args) {\n    return minMax(false, args)\n  },\n  convert(val, unit) {\n    return val.convertTo(unit.value)\n  },\n  pi() {\n    return new Dimension(Math.PI)\n  },\n  mod(a, b) {\n    return new Dimension(a.value % b.value, a.unit)\n  },\n  pow(x, y) {\n    if (typeof x === 'number' && typeof y === 'number') {\n      x = new Dimension(x)\n      y = new Dimension(y)\n    } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n      throw { type: 'Argument', message: 'arguments must be numbers' }\n    }\n\n    return new Dimension(Math.pow(x.value, y.value), x.unit)\n  },\n  percentage(n) {\n    const result = mathHelper._math(num => num * 100, '%', n)\n\n    return result\n  },\n})\n","const Quoted = require('../tree/quoted')\nconst Anonymous = require('../tree/anonymous')\nconst JavaScript = require('../tree/javascript')\nconst functionRegistry = require('./function-registry')\n\nfunctionRegistry.addMultiple({\n  e(str) {\n    return new Anonymous(str instanceof JavaScript ? str.evaluated : str.value)\n  },\n  escape(str) {\n    return new Anonymous(\n      encodeURI(str.value)\n        .replace(/=/g, '%3D')\n        .replace(/:/g, '%3A')\n        .replace(/#/g, '%23')\n        .replace(/;/g, '%3B')\n        .replace(/\\(/g, '%28')\n        .replace(/\\)/g, '%29')\n    )\n  },\n  replace(string, pattern, replacement, flags) {\n    let result = string.value\n    replacement =\n      replacement.type === 'Quoted' ? replacement.value : replacement.toCSS()\n    result = result.replace(\n      new RegExp(pattern.value, flags ? flags.value : ''),\n      replacement\n    )\n    return new Quoted(string.quote || '', result, string.escaped)\n  },\n  '%': function(string /* arg, arg, ...*/) {\n    const args = Array.prototype.slice.call(arguments, 1)\n    let result = string.value\n\n    for (let i = 0; i < args.length; i++) {\n      /*jshint loopfunc:true */\n      result = result.replace(/%[sda]/i, token => {\n        const value =\n          args[i].type === 'Quoted' && token.match(/s/i)\n            ? args[i].value\n            : args[i].toCSS()\n        return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value\n      })\n    }\n    result = result.replace(/%%/g, '%')\n    return new Quoted(string.quote || '', result, string.escaped)\n  },\n})\n","module.exports = environment => {\n  const Dimension = require('../tree/dimension')\n  const Color = require('../tree/color')\n  const Expression = require('../tree/expression')\n  const Quoted = require('../tree/quoted')\n  const URL = require('../tree/url')\n  const functionRegistry = require('./function-registry')\n\n  functionRegistry.add('svg-gradient', function(direction) {\n    let stops\n    let gradientDirectionSvg\n    let gradientType = 'linear'\n    let rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"'\n    const renderEnv = { compress: false }\n    let returner\n    const directionValue = direction.toCSS(renderEnv)\n    let i\n    let color\n    let position\n    let positionValue\n    let alpha\n\n    function throwArgumentDescriptor() {\n      throw {\n        type: 'Argument',\n        message:\n          'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\n          ' end_color [end_position] or direction, color list',\n      }\n    }\n\n    if (arguments.length == 2) {\n      if (arguments[1].value.length < 2) {\n        throwArgumentDescriptor()\n      }\n      stops = arguments[1].value\n    } else if (arguments.length < 3) {\n      throwArgumentDescriptor()\n    } else {\n      stops = Array.prototype.slice.call(arguments, 1)\n    }\n\n    switch (directionValue) {\n      case 'to bottom':\n        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"'\n        break\n      case 'to right':\n        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"'\n        break\n      case 'to bottom right':\n        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"'\n        break\n      case 'to top right':\n        gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"'\n        break\n      case 'ellipse':\n      case 'ellipse at center':\n        gradientType = 'radial'\n        gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"'\n        rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"'\n        break\n      default:\n        throw {\n          type: 'Argument',\n          message:\n            \"svg-gradient direction must be 'to bottom', 'to right',\" +\n            \" 'to bottom right', 'to top right' or 'ellipse at center'\",\n        }\n    }\n    returner = `<?xml version=\"1.0\" ?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"100%\" height=\"100%\" viewBox=\"0 0 1 1\" preserveAspectRatio=\"none\"><${gradientType}Gradient id=\"gradient\" gradientUnits=\"userSpaceOnUse\" ${gradientDirectionSvg}>`\n\n    for (i = 0; i < stops.length; i += 1) {\n      if (stops[i] instanceof Expression) {\n        color = stops[i].value[0]\n        position = stops[i].value[1]\n      } else {\n        color = stops[i]\n        position = undefined\n      }\n\n      if (\n        !(color instanceof Color) ||\n        (!((i === 0 || i + 1 === stops.length) && position === undefined) &&\n          !(position instanceof Dimension))\n      ) {\n        throwArgumentDescriptor()\n      }\n      positionValue = position\n        ? position.toCSS(renderEnv)\n        : i === 0 ? '0%' : '100%'\n      alpha = color.alpha\n      returner += `<stop offset=\"${positionValue}\" stop-color=\"${color.toRGB()}\"${alpha <\n      1\n        ? ' stop-opacity=\"' + alpha + '\"'\n        : ''}/>`\n    }\n    returner += `</${gradientType}Gradient><rect ${rectangleDimension} fill=\"url(#gradient)\" /></svg>`\n\n    returner = encodeURIComponent(returner)\n\n    returner = `data:image/svg+xml,${returner}`\n    return new URL(\n      new Quoted(\n        `'${returner}'`,\n        returner,\n        false,\n        this.index,\n        this.currentFileInfo\n      ),\n      this.index,\n      this.currentFileInfo\n    )\n  })\n}\n","const Keyword = require('../tree/keyword')\nconst DetachedRuleset = require('../tree/detached-ruleset')\nconst Dimension = require('../tree/dimension')\nconst Color = require('../tree/color')\nconst Quoted = require('../tree/quoted')\nconst Anonymous = require('../tree/anonymous')\nconst URL = require('../tree/url')\nconst Operation = require('../tree/operation')\nconst functionRegistry = require('./function-registry')\nconst isa = (n, Type) => (n instanceof Type ? Keyword.True : Keyword.False)\n\nconst isunit = (n, unit) => {\n  if (unit === undefined) {\n    throw {\n      type: 'Argument',\n      message: 'missing the required second argument to isunit.',\n    }\n  }\n  unit = typeof unit.value === 'string' ? unit.value : unit\n  if (typeof unit !== 'string') {\n    throw {\n      type: 'Argument',\n      message: 'Second argument to isunit should be a unit or a string.',\n    }\n  }\n  return n instanceof Dimension && n.unit.is(unit)\n    ? Keyword.True\n    : Keyword.False\n}\n\nconst getItemsFromNode = node => {\n  // handle non-array values as an array of length 1\n  // return 'undefined' if index is invalid\n  const items = Array.isArray(node.value) ? node.value : Array(node)\n\n  return items\n}\n\nfunctionRegistry.addMultiple({\n  isruleset(n) {\n    return isa(n, DetachedRuleset)\n  },\n  iscolor(n) {\n    return isa(n, Color)\n  },\n  isnumber(n) {\n    return isa(n, Dimension)\n  },\n  isstring(n) {\n    return isa(n, Quoted)\n  },\n  iskeyword(n) {\n    return isa(n, Keyword)\n  },\n  isurl(n) {\n    return isa(n, URL)\n  },\n  ispixel(n) {\n    return isunit(n, 'px')\n  },\n  ispercentage(n) {\n    return isunit(n, '%')\n  },\n  isem(n) {\n    return isunit(n, 'em')\n  },\n  isunit,\n  unit(val, unit) {\n    if (!(val instanceof Dimension)) {\n      throw {\n        type: 'Argument',\n        message: `the first argument to unit must be a number${val instanceof\n        Operation\n          ? '. Have you forgotten parenthesis?'\n          : ''}`,\n      }\n    }\n    if (unit) {\n      if (unit instanceof Keyword) {\n        unit = unit.value\n      } else {\n        unit = unit.toCSS()\n      }\n    } else {\n      unit = ''\n    }\n    return new Dimension(val.value, unit)\n  },\n  'get-unit': function(n) {\n    return new Anonymous(n.unit)\n  },\n  extract(values, index) {\n    index = index.value - 1 // (1-based index)\n\n    return getItemsFromNode(values)[index]\n  },\n  length(values) {\n    return new Dimension(getItemsFromNode(values).length)\n  },\n})\n","module.exports = environment => {\n  const functions = {\n    functionRegistry: require('./function-registry'),\n    functionCaller: require('./function-caller'),\n  }\n\n  //register functions\n  require('./default')\n  require('./color')\n  require('./color-blending')\n  require('./data-uri')(environment)\n  require('./math')\n  require('./number')\n  require('./string')\n  require('./svg')(environment)\n  require('./types')\n\n  return functions\n}\n","module.exports = (environment, ParseTree) => {\n  const render = function(input, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    if (!callback) {\n      const self = this\n      return new Promise((resolve, reject) => {\n        render.call(self, input, options, (err, output) => {\n          if (err) {\n            reject(err)\n          } else {\n            resolve(output)\n          }\n        })\n      })\n    } else {\n      this.parse(input, options, (err, root, imports, options) => {\n        if (err) {\n          return callback(err)\n        }\n\n        let result\n        try {\n          const parseTree = new ParseTree(root, imports)\n          result = parseTree.toCSS(options)\n        } catch (err) {\n          return callback(err)\n        }\n\n        callback(null, result)\n      })\n    }\n  }\n\n  return render\n}\n","/**\n * Plugin Manager\n */\nclass PluginManager {\n  constructor(less) {\n    this.less = less\n    this.visitors = []\n    this.preProcessors = []\n    this.postProcessors = []\n    this.installedPlugins = []\n    this.fileManagers = []\n  }\n\n  /**\n     * Adds all the plugins in the array\n     * @param {Array} plugins\n     */\n  addPlugins(plugins) {\n    if (plugins) {\n      for (let i = 0; i < plugins.length; i++) {\n        this.addPlugin(plugins[i])\n      }\n    }\n  }\n\n  /**\n     *\n     * @param plugin\n     */\n  addPlugin(plugin) {\n    this.installedPlugins.push(plugin)\n    plugin.install(this.less, this)\n  }\n\n  /**\n     * Adds a visitor. The visitor object has options on itself to determine\n     * when it should run.\n     * @param visitor\n     */\n  addVisitor(visitor) {\n    this.visitors.push(visitor)\n  }\n\n  /**\n     * Adds a pre processor object\n     * @param {object} preProcessor\n     * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n     */\n  addPreProcessor(preProcessor, priority) {\n    let indexToInsertAt\n    for (\n      indexToInsertAt = 0;\n      indexToInsertAt < this.preProcessors.length;\n      indexToInsertAt++\n    ) {\n      if (this.preProcessors[indexToInsertAt].priority >= priority) {\n        break\n      }\n    }\n    this.preProcessors.splice(indexToInsertAt, 0, { preProcessor, priority })\n  }\n\n  /**\n     * Adds a post processor object\n     * @param {object} postProcessor\n     * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n     */\n  addPostProcessor(postProcessor, priority) {\n    let indexToInsertAt\n    for (\n      indexToInsertAt = 0;\n      indexToInsertAt < this.postProcessors.length;\n      indexToInsertAt++\n    ) {\n      if (this.postProcessors[indexToInsertAt].priority >= priority) {\n        break\n      }\n    }\n    this.postProcessors.splice(indexToInsertAt, 0, { postProcessor, priority })\n  }\n\n  /**\n     *\n     * @param manager\n     */\n  addFileManager(manager) {\n    this.fileManagers.push(manager)\n  }\n\n  /**\n     *\n     * @returns {Array}\n     * @private\n     */\n  getPreProcessors() {\n    const preProcessors = []\n    for (let i = 0; i < this.preProcessors.length; i++) {\n      preProcessors.push(this.preProcessors[i].preProcessor)\n    }\n    return preProcessors\n  }\n\n  /**\n     *\n     * @returns {Array}\n     * @private\n     */\n  getPostProcessors() {\n    const postProcessors = []\n    for (let i = 0; i < this.postProcessors.length; i++) {\n      postProcessors.push(this.postProcessors[i].postProcessor)\n    }\n    return postProcessors\n  }\n\n  /**\n     *\n     * @returns {Array}\n     * @private\n     */\n  getVisitors() {\n    return this.visitors\n  }\n\n  /**\n     *\n     * @returns {Array}\n     * @private\n     */\n  getFileManagers() {\n    return this.fileManagers\n  }\n}\n\nmodule.exports = PluginManager\n","let PromiseConstructor\nconst contexts = require('./contexts')\nconst Parser = require('./parser/parser')\nconst PluginManager = require('./plugin-manager')\n\nmodule.exports = (environment, ParseTree, ImportManager) => {\n  const parse = function(input, options = {}, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    if (!callback) {\n      const self = this\n      return new Promise((resolve, reject) => {\n        parse.call(self, input, options, (err, output) => {\n          if (err) {\n            reject(err)\n          } else {\n            resolve(output)\n          }\n        })\n      })\n    } else {\n      let context\n      let rootFileInfo\n      const pluginManager = new PluginManager(this)\n\n      pluginManager.addPlugins(options.plugins)\n      options.pluginManager = pluginManager\n\n      context = new contexts.Parse(options)\n\n      if (options.rootFileInfo) {\n        rootFileInfo = options.rootFileInfo\n      } else {\n        const filename = options.filename || 'input'\n        const entryPath = filename.replace(/[^\\/\\\\]*$/, '')\n        rootFileInfo = {\n          filename,\n          relativeUrls: context.relativeUrls,\n          rootpath: context.rootpath || '',\n          currentDirectory: entryPath,\n          entryPath,\n          rootFilename: filename,\n        }\n        // add in a missing trailing slash\n        if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n          rootFileInfo.rootpath += '/'\n        }\n      }\n\n      const imports = new ImportManager(context, rootFileInfo)\n\n      new Parser(context, imports, rootFileInfo).parse(\n        input,\n        (e, root) => {\n          if (e) {\n            return callback(e)\n          }\n          callback(null, root, imports, options)\n        },\n        options\n      )\n    }\n  }\n  return parse\n}\n","const createFromEnvironment = require('../less')\nconst AbstractFileManager = require('../less/environment/abstract-file-manager.js')\n\nclass NotSupportedFileManager extends AbstractFileManager {\n  supports() {\n    return true\n  }\n\n  supportsSync() {\n    return true\n  }\n\n  loadFile() {\n    return Promise.reject(new Error('loading is not supported'))\n  }\n\n  loadFileSync() {\n    new Error('loading is not supported')\n  }\n}\n\nconst less = createFromEnvironment(\n  {\n    getSourceMapGenerator: function() {\n      return null\n    },\n  },\n  [new NotSupportedFileManager()]\n)\nless.FileManager = NotSupportedFileManager\n\nmodule.exports = less\n","module.exports = (environment, fileManagers) => {\n  const Environment = require('./environment/environment')\n  environment = new Environment(environment, fileManagers)\n\n  const SourceMapOutput = require('./source-map-output')(environment)\n  const SourceMapBuilder = require('./source-map-builder')(\n    SourceMapOutput,\n    environment\n  )\n  const ParseTree = require('./parse-tree')(SourceMapBuilder)\n  const ImportManager = require('./import-manager')(environment)\n\n  return {\n    version: [2, 7, 2],\n    data: require('./data'),\n    tree: require('./tree'),\n    Environment,\n    environment,\n    AbstractFileManager: require('./environment/abstract-file-manager'),\n    visitors: require('./visitors'),\n    Parser: require('./parser/parser'),\n    functions: require('./functions')(environment),\n    contexts: require('./contexts'),\n    SourceMapOutput,\n    SourceMapBuilder,\n    ParseTree,\n    ImportManager: ImportManager,\n    render: require('./render')(environment, ParseTree, ImportManager),\n    parse: require('./parse')(environment, ParseTree, ImportManager),\n    LessError: require('./less-error'),\n    transformTree: require('./transform-tree'),\n    utils: require('./utils'),\n    PluginManager: require('./plugin-manager'),\n    logger: require('./logger'),\n    writeError(ctx, options) {\n      options = options || {}\n      if (options.silent) {\n        return\n      }\n      console.error(this.formatError(ctx, options))\n    },\n    formatError(ctx) {\n      let message = ''\n      let extract = ctx.extract\n      let error = []\n\n      // only output a stack if it isn't a less error\n      if (ctx.stack && !ctx.type) {\n        return ctx.stack\n      }\n\n      if (!ctx.hasOwnProperty('index') || !extract) {\n        return ctx.stack || ctx.message\n      }\n\n      if (typeof extract[0] === 'string') {\n        error.push(`${ctx.line - 1} ${extract[0]}`)\n      }\n\n      if (typeof extract[1] === 'string') {\n        let errorTxt = `${ctx.line} `\n        if (extract[1]) {\n          errorTxt +=\n            extract[1].slice(0, ctx.column) +\n            extract[1].substr(ctx.column, 1) +\n            extract[1].slice(ctx.column + 1)\n        }\n        error.push(errorTxt)\n      }\n\n      if (typeof extract[2] === 'string') {\n        error.push(`${ctx.line + 1} ${extract[2]}`)\n      }\n      error = `${error.join('\\n')}\\n`\n\n      message += `${ctx.type}Error: ${ctx.message}`\n      if (ctx.filename) {\n        message += ` in ${ctx.filename} on line ${ctx.line}, column ${ctx.column +\n          1}:`\n      }\n\n      message += `\\n${error}`\n\n      if (ctx.callLine) {\n        message += `from ${ctx.filename || ''}/n`\n        message += `${ctx.callLine} ${ctx.callExtract}/n`\n      }\n      return message\n    },\n  }\n}\n"]}